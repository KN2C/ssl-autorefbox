!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AR	Makefile	/^AR            = ar cqs$/;"	m
BALL	sample.h	/^        BALL = 0,$/;"	e	enum:Sample::Type
BALL_SAMPLES	filter_data.h	/^		BALL_SAMPLES = 250$/;"	e	enum:Filter_Data::__anon1
BAR_HORIZONTAL	field_hardware.h	/^		BAR_HORIZONTAL,$/;"	e	enum:Field_Hardware::Obstacle
BAR_VERTICAL	field_hardware.h	/^		BAR_VERTICAL,$/;"	e	enum:Field_Hardware::Obstacle
BLACK	colors.h	/^		BLACK,$/;"	e	enum:SSLRefbox::Colors::Color
BLUE	colors.h	/^		BLUE,$/;"	e	enum:SSLRefbox::Colors::Color
BLUE	sample.h	/^        BLUE,$/;"	e	enum:Sample::Last_Touched
BOUNCED	sample.h	/^        BOUNCED,$/;"	e	enum:Sample::Status
Ball_Percept	percept.h	/^    Ball_Percept(){};$/;"	f	class:Ball_Percept	access:public	signature:()
Ball_Percept	percept.h	/^    Ball_Percept(double x, double y, double rot)$/;"	f	class:Ball_Percept	access:public	signature:(double x, double y, double rot)
Ball_Percept	percept.h	/^class Ball_Percept : public Percept$/;"	c	inherits:Percept
Ball_Percept::Ball_Percept	percept.h	/^    Ball_Percept(){};$/;"	f	class:Ball_Percept	access:public	signature:()
Ball_Percept::Ball_Percept	percept.h	/^    Ball_Percept(double x, double y, double rot)$/;"	f	class:Ball_Percept	access:public	signature:(double x, double y, double rot)
Ball_Percept::operator <	percept.h	/^    bool operator<(const Ball_Percept& comp) const$/;"	f	class:Ball_Percept	access:public	signature:(const Ball_Percept& comp) const
Ball_Percept_List	percept.h	/^typedef std::vector<Ball_Percept>  Ball_Percept_List;$/;"	t
Ball_Sample	sample.cc	/^Ball_Sample::Ball_Sample() :$/;"	f	class:Ball_Sample	signature:()
Ball_Sample	sample.cc	/^Ball_Sample::Ball_Sample(BSmart::Pose3D pos_, BSmart::Pose3D speed_,$/;"	f	class:Ball_Sample	signature:(BSmart::Pose3D pos_, BSmart::Pose3D speed_, Status status_, Last_Touched last_touched_)
Ball_Sample	sample.cc	/^Ball_Sample::Ball_Sample(const Ball_Sample& other) :$/;"	f	class:Ball_Sample	signature:(const Ball_Sample& other)
Ball_Sample	sample.h	/^    Ball_Sample();$/;"	p	class:Ball_Sample	access:public	signature:()
Ball_Sample	sample.h	/^    Ball_Sample(BSmart::Pose3D, BSmart::Pose3D, Status, Last_Touched);$/;"	p	class:Ball_Sample	access:public	signature:(BSmart::Pose3D, BSmart::Pose3D, Status, Last_Touched)
Ball_Sample	sample.h	/^    Ball_Sample(const Ball_Sample&);$/;"	p	class:Ball_Sample	access:public	signature:(const Ball_Sample&)
Ball_Sample	sample.h	/^class Ball_Sample : public Sample$/;"	c	inherits:Sample
Ball_Sample::Ball_Sample	sample.cc	/^Ball_Sample::Ball_Sample() :$/;"	f	class:Ball_Sample	signature:()
Ball_Sample::Ball_Sample	sample.cc	/^Ball_Sample::Ball_Sample(BSmart::Pose3D pos_, BSmart::Pose3D speed_,$/;"	f	class:Ball_Sample	signature:(BSmart::Pose3D pos_, BSmart::Pose3D speed_, Status status_, Last_Touched last_touched_)
Ball_Sample::Ball_Sample	sample.cc	/^Ball_Sample::Ball_Sample(const Ball_Sample& other) :$/;"	f	class:Ball_Sample	signature:(const Ball_Sample& other)
Ball_Sample::Ball_Sample	sample.h	/^    Ball_Sample();$/;"	p	class:Ball_Sample	access:public	signature:()
Ball_Sample::Ball_Sample	sample.h	/^    Ball_Sample(BSmart::Pose3D, BSmart::Pose3D, Status, Last_Touched);$/;"	p	class:Ball_Sample	access:public	signature:(BSmart::Pose3D, BSmart::Pose3D, Status, Last_Touched)
Ball_Sample::Ball_Sample	sample.h	/^    Ball_Sample(const Ball_Sample&);$/;"	p	class:Ball_Sample	access:public	signature:(const Ball_Sample&)
Ball_Sample::ball_line	sample.h	/^    BSmart::Line ball_line;$/;"	m	class:Ball_Sample	access:private
Ball_Sample::ball_noise	sample.cc	/^const double Ball_Sample::ball_noise = 2.; \/\/ mm$/;"	m	class:Ball_Sample	file:
Ball_Sample::ball_noise	sample.h	/^    static const double ball_noise;$/;"	m	class:Ball_Sample	access:private
Ball_Sample::ball_speed_noise	sample.cc	/^const double Ball_Sample::ball_speed_noise = 0.02; \/\/ m\/s$/;"	m	class:Ball_Sample	file:
Ball_Sample::ball_speed_noise	sample.h	/^    static const double ball_speed_noise;$/;"	m	class:Ball_Sample	access:private
Ball_Sample::check_bar_reflections	sample.cc	/^bool Ball_Sample::check_bar_reflections(Hitpoint* hitpoint) {$/;"	f	class:Ball_Sample	signature:(Hitpoint* hitpoint)
Ball_Sample::check_bar_reflections	sample.h	/^    bool check_bar_reflections(Hitpoint*);$/;"	p	class:Ball_Sample	access:private	signature:(Hitpoint*)
Ball_Sample::check_collisions	sample.cc	/^void Ball_Sample::check_collisions(const Robot_Sample_List& robot_obstacles,$/;"	f	class:Ball_Sample	signature:(const Robot_Sample_List& robot_obstacles, double ms)
Ball_Sample::check_collisions	sample.h	/^    void check_collisions(const Robot_Sample_List&, double);$/;"	p	class:Ball_Sample	access:private	signature:(const Robot_Sample_List&, double)
Ball_Sample::check_floor_reflection	sample.cc	/^bool Ball_Sample::check_floor_reflection(Hitpoint* hitpoint) {$/;"	f	class:Ball_Sample	signature:(Hitpoint* hitpoint)
Ball_Sample::check_floor_reflection	sample.h	/^    bool check_floor_reflection(Hitpoint*);$/;"	p	class:Ball_Sample	access:private	signature:(Hitpoint*)
Ball_Sample::check_goalpost_reflections	sample.cc	/^bool Ball_Sample::check_goalpost_reflections(Hitpoint* hitpoint) {$/;"	f	class:Ball_Sample	signature:(Hitpoint* hitpoint)
Ball_Sample::check_goalpost_reflections	sample.h	/^    bool check_goalpost_reflections(Hitpoint*);$/;"	p	class:Ball_Sample	access:private	signature:(Hitpoint*)
Ball_Sample::check_robot_reflections	sample.cc	/^bool Ball_Sample::check_robot_reflections(Hitpoint* hitpoint,$/;"	f	class:Ball_Sample	signature:(Hitpoint* hitpoint, const Robot_Sample_List& robot_obstacles)
Ball_Sample::check_robot_reflections	sample.h	/^    bool check_robot_reflections(Hitpoint*, const Robot_Sample_List&);$/;"	p	class:Ball_Sample	access:private	signature:(Hitpoint*, const Robot_Sample_List&)
Ball_Sample::circle	sample.h	/^    BSmart::Circle circle;$/;"	m	class:Ball_Sample	access:private
Ball_Sample::collision3D	sample.h	/^    BSmart::Pose3D collision3D;$/;"	m	class:Ball_Sample	access:private
Ball_Sample::intersection	sample.h	/^    BSmart::Double_Vector intersection;$/;"	m	class:Ball_Sample	access:private
Ball_Sample::intersections	sample.h	/^    std::vector<BSmart::Double_Vector> intersections;$/;"	m	class:Ball_Sample	access:private
Ball_Sample::last_pos	sample.h	/^    BSmart::Pose3D last_pos;$/;"	m	class:Ball_Sample	access:private
Ball_Sample::last_touched	sample.h	/^    Last_Touched last_touched;$/;"	m	class:Ball_Sample	access:public
Ball_Sample::last_touched_robot	sample.h	/^    BSmart::Int_Vector last_touched_robot;$/;"	m	class:Ball_Sample	access:public
Ball_Sample::move	sample.cc	/^void Ball_Sample::move(const double ms,$/;"	f	class:Ball_Sample	signature:(const double ms, const Robot_Sample_List& robot_obstacles)
Ball_Sample::move	sample.h	/^    void move(const double, const Robot_Sample_List&);$/;"	p	class:Ball_Sample	access:public	signature:(const double, const Robot_Sample_List&)
Ball_Sample::polarbaer	sample.h	/^    BSmart::Double_Vector polarbaer;$/;"	m	class:Ball_Sample	access:private
Ball_Sample::pos	sample.h	/^    BSmart::Pose3D pos;$/;"	m	class:Ball_Sample	access:public
Ball_Sample::random	sample.h	/^    double random;$/;"	m	class:Ball_Sample	access:private
Ball_Sample::speed	sample.h	/^    BSmart::Pose3D speed;$/;"	m	class:Ball_Sample	access:public
Ball_Sample::~Ball_Sample	sample.cc	/^Ball_Sample::~Ball_Sample() {$/;"	f	class:Ball_Sample	signature:()
Ball_Sample::~Ball_Sample	sample.h	/^    ~Ball_Sample();$/;"	p	class:Ball_Sample	access:public	signature:()
Ball_Sample_List	sample.h	/^typedef std::vector<Ball_Sample> Ball_Sample_List;$/;"	t
Broken_Rule	filter_data.h	/^struct Broken_Rule {$/;"	s
Broken_Rule::circle_around_ball	filter_data.h	/^	bool circle_around_ball;$/;"	m	struct:Broken_Rule	access:public
Broken_Rule::defense_area	filter_data.h	/^	int defense_area; \/\/-1 no, 0 left, 1 right$/;"	m	struct:Broken_Rule	access:public
Broken_Rule::freekick_pos	filter_data.h	/^	BSmart::Int_Vector freekick_pos;$/;"	m	struct:Broken_Rule	access:public
Broken_Rule::line_for_smth	filter_data.h	/^	BSmart::Line line_for_smth;$/;"	m	struct:Broken_Rule	access:public
Broken_Rule::rule_breaker	filter_data.h	/^	BSmart::Int_Vector rule_breaker;$/;"	m	struct:Broken_Rule	access:public
Broken_Rule::rule_number	filter_data.h	/^	int rule_number;$/;"	m	struct:Broken_Rule	access:public
Broken_Rule::standing	filter_data.h	/^	BSmart::Int_Vector standing;$/;"	m	struct:Broken_Rule	access:public
Broken_Rule::when_broken	filter_data.h	/^	BSmart::Time_Value when_broken;$/;"	m	struct:Broken_Rule	access:public
CC	Makefile	/^CC            = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS        = -pipe -g -I\/usr\/lib\/swi-prolog\/include -Wall -W -D_REENTRANT $(DEFINES)$/;"	m
CHIPPED	sample.h	/^        CHIPPED,$/;"	e	enum:Sample::Status
CHK_DIR_EXISTS	Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
COLORS_H	colors.h	2;"	d
COMM_BAUD_RATE	commands.h	29;"	d
COMM_CANCEL	commands.h	50;"	d
COMM_CMD_STRING	commands.h	81;"	d
COMM_DIRECT_BLUE	commands.h	75;"	d
COMM_DIRECT_YELLOW	commands.h	74;"	d
COMM_FIRST_HALF	commands.h	38;"	d
COMM_GOAL_BLUE	commands.h	54;"	d
COMM_GOAL_YELLOW	commands.h	53;"	d
COMM_HALF_TIME	commands.h	39;"	d
COMM_HALT	commands.h	34;"	d
COMM_INDIRECT_BLUE	commands.h	78;"	d
COMM_INDIRECT_YELLOW	commands.h	77;"	d
COMM_KICKOFF_BLUE	commands.h	69;"	d
COMM_KICKOFF_YELLOW	commands.h	68;"	d
COMM_OVER_TIME1	commands.h	41;"	d
COMM_OVER_TIME2	commands.h	42;"	d
COMM_PENALTY_BLUE	commands.h	72;"	d
COMM_PENALTY_SHOOTOUT	commands.h	43;"	d
COMM_PENALTY_YELLOW	commands.h	71;"	d
COMM_READY	commands.h	35;"	d
COMM_REDCARD_BLUE	commands.h	63;"	d
COMM_REDCARD_YELLOW	commands.h	62;"	d
COMM_RESTART	commands.h	66;"	d
COMM_SECOND_HALF	commands.h	40;"	d
COMM_START	commands.h	33;"	d
COMM_STOP	commands.h	32;"	d
COMM_SUBGOAL_BLUE	commands.h	56;"	d
COMM_SUBGOAL_YELLOW	commands.h	55;"	d
COMM_TIMEOUT_BLUE	commands.h	47;"	d
COMM_TIMEOUT_END	commands.h	48;"	d
COMM_TIMEOUT_YELLOW	commands.h	46;"	d
COMM_YELLOWCARD_BLUE	commands.h	60;"	d
COMM_YELLOWCARD_YELLOW	commands.h	59;"	d
COMPRESS	Makefile	/^COMPRESS      = gzip -9f$/;"	m
COPY	Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	Makefile	/^COPY_DIR      = $(COPY) -r$/;"	m
COPY_FILE	Makefile	/^COPY_FILE     = $(COPY)$/;"	m
CXX	Makefile	/^CXX           = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS      = -pipe -g -I\/usr\/lib\/swi-prolog\/include -Wall -W -D_REENTRANT $(DEFINES)$/;"	m
Camera_Position	pre_filter_data.h	/^struct Camera_Position$/;"	s
Camera_Position::belief	pre_filter_data.h	/^    double belief;$/;"	m	struct:Camera_Position	access:public
Camera_Position::cam_pos	pre_filter_data.h	/^    BSmart::Pose3D cam_pos;$/;"	m	struct:Camera_Position	access:public
Color	colors.h	/^	enum Color {$/;"	g	class:SSLRefbox::Colors	access:public
Colors	colors.h	/^	Colors() {$/;"	f	class:SSLRefbox::Colors	access:public	signature:()
Colors	colors.h	/^class Colors {$/;"	c	namespace:SSLRefbox
DEFINES	Makefile	/^DEFINES       = -DQT_OPENGL_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED$/;"	m
DEL_DIR	Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	Makefile	/^DEL_FILE      = rm -f$/;"	m
DESTDIR	Makefile	/^DESTDIR       = ..\/bin\/$/;"	m
DIST	Makefile	/^DIST          = \/usr\/share\/qt4\/mkspecs\/common\/g++.conf \\$/;"	m
FIELD	colors.h	/^		FIELD,$/;"	e	enum:SSLRefbox::Colors::Color
FIELD_HARDWARE_H	field_hardware.h	2;"	d
FILTER_DATA_H	filter_data.h	2;"	d
FLOOR	field_hardware.h	/^		FLOOR$/;"	e	enum:Field_Hardware::Obstacle
FLYING	sample.h	/^        FLYING,$/;"	e	enum:Sample::Status
Field_Bar	field_hardware.cc	/^Field_Bar::Field_Bar() {$/;"	f	class:Field_Bar	signature:()
Field_Bar	field_hardware.cc	/^Field_Bar::Field_Bar(BSmart::Pose point_a_, BSmart::Pose point_b_,$/;"	f	class:Field_Bar	signature:(BSmart::Pose point_a_, BSmart::Pose point_b_, Field_Hardware::Obstacle obstacle_, double height_)
Field_Bar	field_hardware.cc	/^Field_Bar::Field_Bar(const Field_Bar& other) {$/;"	f	class:Field_Bar	signature:(const Field_Bar& other)
Field_Bar	field_hardware.h	/^	Field_Bar();$/;"	p	class:Field_Bar	access:public	signature:()
Field_Bar	field_hardware.h	/^	Field_Bar(BSmart::Pose, BSmart::Pose, Field_Hardware::Obstacle, double);$/;"	p	class:Field_Bar	access:public	signature:(BSmart::Pose, BSmart::Pose, Field_Hardware::Obstacle, double)
Field_Bar	field_hardware.h	/^	Field_Bar(const Field_Bar&);$/;"	p	class:Field_Bar	access:public	signature:(const Field_Bar&)
Field_Bar	field_hardware.h	/^class Field_Bar: public Field_Obstacle {$/;"	c	inherits:Field_Obstacle
Field_Bar::Field_Bar	field_hardware.cc	/^Field_Bar::Field_Bar() {$/;"	f	class:Field_Bar	signature:()
Field_Bar::Field_Bar	field_hardware.cc	/^Field_Bar::Field_Bar(BSmart::Pose point_a_, BSmart::Pose point_b_,$/;"	f	class:Field_Bar	signature:(BSmart::Pose point_a_, BSmart::Pose point_b_, Field_Hardware::Obstacle obstacle_, double height_)
Field_Bar::Field_Bar	field_hardware.cc	/^Field_Bar::Field_Bar(const Field_Bar& other) {$/;"	f	class:Field_Bar	signature:(const Field_Bar& other)
Field_Bar::Field_Bar	field_hardware.h	/^	Field_Bar();$/;"	p	class:Field_Bar	access:public	signature:()
Field_Bar::Field_Bar	field_hardware.h	/^	Field_Bar(BSmart::Pose, BSmart::Pose, Field_Hardware::Obstacle, double);$/;"	p	class:Field_Bar	access:public	signature:(BSmart::Pose, BSmart::Pose, Field_Hardware::Obstacle, double)
Field_Bar::Field_Bar	field_hardware.h	/^	Field_Bar(const Field_Bar&);$/;"	p	class:Field_Bar	access:public	signature:(const Field_Bar&)
Field_Bar::dist	field_hardware.h	/^	int dist;$/;"	m	class:Field_Bar	access:public
Field_Bar::height	field_hardware.h	/^	int height;$/;"	m	class:Field_Bar	access:public
Field_Bar::line	field_hardware.h	/^	BSmart::Line line;$/;"	m	class:Field_Bar	access:public
Field_Bar::point_a	field_hardware.h	/^	BSmart::Pose point_a;$/;"	m	class:Field_Bar	access:public
Field_Bar::point_b	field_hardware.h	/^	BSmart::Pose point_b;$/;"	m	class:Field_Bar	access:public
Field_Goalpost	field_hardware.cc	/^Field_Goalpost::Field_Goalpost() {$/;"	f	class:Field_Goalpost	signature:()
Field_Goalpost	field_hardware.cc	/^Field_Goalpost::Field_Goalpost(BSmart::Pose center_, int radius_, int height_) :$/;"	f	class:Field_Goalpost	signature:(BSmart::Pose center_, int radius_, int height_)
Field_Goalpost	field_hardware.cc	/^Field_Goalpost::Field_Goalpost(const Field_Goalpost& other) {$/;"	f	class:Field_Goalpost	signature:(const Field_Goalpost& other)
Field_Goalpost	field_hardware.h	/^	Field_Goalpost();$/;"	p	class:Field_Goalpost	access:public	signature:()
Field_Goalpost	field_hardware.h	/^	Field_Goalpost(BSmart::Pose, int, int);$/;"	p	class:Field_Goalpost	access:public	signature:(BSmart::Pose, int, int)
Field_Goalpost	field_hardware.h	/^	Field_Goalpost(const Field_Goalpost&);$/;"	p	class:Field_Goalpost	access:public	signature:(const Field_Goalpost&)
Field_Goalpost	field_hardware.h	/^class Field_Goalpost: public Field_Obstacle {$/;"	c	inherits:Field_Obstacle
Field_Goalpost::Field_Goalpost	field_hardware.cc	/^Field_Goalpost::Field_Goalpost() {$/;"	f	class:Field_Goalpost	signature:()
Field_Goalpost::Field_Goalpost	field_hardware.cc	/^Field_Goalpost::Field_Goalpost(BSmart::Pose center_, int radius_, int height_) :$/;"	f	class:Field_Goalpost	signature:(BSmart::Pose center_, int radius_, int height_)
Field_Goalpost::Field_Goalpost	field_hardware.cc	/^Field_Goalpost::Field_Goalpost(const Field_Goalpost& other) {$/;"	f	class:Field_Goalpost	signature:(const Field_Goalpost& other)
Field_Goalpost::Field_Goalpost	field_hardware.h	/^	Field_Goalpost();$/;"	p	class:Field_Goalpost	access:public	signature:()
Field_Goalpost::Field_Goalpost	field_hardware.h	/^	Field_Goalpost(BSmart::Pose, int, int);$/;"	p	class:Field_Goalpost	access:public	signature:(BSmart::Pose, int, int)
Field_Goalpost::Field_Goalpost	field_hardware.h	/^	Field_Goalpost(const Field_Goalpost&);$/;"	p	class:Field_Goalpost	access:public	signature:(const Field_Goalpost&)
Field_Goalpost::center	field_hardware.h	/^	BSmart::Pose center;$/;"	m	class:Field_Goalpost	access:public
Field_Goalpost::circle	field_hardware.h	/^	BSmart::Circle circle;$/;"	m	class:Field_Goalpost	access:public
Field_Goalpost::height	field_hardware.h	/^	int height;$/;"	m	class:Field_Goalpost	access:public
Field_Goalpost::radius	field_hardware.h	/^	int radius;$/;"	m	class:Field_Goalpost	access:public
Field_Hardware	field_hardware.cc	/^Field_Hardware::Field_Hardware() {$/;"	f	class:Field_Hardware	signature:()
Field_Hardware	field_hardware.h	/^	Field_Hardware();$/;"	p	class:Field_Hardware	access:public	signature:()
Field_Hardware	field_hardware.h	/^class Field_Hardware {$/;"	c
Field_Hardware::BAR_HORIZONTAL	field_hardware.h	/^		BAR_HORIZONTAL,$/;"	e	enum:Field_Hardware::Obstacle
Field_Hardware::BAR_VERTICAL	field_hardware.h	/^		BAR_VERTICAL,$/;"	e	enum:Field_Hardware::Obstacle
Field_Hardware::FLOOR	field_hardware.h	/^		FLOOR$/;"	e	enum:Field_Hardware::Obstacle
Field_Hardware::Field_Hardware	field_hardware.cc	/^Field_Hardware::Field_Hardware() {$/;"	f	class:Field_Hardware	signature:()
Field_Hardware::Field_Hardware	field_hardware.h	/^	Field_Hardware();$/;"	p	class:Field_Hardware	access:public	signature:()
Field_Hardware::GOALPOST	field_hardware.h	/^		GOALPOST,$/;"	e	enum:Field_Hardware::Obstacle
Field_Hardware::NO_OBSTACLE	field_hardware.h	/^		NO_OBSTACLE,$/;"	e	enum:Field_Hardware::Obstacle
Field_Hardware::NUMBER_FIELD_BARS	field_hardware.h	/^		NUMBER_FIELD_BARS = 20, NUMBER_FIELD_GOALPOSTS = 8$/;"	e	enum:Field_Hardware::__anon2
Field_Hardware::NUMBER_FIELD_GOALPOSTS	field_hardware.h	/^		NUMBER_FIELD_BARS = 20, NUMBER_FIELD_GOALPOSTS = 8$/;"	e	enum:Field_Hardware::__anon2
Field_Hardware::Obstacle	field_hardware.h	/^	enum Obstacle {$/;"	g	class:Field_Hardware	access:public
Field_Hardware::ROBOT_BLUE	field_hardware.h	/^		ROBOT_BLUE,$/;"	e	enum:Field_Hardware::Obstacle
Field_Hardware::ROBOT_YELLOW	field_hardware.h	/^		ROBOT_YELLOW,$/;"	e	enum:Field_Hardware::Obstacle
Field_Hardware::field_bars_ball	field_hardware.cc	/^		Field_Hardware::field_bars_ball[Field_Hardware::NUMBER_FIELD_BARS] =$/;"	m	class:Field_Hardware	file:
Field_Hardware::field_bars_ball	field_hardware.h	/^	static const Field_Bar field_bars_ball[NUMBER_FIELD_BARS];$/;"	m	class:Field_Hardware	access:public
Field_Hardware::field_bars_robot	field_hardware.cc	/^		Field_Hardware::field_bars_robot[Field_Hardware::NUMBER_FIELD_BARS] =$/;"	m	class:Field_Hardware	file:
Field_Hardware::field_bars_robot	field_hardware.h	/^	static const Field_Bar field_bars_robot[NUMBER_FIELD_BARS];$/;"	m	class:Field_Hardware	access:public
Field_Hardware::field_goalposts_ball	field_hardware.cc	/^		Field_Hardware::field_goalposts_ball[Field_Hardware::NUMBER_FIELD_GOALPOSTS] =$/;"	m	class:Field_Hardware	file:
Field_Hardware::field_goalposts_ball	field_hardware.h	/^	static const Field_Goalpost field_goalposts_ball[NUMBER_FIELD_GOALPOSTS];$/;"	m	class:Field_Hardware	access:public
Field_Hardware::field_goalposts_robot	field_hardware.cc	/^		Field_Hardware::field_goalposts_robot[Field_Hardware::NUMBER_FIELD_GOALPOSTS] =$/;"	m	class:Field_Hardware	file:
Field_Hardware::field_goalposts_robot	field_hardware.h	/^	static const Field_Goalpost field_goalposts_robot[NUMBER_FIELD_GOALPOSTS];$/;"	m	class:Field_Hardware	access:public
Field_Obstacle	field_hardware.cc	/^Field_Obstacle::Field_Obstacle() {$/;"	f	class:Field_Obstacle	signature:()
Field_Obstacle	field_hardware.h	/^	Field_Obstacle();$/;"	p	class:Field_Obstacle	access:public	signature:()
Field_Obstacle	field_hardware.h	/^class Field_Obstacle {$/;"	c
Field_Obstacle::Field_Obstacle	field_hardware.cc	/^Field_Obstacle::Field_Obstacle() {$/;"	f	class:Field_Obstacle	signature:()
Field_Obstacle::Field_Obstacle	field_hardware.h	/^	Field_Obstacle();$/;"	p	class:Field_Obstacle	access:public	signature:()
Field_Obstacle::obstacle	field_hardware.h	/^	Field_Hardware::Obstacle obstacle;$/;"	m	class:Field_Obstacle	access:public
Filter_Data	filter_data.cc	/^Filter_Data::Filter_Data() {$/;"	f	class:Filter_Data	signature:()
Filter_Data	filter_data.h	/^	Filter_Data();$/;"	p	class:Filter_Data	access:public	signature:()
Filter_Data	filter_data.h	/^class Filter_Data {$/;"	c
Filter_Data::BALL_SAMPLES	filter_data.h	/^		BALL_SAMPLES = 250$/;"	e	enum:Filter_Data::__anon1
Filter_Data::Filter_Data	filter_data.cc	/^Filter_Data::Filter_Data() {$/;"	f	class:Filter_Data	signature:()
Filter_Data::Filter_Data	filter_data.h	/^	Filter_Data();$/;"	p	class:Filter_Data	access:public	signature:()
Filter_Data::NUMBER_OF_IDS	filter_data.h	/^		NUMBER_OF_IDS = 12,$/;"	e	enum:Filter_Data::__anon1
Filter_Data::NUMBER_OF_TEAMS	filter_data.h	/^		NUMBER_OF_TEAMS = 2,$/;"	e	enum:Filter_Data::__anon1
Filter_Data::ROBOT_SAMPLES	filter_data.h	/^		ROBOT_SAMPLES = 50,$/;"	e	enum:Filter_Data::__anon1
Filter_Data::ball_model	filter_data.h	/^	Ball_Sample ball_model;$/;"	m	class:Filter_Data	access:private
Filter_Data::ball_samples	filter_data.h	/^	Ball_Sample_List ball_samples;$/;"	m	class:Filter_Data	access:private
Filter_Data::broken_rules	filter_data.h	/^	std::vector<Broken_Rule> broken_rules;$/;"	m	class:Filter_Data	access:private
Filter_Data::current_ball_percepts	filter_data.h	/^	Ball_Percept_List current_ball_percepts;$/;"	m	class:Filter_Data	access:private
Filter_Data::current_robot_percepts	filter_data.h	/^	Robot_Percept_List current_robot_percepts[NUMBER_OF_TEAMS][NUMBER_OF_IDS];$/;"	m	class:Filter_Data	access:private
Filter_Data::frame	filter_data.h	/^	int frame;$/;"	m	class:Filter_Data	access:private
Filter_Data::get_ball_model	filter_data.cc	/^Ball_Sample Filter_Data::get_ball_model() {$/;"	f	class:Filter_Data	signature:()
Filter_Data::get_ball_model	filter_data.h	/^	Ball_Sample get_ball_model();$/;"	p	class:Filter_Data	access:public	signature:()
Filter_Data::get_ball_samples	filter_data.cc	/^Ball_Sample_List Filter_Data::get_ball_samples() {$/;"	f	class:Filter_Data	signature:()
Filter_Data::get_ball_samples	filter_data.h	/^	Ball_Sample_List get_ball_samples();$/;"	p	class:Filter_Data	access:public	signature:()
Filter_Data::get_broken_rules	filter_data.cc	/^std::vector<Broken_Rule> Filter_Data::get_broken_rules() {$/;"	f	class:Filter_Data	signature:()
Filter_Data::get_broken_rules	filter_data.h	/^	std::vector<Broken_Rule> get_broken_rules();$/;"	p	class:Filter_Data	access:public	signature:()
Filter_Data::get_current_ball_percepts	filter_data.cc	/^Ball_Percept_List Filter_Data::get_current_ball_percepts() {$/;"	f	class:Filter_Data	signature:()
Filter_Data::get_current_ball_percepts	filter_data.h	/^	Ball_Percept_List get_current_ball_percepts();$/;"	p	class:Filter_Data	access:public	signature:()
Filter_Data::get_current_robot_obstacles	filter_data.cc	/^Robot_Sample_List Filter_Data::get_current_robot_obstacles() {$/;"	f	class:Filter_Data	signature:()
Filter_Data::get_current_robot_obstacles	filter_data.h	/^	Robot_Sample_List get_current_robot_obstacles();$/;"	p	class:Filter_Data	access:public	signature:()
Filter_Data::get_current_robot_percepts	filter_data.cc	/^Robot_Percept_List Filter_Data::get_current_robot_percepts(int team, int id) {$/;"	f	class:Filter_Data	signature:(int team, int id)
Filter_Data::get_current_robot_percepts	filter_data.h	/^	Robot_Percept_List get_current_robot_percepts(int, int);$/;"	p	class:Filter_Data	access:public	signature:(int, int)
Filter_Data::get_frame	filter_data.cc	/^int Filter_Data::get_frame() {$/;"	f	class:Filter_Data	signature:()
Filter_Data::get_frame	filter_data.h	/^	int get_frame();$/;"	p	class:Filter_Data	access:public	signature:()
Filter_Data::get_internal_play_states	filter_data.cc	/^BSmart::Int_Vector Filter_Data::get_internal_play_states() {$/;"	f	class:Filter_Data	signature:()
Filter_Data::get_internal_play_states	filter_data.h	/^	BSmart::Int_Vector get_internal_play_states();$/;"	p	class:Filter_Data	access:public	signature:()
Filter_Data::get_robot_model	filter_data.cc	/^Robot_Sample Filter_Data::get_robot_model(int team, int id) {$/;"	f	class:Filter_Data	signature:(int team, int id)
Filter_Data::get_robot_model	filter_data.h	/^	Robot_Sample get_robot_model(int, int);$/;"	p	class:Filter_Data	access:public	signature:(int, int)
Filter_Data::get_robot_samples	filter_data.cc	/^Robot_Sample_List Filter_Data::get_robot_samples(int team, int id) {$/;"	f	class:Filter_Data	signature:(int team, int id)
Filter_Data::get_robot_samples	filter_data.h	/^	Robot_Sample_List get_robot_samples(int, int);$/;"	p	class:Filter_Data	access:public	signature:(int, int)
Filter_Data::get_robot_seen	filter_data.cc	/^bool Filter_Data::get_robot_seen(int team, int id) {$/;"	f	class:Filter_Data	signature:(int team, int id)
Filter_Data::get_robot_seen	filter_data.h	/^	bool get_robot_seen(int, int);$/;"	p	class:Filter_Data	access:public	signature:(int, int)
Filter_Data::get_timestamp	filter_data.cc	/^BSmart::Time_Value Filter_Data::get_timestamp() {$/;"	f	class:Filter_Data	signature:()
Filter_Data::get_timestamp	filter_data.h	/^	BSmart::Time_Value get_timestamp();$/;"	p	class:Filter_Data	access:public	signature:()
Filter_Data::internal_play_states	filter_data.h	/^	BSmart::Int_Vector internal_play_states;$/;"	m	class:Filter_Data	access:private
Filter_Data::move_balls	filter_data.cc	/^void Filter_Data::move_balls(double ms, const Robot_Sample_List& robots) {$/;"	f	class:Filter_Data	signature:(double ms, const Robot_Sample_List& robots)
Filter_Data::move_balls	filter_data.h	/^	void move_balls(double, const Robot_Sample_List&);$/;"	p	class:Filter_Data	access:public	signature:(double, const Robot_Sample_List&)
Filter_Data::move_robots	filter_data.cc	/^void Filter_Data::move_robots(double ms, const Robot_Sample_List& robots) {$/;"	f	class:Filter_Data	signature:(double ms, const Robot_Sample_List& robots)
Filter_Data::move_robots	filter_data.h	/^	void move_robots(double, const Robot_Sample_List&);$/;"	p	class:Filter_Data	access:public	signature:(double, const Robot_Sample_List&)
Filter_Data::reduce_visibility	filter_data.cc	/^void Filter_Data::reduce_visibility() {$/;"	f	class:Filter_Data	signature:()
Filter_Data::reduce_visibility	filter_data.h	/^	void reduce_visibility();$/;"	p	class:Filter_Data	access:public	signature:()
Filter_Data::robot_models	filter_data.h	/^	Robot_Sample robot_models[NUMBER_OF_TEAMS][NUMBER_OF_IDS];$/;"	m	class:Filter_Data	access:private
Filter_Data::robot_samples	filter_data.h	/^	Robot_Sample_List robot_samples[NUMBER_OF_TEAMS][NUMBER_OF_IDS];$/;"	m	class:Filter_Data	access:private
Filter_Data::samples_mutex	filter_data.h	/^	QMutex samples_mutex;$/;"	m	class:Filter_Data	access:private
Filter_Data::set_ball_model	filter_data.cc	/^void Filter_Data::set_ball_model(const Ball_Sample& model) {$/;"	f	class:Filter_Data	signature:(const Ball_Sample& model)
Filter_Data::set_ball_model	filter_data.h	/^	void set_ball_model(const Ball_Sample&);$/;"	p	class:Filter_Data	access:public	signature:(const Ball_Sample&)
Filter_Data::set_ball_samples	filter_data.cc	/^void Filter_Data::set_ball_samples(const Ball_Sample_List& balls) {$/;"	f	class:Filter_Data	signature:(const Ball_Sample_List& balls)
Filter_Data::set_ball_samples	filter_data.h	/^	void set_ball_samples(const Ball_Sample_List&);$/;"	p	class:Filter_Data	access:public	signature:(const Ball_Sample_List&)
Filter_Data::set_broken_rules	filter_data.cc	/^void Filter_Data::set_broken_rules(std::vector<Broken_Rule> broken_rules_) {$/;"	f	class:Filter_Data	signature:(std::vector<Broken_Rule> broken_rules_)
Filter_Data::set_broken_rules	filter_data.h	/^	void set_broken_rules(std::vector<Broken_Rule>);$/;"	p	class:Filter_Data	access:public	signature:(std::vector<Broken_Rule>)
Filter_Data::set_current_ball_percepts	filter_data.cc	/^void Filter_Data::set_current_ball_percepts($/;"	f	class:Filter_Data	signature:( const Ball_Percept_List& ball_percepts)
Filter_Data::set_current_ball_percepts	filter_data.h	/^	void set_current_ball_percepts(const Ball_Percept_List& ball_percepts);$/;"	p	class:Filter_Data	access:public	signature:(const Ball_Percept_List& ball_percepts)
Filter_Data::set_current_robot_percepts	filter_data.cc	/^void Filter_Data::set_current_robot_percepts(int team, int id,$/;"	f	class:Filter_Data	signature:(int team, int id, const Robot_Percept_List& cur_robots)
Filter_Data::set_current_robot_percepts	filter_data.h	/^	void set_current_robot_percepts(int, int, const Robot_Percept_List&);$/;"	p	class:Filter_Data	access:public	signature:(int, int, const Robot_Percept_List&)
Filter_Data::set_frame	filter_data.cc	/^void Filter_Data::set_frame(const int& frame_) {$/;"	f	class:Filter_Data	signature:(const int& frame_)
Filter_Data::set_frame	filter_data.h	/^	void set_frame(const int&);$/;"	p	class:Filter_Data	access:public	signature:(const int&)
Filter_Data::set_internal_play_states	filter_data.cc	/^void Filter_Data::set_internal_play_states($/;"	f	class:Filter_Data	signature:( BSmart::Int_Vector internal_play_states_)
Filter_Data::set_internal_play_states	filter_data.h	/^	void set_internal_play_states(BSmart::Int_Vector);$/;"	p	class:Filter_Data	access:public	signature:(BSmart::Int_Vector)
Filter_Data::set_robot_model	filter_data.cc	/^void Filter_Data::set_robot_model(int team, int id, const Robot_Sample& model) {$/;"	f	class:Filter_Data	signature:(int team, int id, const Robot_Sample& model)
Filter_Data::set_robot_model	filter_data.h	/^	void set_robot_model(int, int, const Robot_Sample&);$/;"	p	class:Filter_Data	access:public	signature:(int, int, const Robot_Sample&)
Filter_Data::set_robot_samples	filter_data.cc	/^void Filter_Data::set_robot_samples(int team, int id,$/;"	f	class:Filter_Data	signature:(int team, int id, const Robot_Sample_List& robots)
Filter_Data::set_robot_samples	filter_data.h	/^	void set_robot_samples(int, int, const Robot_Sample_List&);$/;"	p	class:Filter_Data	access:public	signature:(int, int, const Robot_Sample_List&)
Filter_Data::set_robot_seen	filter_data.cc	/^void Filter_Data::set_robot_seen(int team, int id) {$/;"	f	class:Filter_Data	signature:(int team, int id)
Filter_Data::set_robot_seen	filter_data.h	/^	void set_robot_seen(int, int);$/;"	p	class:Filter_Data	access:public	signature:(int, int)
Filter_Data::set_timestamp	filter_data.cc	/^void Filter_Data::set_timestamp(const BSmart::Time_Value& timestamp_) {$/;"	f	class:Filter_Data	signature:(const BSmart::Time_Value& timestamp_)
Filter_Data::set_timestamp	filter_data.h	/^	void set_timestamp(const BSmart::Time_Value&);$/;"	p	class:Filter_Data	access:public	signature:(const BSmart::Time_Value&)
Filter_Data::timestamp	filter_data.h	/^	BSmart::Time_Value timestamp;$/;"	m	class:Filter_Data	access:private
Filter_Data::visibility	filter_data.h	/^	double visibility[NUMBER_OF_TEAMS][NUMBER_OF_IDS];$/;"	m	class:Filter_Data	access:private
Filter_Data::visibility_threshhold	filter_data.h	/^	double visibility_threshhold;$/;"	m	class:Filter_Data	access:private
GAMEAREA_H	gamearea.h	2;"	d
GLExtra	glextra.cc	/^GLExtra::GLExtra() {$/;"	f	class:GLExtra	signature:()
GLExtra	glextra.cc	/^GLExtra::GLExtra(Filter_Data* filter_data_) {$/;"	f	class:GLExtra	signature:(Filter_Data* filter_data_)
GLExtra	glextra.h	/^    GLExtra();$/;"	p	class:GLExtra	access:public	signature:()
GLExtra	glextra.h	/^    GLExtra(Filter_Data*);$/;"	p	class:GLExtra	access:public	signature:(Filter_Data*)
GLExtra	glextra.h	/^class GLExtra$/;"	c
GLExtra::GLExtra	glextra.cc	/^GLExtra::GLExtra() {$/;"	f	class:GLExtra	signature:()
GLExtra::GLExtra	glextra.cc	/^GLExtra::GLExtra(Filter_Data* filter_data_) {$/;"	f	class:GLExtra	signature:(Filter_Data* filter_data_)
GLExtra::GLExtra	glextra.h	/^    GLExtra();$/;"	p	class:GLExtra	access:public	signature:()
GLExtra::GLExtra	glextra.h	/^    GLExtra(Filter_Data*);$/;"	p	class:GLExtra	access:public	signature:(Filter_Data*)
GLExtra::Q_ALL	glextra.h	/^    Q_ALL = Q_I | Q_II | Q_III | Q_IV   \/\/full  circle$/;"	e	enum:GLExtra::Quadrant
GLExtra::Q_E	glextra.h	/^    Q_E   = Q_I | Q_IV,                 \/\/east  hemicircle$/;"	e	enum:GLExtra::Quadrant
GLExtra::Q_I	glextra.h	/^    Q_I   = 0x1,$/;"	e	enum:GLExtra::Quadrant
GLExtra::Q_II	glextra.h	/^    Q_II  = 0x2,$/;"	e	enum:GLExtra::Quadrant
GLExtra::Q_III	glextra.h	/^    Q_III = 0x4,$/;"	e	enum:GLExtra::Quadrant
GLExtra::Q_IV	glextra.h	/^    Q_IV  = 0x8,$/;"	e	enum:GLExtra::Quadrant
GLExtra::Q_N	glextra.h	/^    Q_N   = Q_I | Q_II,                 \/\/north hemicircle$/;"	e	enum:GLExtra::Quadrant
GLExtra::Q_S	glextra.h	/^    Q_S   = Q_III | Q_IV,               \/\/south hemicircle$/;"	e	enum:GLExtra::Quadrant
GLExtra::Q_W	glextra.h	/^    Q_W   = Q_II | Q_III,               \/\/west  hemicircle$/;"	e	enum:GLExtra::Quadrant
GLExtra::Quadrant	glextra.h	/^    enum Quadrant$/;"	g	class:GLExtra	access:public
GLExtra::ball_model	glextra.h	/^    Ball_Sample ball_model;$/;"	m	class:GLExtra	access:private
GLExtra::ball_samples	glextra.h	/^    Ball_Sample_List ball_samples;$/;"	m	class:GLExtra	access:private
GLExtra::bglBresCircle	glextra.cc	/^inline void GLExtra::bglBresCircle(const int& r, const Quadrant& q) {$/;"	f	class:GLExtra	signature:(const int& r, const Quadrant& q)
GLExtra::bglBresCircle	glextra.h	/^    static void bglBresCircle(const int& r, const Quadrant& q = Q_ALL);$/;"	p	class:GLExtra	access:private	signature:(const int& r, const Quadrant& q = Q_ALL)
GLExtra::bglDrawField	glextra.cc	/^void GLExtra::bglDrawField() {$/;"	f	class:GLExtra	signature:()
GLExtra::bglDrawField	glextra.h	/^    static void bglDrawField();$/;"	p	class:GLExtra	access:public	signature:()
GLExtra::bglDrawFilterData	glextra.cc	/^void GLExtra::bglDrawFilterData() {$/;"	f	class:GLExtra	signature:()
GLExtra::bglDrawFilterData	glextra.h	/^    void bglDrawFilterData();$/;"	p	class:GLExtra	access:public	signature:()
GLExtra::bglDrawRulesystemData	glextra.cc	/^void GLExtra::bglDrawRulesystemData() {$/;"	f	class:GLExtra	signature:()
GLExtra::bglDrawRulesystemData	glextra.h	/^    void bglDrawRulesystemData();$/;"	p	class:GLExtra	access:public	signature:()
GLExtra::bglPoint	glextra.cc	/^inline void GLExtra::bglPoint(const float x, const float y, const float sz) {$/;"	f	class:GLExtra	signature:(const float x, const float y, const float sz)
GLExtra::bglPoint	glextra.h	/^    static void bglPoint(const float x, const float y, const float sz = 20);$/;"	p	class:GLExtra	access:private	signature:(const float x, const float y, const float sz = 20)
GLExtra::broken_rule_vector	glextra.h	/^    std::vector<Broken_Rule> broken_rule_vector;$/;"	m	class:GLExtra	access:private
GLExtra::current_ball_percepts	glextra.h	/^    Ball_Percept_List current_ball_percepts;$/;"	m	class:GLExtra	access:private
GLExtra::current_robot_percepts	glextra.h	/^    Robot_Percept_List current_robot_percepts;$/;"	m	class:GLExtra	access:private
GLExtra::draw_ball	glextra.cc	/^void GLExtra::draw_ball(double x, double y, double z,$/;"	f	class:GLExtra	signature:(double x, double y, double z, SSLRefbox::Colors::Color color)
GLExtra::draw_ball	glextra.h	/^    void draw_ball(double, double, double, SSLRefbox::Colors::Color);$/;"	p	class:GLExtra	access:private	signature:(double, double, double, SSLRefbox::Colors::Color)
GLExtra::draw_defense_area	glextra.cc	/^void GLExtra::draw_defense_area(int offset) {$/;"	f	class:GLExtra	signature:(int offset)
GLExtra::draw_defense_area	glextra.h	/^    static void draw_defense_area(int);$/;"	p	class:GLExtra	access:private	signature:(int)
GLExtra::draw_goal	glextra.cc	/^void GLExtra::draw_goal() {$/;"	f	class:GLExtra	signature:()
GLExtra::draw_goal	glextra.h	/^    static void draw_goal();$/;"	p	class:GLExtra	access:private	signature:()
GLExtra::draw_marks	glextra.cc	/^void GLExtra::draw_marks() {$/;"	f	class:GLExtra	signature:()
GLExtra::draw_marks	glextra.h	/^    static void draw_marks();$/;"	p	class:GLExtra	access:private	signature:()
GLExtra::draw_robot	glextra.cc	/^void GLExtra::draw_robot(int x, int y, SSLRefbox::Colors::Color color,$/;"	f	class:GLExtra	signature:(int x, int y, SSLRefbox::Colors::Color color, int team, int id, bool last_touched)
GLExtra::draw_robot	glextra.h	/^    void draw_robot(int, int, SSLRefbox::Colors::Color, int team = -1, int id = -1, bool last_touched = false);$/;"	p	class:GLExtra	access:private	signature:(int, int, SSLRefbox::Colors::Color, int team = -1, int id = -1, bool last_touched = false)
GLExtra::filter_data	glextra.h	/^    Filter_Data* filter_data;$/;"	m	class:GLExtra	access:private
GLExtra::gamestate	glextra.h	/^    BSmart::Game_States* gamestate;$/;"	m	class:GLExtra	access:private
GLExtra::int_to_string	glextra.cc	/^int GLExtra::int_to_string(std::string& string, int i) {$/;"	f	class:GLExtra	signature:(std::string& string, int i)
GLExtra::int_to_string	glextra.h	/^    int int_to_string(std::string& string, int i);$/;"	p	class:GLExtra	access:private	signature:(std::string& string, int i)
GLExtra::internal_play_states	glextra.h	/^    BSmart::Int_Vector internal_play_states;$/;"	m	class:GLExtra	access:private
GLExtra::robot_models	glextra.h	/^    Robot_Sample_List robot_models;$/;"	m	class:GLExtra	access:private
GLExtra::robot_samples	glextra.h	/^    Robot_Sample_List robot_samples;$/;"	m	class:GLExtra	access:private
GLExtra::rulenames	glextra.cc	/^const std::string GLExtra::rulenames[42] = { "Robot Number exceeded", \/\/1$/;"	m	class:GLExtra	file:
GLExtra::rulenames	glextra.h	/^    static const std::string rulenames[42];$/;"	m	class:GLExtra	access:public
GLExtra::symmPlotPoints	glextra.cc	/^inline void GLExtra::symmPlotPoints(const int& x, const int& y,$/;"	f	class:GLExtra	signature:(const int& x, const int& y, const Quadrant& q)
GLExtra::symmPlotPoints	glextra.h	/^    static void symmPlotPoints(const int& x, const int& y, const Quadrant& q);$/;"	p	class:GLExtra	access:private	signature:(const int& x, const int& y, const Quadrant& q)
GLExtra::tmp_perc_robots	glextra.h	/^    Robot_Percept_List tmp_perc_robots;$/;"	m	class:GLExtra	access:private
GLExtra::tmp_sample_robots	glextra.h	/^    Robot_Sample_List tmp_sample_robots;$/;"	m	class:GLExtra	access:private
GLExtra::~GLExtra	glextra.cc	/^GLExtra::~GLExtra() {$/;"	f	class:GLExtra	signature:()
GLExtra::~GLExtra	glextra.h	/^    ~GLExtra();$/;"	p	class:GLExtra	access:public	signature:()
GOALPOST	field_hardware.h	/^		GOALPOST,$/;"	e	enum:Field_Hardware::Obstacle
GREEN	colors.h	/^		GREEN,$/;"	e	enum:SSLRefbox::Colors::Color
GREY	colors.h	/^		GREY,$/;"	e	enum:SSLRefbox::Colors::Color
GameStatePacket	refboxlistener.h	/^    struct GameStatePacket$/;"	s	class:RefboxListener	access:public
Gamearea	gamearea.cc	/^Gamearea::Gamearea(QWidget* p) :$/;"	f	class:Gamearea	signature:(QWidget* p)
Gamearea	gamearea.h	/^	Gamearea(QWidget*);$/;"	p	class:Gamearea	access:public	signature:(QWidget*)
Gamearea	gamearea.h	/^class Gamearea : public QGLWidget$/;"	c	inherits:QGLWidget
Gamearea::Gamearea	gamearea.cc	/^Gamearea::Gamearea(QWidget* p) :$/;"	f	class:Gamearea	signature:(QWidget* p)
Gamearea::Gamearea	gamearea.h	/^	Gamearea(QWidget*);$/;"	p	class:Gamearea	access:public	signature:(QWidget*)
Gamearea::bitmap_output	gamearea.cc	/^void Gamearea::bitmap_output(void *font) {$/;"	f	class:Gamearea	signature:(void *font)
Gamearea::bitmap_output	gamearea.h	/^	void bitmap_output(void*);$/;"	p	class:Gamearea	access:public	signature:(void*)
Gamearea::change_show_rules	debug/moc_gamearea.cpp	/^void Gamearea::change_show_rules(QString _t1)$/;"	f	class:Gamearea	signature:(QString _t1)
Gamearea::change_show_rules	gamearea.h	/^    void change_show_rules(QString);$/;"	p	class:Gamearea	access:public	signature:(QString)
Gamearea::change_show_rules	moc_gamearea.cpp	/^void Gamearea::change_show_rules(QString _t1)$/;"	f	class:Gamearea	signature:(QString _t1)
Gamearea::filter_data	gamearea.h	/^    Filter_Data* filter_data;$/;"	m	class:Gamearea	access:public
Gamearea::gamestate	gamearea.h	/^    BSmart::Game_States* gamestate;$/;"	m	class:Gamearea	access:public
Gamearea::getStaticMetaObject	debug/moc_gamearea.cpp	/^const QMetaObject &Gamearea::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Gamearea	signature:()
Gamearea::getStaticMetaObject	moc_gamearea.cpp	/^const QMetaObject &Gamearea::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Gamearea	signature:()
Gamearea::glextra	gamearea.h	/^    GLExtra glextra;$/;"	m	class:Gamearea	access:private
Gamearea::initializeGL	gamearea.cc	/^void Gamearea::initializeGL() {$/;"	f	class:Gamearea	signature:()
Gamearea::initializeGL	gamearea.h	/^	void initializeGL();$/;"	p	class:Gamearea	access:public	signature:()
Gamearea::m_field	gamearea.h	/^    GLuint  m_field;$/;"	m	class:Gamearea	access:private
Gamearea::m_timer	gamearea.h	/^    int m_timer;$/;"	m	class:Gamearea	access:private
Gamearea::metaObject	debug/moc_gamearea.cpp	/^const QMetaObject *Gamearea::metaObject() const$/;"	f	class:Gamearea	signature:() const
Gamearea::metaObject	moc_gamearea.cpp	/^const QMetaObject *Gamearea::metaObject() const$/;"	f	class:Gamearea	signature:() const
Gamearea::new_data_wait_condition	gamearea.h	/^    QWaitCondition* new_data_wait_condition;$/;"	m	class:Gamearea	access:public
Gamearea::paintGL	gamearea.cc	/^void Gamearea::paintGL() {$/;"	f	class:Gamearea	signature:()
Gamearea::paintGL	gamearea.h	/^	void paintGL();$/;"	p	class:Gamearea	access:public	signature:()
Gamearea::particle_filter	gamearea.h	/^    Particle_Filter_Mother* particle_filter;$/;"	m	class:Gamearea	access:public
Gamearea::pf_data	gamearea.h	/^    Pre_Filter_Data* pf_data;$/;"	m	class:Gamearea	access:public
Gamearea::pf_tester	gamearea.h	/^    PF_Tester* pf_tester;$/;"	m	class:Gamearea	access:public
Gamearea::qt_metacall	debug/moc_gamearea.cpp	/^int Gamearea::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Gamearea	signature:(QMetaObject::Call _c, int _id, void **_a)
Gamearea::qt_metacall	moc_gamearea.cpp	/^int Gamearea::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Gamearea	signature:(QMetaObject::Call _c, int _id, void **_a)
Gamearea::qt_metacast	debug/moc_gamearea.cpp	/^void *Gamearea::qt_metacast(const char *_clname)$/;"	f	class:Gamearea	signature:(const char *_clname)
Gamearea::qt_metacast	moc_gamearea.cpp	/^void *Gamearea::qt_metacast(const char *_clname)$/;"	f	class:Gamearea	signature:(const char *_clname)
Gamearea::refbox_listener	gamearea.h	/^    RefboxListener* refbox_listener;$/;"	m	class:Gamearea	access:public
Gamearea::resizeGL	gamearea.cc	/^void Gamearea::resizeGL(int width, int height) {$/;"	f	class:Gamearea	signature:(int width, int height)
Gamearea::resizeGL	gamearea.h	/^	void resizeGL(int, int);$/;"	p	class:Gamearea	access:public	signature:(int, int)
Gamearea::resizeSlider	debug/moc_gamearea.cpp	/^void Gamearea::resizeSlider(int _t1)$/;"	f	class:Gamearea	signature:(int _t1)
Gamearea::resizeSlider	gamearea.h	/^    void resizeSlider(int);$/;"	p	class:Gamearea	access:public	signature:(int)
Gamearea::resizeSlider	moc_gamearea.cpp	/^void Gamearea::resizeSlider(int _t1)$/;"	f	class:Gamearea	signature:(int _t1)
Gamearea::rules	gamearea.h	/^    SSL_Refbox_Rules* rules;$/;"	m	class:Gamearea	access:public
Gamearea::rules_wait_condition	gamearea.h	/^    QWaitCondition* rules_wait_condition;$/;"	m	class:Gamearea	access:public
Gamearea::showLogControl	debug/moc_gamearea.cpp	/^void Gamearea::showLogControl(bool _t1)$/;"	f	class:Gamearea	signature:(bool _t1)
Gamearea::showLogControl	gamearea.h	/^    void showLogControl(bool);$/;"	p	class:Gamearea	access:public	signature:(bool)
Gamearea::showLogControl	moc_gamearea.cpp	/^void Gamearea::showLogControl(bool _t1)$/;"	f	class:Gamearea	signature:(bool _t1)
Gamearea::show_rule_data	gamearea.h	/^    bool show_rule_data;$/;"	m	class:Gamearea	access:private
Gamearea::show_rules_changed	gamearea.cc	/^void Gamearea::show_rules_changed() {$/;"	f	class:Gamearea	signature:()
Gamearea::show_rules_changed	gamearea.h	/^    void show_rules_changed();$/;"	p	class:Gamearea	access:public	signature:()
Gamearea::show_world	gamearea.cc	/^void Gamearea::show_world() {$/;"	f	class:Gamearea	signature:()
Gamearea::show_world	gamearea.h	/^    void show_world();$/;"	p	class:Gamearea	access:public	signature:()
Gamearea::start_time	gamearea.h	/^    BSmart::Time_Value start_time;$/;"	m	class:Gamearea	access:private
Gamearea::staticMetaObject	debug/moc_gamearea.cpp	/^const QMetaObject Gamearea::staticMetaObject = {$/;"	m	class:Gamearea	file:
Gamearea::staticMetaObject	moc_gamearea.cpp	/^const QMetaObject Gamearea::staticMetaObject = {$/;"	m	class:Gamearea	file:
Gamearea::timerEvent	gamearea.cc	/^void Gamearea::timerEvent(QTimerEvent*) {$/;"	f	class:Gamearea	signature:(QTimerEvent*)
Gamearea::timerEvent	gamearea.h	/^	void timerEvent(QTimerEvent*);$/;"	p	class:Gamearea	access:public	signature:(QTimerEvent*)
Gamearea::vision	gamearea.h	/^    SSLVision* vision;$/;"	m	class:Gamearea	access:public
Gamearea::world_model	gamearea.h	/^    GLuint  world_model;$/;"	m	class:Gamearea	access:private
Gamearea::~Gamearea	gamearea.cc	/^Gamearea::~Gamearea() {$/;"	f	class:Gamearea	signature:()
Gamearea::~Gamearea	gamearea.h	/^	~Gamearea();$/;"	p	class:Gamearea	access:public	signature:()
GuiActions	guiactions.cc	/^GuiActions::GuiActions(Ui::GuiControls* gui, QObject* win) :$/;"	f	class:GuiActions	signature:(Ui::GuiControls* gui, QObject* win)
GuiActions	guiactions.h	/^    GuiActions(Ui::GuiControls*, QObject* = 0);$/;"	p	class:GuiActions	access:public	signature:(Ui::GuiControls*, QObject* = 0)
GuiActions	guiactions.h	/^class GuiActions : public QObject$/;"	c	inherits:QObject
GuiActions::GuiActions	guiactions.cc	/^GuiActions::GuiActions(Ui::GuiControls* gui, QObject* win) :$/;"	f	class:GuiActions	signature:(Ui::GuiControls* gui, QObject* win)
GuiActions::GuiActions	guiactions.h	/^    GuiActions(Ui::GuiControls*, QObject* = 0);$/;"	p	class:GuiActions	access:public	signature:(Ui::GuiControls*, QObject* = 0)
GuiActions::change_ball_last_touched	guiactions.cc	/^void GuiActions::change_ball_last_touched(QString text) {$/;"	f	class:GuiActions	signature:(QString text)
GuiActions::change_ball_last_touched	guiactions.h	/^    void change_ball_last_touched(QString);$/;"	p	class:GuiActions	access:public	signature:(QString)
GuiActions::change_ball_status	guiactions.cc	/^void GuiActions::change_ball_status(QString text) {$/;"	f	class:GuiActions	signature:(QString text)
GuiActions::change_ball_status	guiactions.h	/^    void change_ball_status(QString);$/;"	p	class:GuiActions	access:public	signature:(QString)
GuiActions::change_play_button	guiactions.cc	/^void GuiActions::change_play_button(QString text) {$/;"	f	class:GuiActions	signature:(QString text)
GuiActions::change_play_button	guiactions.h	/^    void change_play_button(QString);$/;"	p	class:GuiActions	access:public	signature:(QString)
GuiActions::change_record_button	guiactions.cc	/^void GuiActions::change_record_button(QString text) {$/;"	f	class:GuiActions	signature:(QString text)
GuiActions::change_record_button	guiactions.h	/^    void change_record_button(QString);$/;"	p	class:GuiActions	access:public	signature:(QString)
GuiActions::change_show_rules	guiactions.cc	/^void GuiActions::change_show_rules(QString text) {$/;"	f	class:GuiActions	signature:(QString text)
GuiActions::change_show_rules	guiactions.h	/^    void change_show_rules(QString);$/;"	p	class:GuiActions	access:public	signature:(QString)
GuiActions::connectActions	guiactions.cc	/^void GuiActions::connectActions() {$/;"	f	class:GuiActions	signature:()
GuiActions::connectActions	guiactions.h	/^    void connectActions();$/;"	p	class:GuiActions	access:public	signature:()
GuiActions::fullscreen	guiactions.cc	/^void GuiActions::fullscreen(bool f) {$/;"	f	class:GuiActions	signature:(bool f)
GuiActions::fullscreen	guiactions.h	/^    void fullscreen(bool);$/;"	p	class:GuiActions	access:public	signature:(bool)
GuiActions::getStaticMetaObject	debug/moc_guiactions.cpp	/^const QMetaObject &GuiActions::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:GuiActions	signature:()
GuiActions::getStaticMetaObject	moc_guiactions.cpp	/^const QMetaObject &GuiActions::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:GuiActions	signature:()
GuiActions::goto_frame	debug/moc_guiactions.cpp	/^void GuiActions::goto_frame(int _t1)$/;"	f	class:GuiActions	signature:(int _t1)
GuiActions::goto_frame	guiactions.h	/^    void goto_frame(int);$/;"	p	class:GuiActions	access:public	signature:(int)
GuiActions::goto_frame	moc_guiactions.cpp	/^void GuiActions::goto_frame(int _t1)$/;"	f	class:GuiActions	signature:(int _t1)
GuiActions::initializeSlider	guiactions.cc	/^void GuiActions::initializeSlider(int min, int max, int singleStep,$/;"	f	class:GuiActions	signature:(int min, int max, int singleStep, int pageStep, int tickInterval)
GuiActions::initializeSlider	guiactions.h	/^    void initializeSlider(int, int, int, int, int);$/;"	p	class:GuiActions	access:public	signature:(int, int, int, int, int)
GuiActions::m_gui	guiactions.h	/^Ui::GuiControls* m_gui;$/;"	m	class:GuiActions	access:private
GuiActions::metaObject	debug/moc_guiactions.cpp	/^const QMetaObject *GuiActions::metaObject() const$/;"	f	class:GuiActions	signature:() const
GuiActions::metaObject	moc_guiactions.cpp	/^const QMetaObject *GuiActions::metaObject() const$/;"	f	class:GuiActions	signature:() const
GuiActions::qt_metacall	debug/moc_guiactions.cpp	/^int GuiActions::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:GuiActions	signature:(QMetaObject::Call _c, int _id, void **_a)
GuiActions::qt_metacall	moc_guiactions.cpp	/^int GuiActions::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:GuiActions	signature:(QMetaObject::Call _c, int _id, void **_a)
GuiActions::qt_metacast	debug/moc_guiactions.cpp	/^void *GuiActions::qt_metacast(const char *_clname)$/;"	f	class:GuiActions	signature:(const char *_clname)
GuiActions::qt_metacast	moc_guiactions.cpp	/^void *GuiActions::qt_metacast(const char *_clname)$/;"	f	class:GuiActions	signature:(const char *_clname)
GuiActions::resizeSlider	guiactions.cc	/^void GuiActions::resizeSlider(int width) {$/;"	f	class:GuiActions	signature:(int width)
GuiActions::resizeSlider	guiactions.h	/^    void resizeSlider(int);$/;"	p	class:GuiActions	access:public	signature:(int)
GuiActions::slider_action	guiactions.cc	/^void GuiActions::slider_action(int action) {$/;"	f	class:GuiActions	signature:(int action)
GuiActions::slider_action	guiactions.h	/^    void slider_action(int);$/;"	p	class:GuiActions	access:public	signature:(int)
GuiActions::staticMetaObject	debug/moc_guiactions.cpp	/^const QMetaObject GuiActions::staticMetaObject = {$/;"	m	class:GuiActions	file:
GuiActions::staticMetaObject	moc_guiactions.cpp	/^const QMetaObject GuiActions::staticMetaObject = {$/;"	m	class:GuiActions	file:
GuiActions::update_frame	guiactions.cc	/^void GuiActions::update_frame(int frame) {$/;"	f	class:GuiActions	signature:(int frame)
GuiActions::update_frame	guiactions.h	/^    void update_frame(int);$/;"	p	class:GuiActions	access:public	signature:(int)
GuiActions::~GuiActions	guiactions.cc	/^GuiActions::~GuiActions() {$/;"	f	class:GuiActions	signature:()
GuiActions::~GuiActions	guiactions.h	/^    ~GuiActions();$/;"	p	class:GuiActions	access:public	signature:()
GuiControls	ui_GuiControls.h	/^    class GuiControls: public Ui_GuiControls {};$/;"	c	namespace:Ui	inherits:Ui_GuiControls
Hitpoint	field_hardware.h	/^struct Hitpoint {$/;"	s
Hitpoint::collisionpoint	field_hardware.h	/^	BSmart::Double_Vector collisionpoint; \/\/2d$/;"	m	struct:Hitpoint	access:public
Hitpoint::dist	field_hardware.h	/^	double dist;$/;"	m	struct:Hitpoint	access:public
Hitpoint::height	field_hardware.h	/^	int height;$/;"	m	struct:Hitpoint	access:public
Hitpoint::obstacle	field_hardware.h	/^	Field_Hardware::Obstacle obstacle;$/;"	m	struct:Hitpoint	access:public
Hitpoint::orientation_point	field_hardware.h	/^	BSmart::Double_Vector orientation_point;$/;"	m	struct:Hitpoint	access:public
Hitpoint::robot_id	field_hardware.h	/^	int robot_id;$/;"	m	struct:Hitpoint	access:public
INCPATH	Makefile	/^INCPATH       = -I\/usr\/share\/qt4\/mkspecs\/linux-g++ -I. -I\/usr\/include\/qt4\/QtCore -I\/usr\/include\/qt4\/QtGui -I\/usr\/include\/qt4\/QtOpenGL -I\/usr\/include\/qt4 -I.. -I\/usr\/X11R6\/include -I. -I.$/;"	m
INSTALL_DIR	Makefile	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_FILE	Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
KICKED	sample.h	/^        KICKED,$/;"	e	enum:Sample::Status
LAST_TOUCHED_NUM	sample.h	/^        LAST_TOUCHED_NUM$/;"	e	enum:Sample::Last_Touched
LFLAGS	Makefile	/^LFLAGS        = $/;"	m
LIBS	Makefile	/^LIBS          = $(SUBLIBS)  -L\/usr\/lib -L\/usr\/X11R6\/lib -lprotobuf -lglut -lswipl -lpthread -lQtOpenGL -lQtGui -lQtCore -lGLU -lGL $/;"	m
LINK	Makefile	/^LINK          = swipl-ld ssl_refbox_rules_prolog.pl$/;"	m
LOG_CONTROL_H	log_control.h	2;"	d
LYING	sample.h	/^        LYING,$/;"	e	enum:Sample::Status
Last_Contact	particle_filter.h	/^struct Last_Contact$/;"	s
Last_Contact::frame	particle_filter.h	/^    int frame;$/;"	m	struct:Last_Contact	access:public
Last_Contact::lying_shot	particle_filter.h	/^    bool lying_shot;$/;"	m	struct:Last_Contact	access:public
Last_Contact::robot	particle_filter.h	/^    BSmart::Int_Vector robot;$/;"	m	struct:Last_Contact	access:public
Last_Contact::timestamp	particle_filter.h	/^    BSmart::Time_Value timestamp;$/;"	m	struct:Last_Contact	access:public
Last_Contact::type	particle_filter.h	/^    int type;$/;"	m	struct:Last_Contact	access:public
Last_Touched	sample.h	/^    enum Last_Touched$/;"	g	class:Sample	access:public
Log_Control	log_control.cc	/^Log_Control::Log_Control() {$/;"	f	class:Log_Control	signature:()
Log_Control	log_control.h	/^    Log_Control();$/;"	p	class:Log_Control	access:public	signature:()
Log_Control	log_control.h	/^class Log_Control : public QObject$/;"	c	inherits:QObject
Log_Control::Log_Control	log_control.cc	/^Log_Control::Log_Control() {$/;"	f	class:Log_Control	signature:()
Log_Control::Log_Control	log_control.h	/^    Log_Control();$/;"	p	class:Log_Control	access:public	signature:()
Log_Control::current_frame	log_control.h	/^    int current_frame;$/;"	m	class:Log_Control	access:private
Log_Control::getStaticMetaObject	debug/moc_log_control.cpp	/^const QMetaObject &Log_Control::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Log_Control	signature:()
Log_Control::getStaticMetaObject	moc_log_control.cpp	/^const QMetaObject &Log_Control::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Log_Control	signature:()
Log_Control::get_current_frame	log_control.cc	/^int Log_Control::get_current_frame() {$/;"	f	class:Log_Control	signature:()
Log_Control::get_current_frame	log_control.h	/^    int get_current_frame();$/;"	p	class:Log_Control	access:public	signature:()
Log_Control::get_next_frame	log_control.cc	/^int Log_Control::get_next_frame() {$/;"	f	class:Log_Control	signature:()
Log_Control::get_next_frame	log_control.h	/^    int get_next_frame();$/;"	p	class:Log_Control	access:public	signature:()
Log_Control::get_play_speed	log_control.cc	/^double Log_Control::get_play_speed() {$/;"	f	class:Log_Control	signature:()
Log_Control::get_play_speed	log_control.h	/^    double get_play_speed();$/;"	p	class:Log_Control	access:public	signature:()
Log_Control::get_prop_next_frame	log_control.cc	/^int Log_Control::get_prop_next_frame() {$/;"	f	class:Log_Control	signature:()
Log_Control::get_prop_next_frame	log_control.h	/^    int get_prop_next_frame();$/;"	p	class:Log_Control	access:public	signature:()
Log_Control::goto_frame	log_control.cc	/^void Log_Control::goto_frame(int f) {$/;"	f	class:Log_Control	signature:(int f)
Log_Control::goto_frame	log_control.h	/^    void goto_frame(int);$/;"	p	class:Log_Control	access:public	signature:(int)
Log_Control::log_backward	log_control.cc	/^void Log_Control::log_backward() {$/;"	f	class:Log_Control	signature:()
Log_Control::log_backward	log_control.h	/^    void log_backward();$/;"	p	class:Log_Control	access:public	signature:()
Log_Control::log_faster	log_control.cc	/^void Log_Control::log_faster() {$/;"	f	class:Log_Control	signature:()
Log_Control::log_faster	log_control.h	/^    void log_faster();$/;"	p	class:Log_Control	access:public	signature:()
Log_Control::log_forward	log_control.cc	/^void Log_Control::log_forward() {$/;"	f	class:Log_Control	signature:()
Log_Control::log_forward	log_control.h	/^    void log_forward();$/;"	p	class:Log_Control	access:public	signature:()
Log_Control::log_frame_back	log_control.cc	/^void Log_Control::log_frame_back() {$/;"	f	class:Log_Control	signature:()
Log_Control::log_frame_back	log_control.h	/^    void log_frame_back();$/;"	p	class:Log_Control	access:public	signature:()
Log_Control::log_frame_forward	log_control.cc	/^void Log_Control::log_frame_forward() {$/;"	f	class:Log_Control	signature:()
Log_Control::log_frame_forward	log_control.h	/^    void log_frame_forward();$/;"	p	class:Log_Control	access:public	signature:()
Log_Control::log_length	log_control.h	/^    int log_length;$/;"	m	class:Log_Control	access:private
Log_Control::log_pause	log_control.cc	/^void Log_Control::log_pause() {$/;"	f	class:Log_Control	signature:()
Log_Control::log_pause	log_control.h	/^    void log_pause();$/;"	p	class:Log_Control	access:public	signature:()
Log_Control::log_play	log_control.cc	/^void Log_Control::log_play() {$/;"	f	class:Log_Control	signature:()
Log_Control::log_play	log_control.h	/^    void log_play();$/;"	p	class:Log_Control	access:public	signature:()
Log_Control::log_slower	log_control.cc	/^void Log_Control::log_slower() {$/;"	f	class:Log_Control	signature:()
Log_Control::log_slower	log_control.h	/^    void log_slower();$/;"	p	class:Log_Control	access:public	signature:()
Log_Control::metaObject	debug/moc_log_control.cpp	/^const QMetaObject *Log_Control::metaObject() const$/;"	f	class:Log_Control	signature:() const
Log_Control::metaObject	moc_log_control.cpp	/^const QMetaObject *Log_Control::metaObject() const$/;"	f	class:Log_Control	signature:() const
Log_Control::next_frame	log_control.h	/^    int next_frame;$/;"	m	class:Log_Control	access:private
Log_Control::play_speed	log_control.h	/^    double play_speed;$/;"	m	class:Log_Control	access:private
Log_Control::play_speed_save	log_control.h	/^    double play_speed_save;$/;"	m	class:Log_Control	access:private
Log_Control::qt_metacall	debug/moc_log_control.cpp	/^int Log_Control::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Log_Control	signature:(QMetaObject::Call _c, int _id, void **_a)
Log_Control::qt_metacall	moc_log_control.cpp	/^int Log_Control::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Log_Control	signature:(QMetaObject::Call _c, int _id, void **_a)
Log_Control::qt_metacast	debug/moc_log_control.cpp	/^void *Log_Control::qt_metacast(const char *_clname)$/;"	f	class:Log_Control	signature:(const char *_clname)
Log_Control::qt_metacast	moc_log_control.cpp	/^void *Log_Control::qt_metacast(const char *_clname)$/;"	f	class:Log_Control	signature:(const char *_clname)
Log_Control::reset	log_control.cc	/^void Log_Control::reset(int size) {$/;"	f	class:Log_Control	signature:(int size)
Log_Control::reset	log_control.h	/^    void reset(int);$/;"	p	class:Log_Control	access:public	signature:(int)
Log_Control::staticMetaObject	debug/moc_log_control.cpp	/^const QMetaObject Log_Control::staticMetaObject = {$/;"	m	class:Log_Control	file:
Log_Control::staticMetaObject	moc_log_control.cpp	/^const QMetaObject Log_Control::staticMetaObject = {$/;"	m	class:Log_Control	file:
Log_Control::update_play_speed	log_control.cc	/^void Log_Control::update_play_speed() {$/;"	f	class:Log_Control	signature:()
Log_Control::update_play_speed	log_control.h	/^    void update_play_speed();$/;"	p	class:Log_Control	access:private	signature:()
Log_Control::update_speed	debug/moc_log_control.cpp	/^void Log_Control::update_speed(QString _t1)$/;"	f	class:Log_Control	signature:(QString _t1)
Log_Control::update_speed	log_control.h	/^    void update_speed(QString);$/;"	p	class:Log_Control	access:public	signature:(QString)
Log_Control::update_speed	moc_log_control.cpp	/^void Log_Control::update_speed(QString _t1)$/;"	f	class:Log_Control	signature:(QString _t1)
Log_Control::~Log_Control	log_control.cc	/^Log_Control::~Log_Control() {$/;"	f	class:Log_Control	signature:()
Log_Control::~Log_Control	log_control.h	/^    ~Log_Control();$/;"	p	class:Log_Control	access:public	signature:()
MAGENTA	colors.h	/^		MAGENTA,$/;"	e	enum:SSLRefbox::Colors::Color
MKDIR	Makefile	/^MKDIR         = mkdir -p$/;"	m
MOVE	Makefile	/^MOVE          = mv -f$/;"	m
MaxDataGramSize	sslvision.h	/^    static const int MaxDataGramSize = 65536;$/;"	m	class:SSLVision	access:private
NONE	colors.h	/^		NONE$/;"	e	enum:SSLRefbox::Colors::Color
NO_OBSTACLE	field_hardware.h	/^		NO_OBSTACLE,$/;"	e	enum:Field_Hardware::Obstacle
NUMBER_FIELD_BARS	field_hardware.h	/^		NUMBER_FIELD_BARS = 20, NUMBER_FIELD_GOALPOSTS = 8$/;"	e	enum:Field_Hardware::__anon2
NUMBER_FIELD_GOALPOSTS	field_hardware.h	/^		NUMBER_FIELD_BARS = 20, NUMBER_FIELD_GOALPOSTS = 8$/;"	e	enum:Field_Hardware::__anon2
NUMBER_OF_IDS	filter_data.h	/^		NUMBER_OF_IDS = 12,$/;"	e	enum:Filter_Data::__anon1
NUMBER_OF_TEAMS	filter_data.h	/^		NUMBER_OF_TEAMS = 2,$/;"	e	enum:Filter_Data::__anon1
OBJECTS	Makefile	/^OBJECTS       = glextra.o \\$/;"	m
OBJECTS_DIR	Makefile	/^OBJECTS_DIR   = .\/$/;"	m
ORANGE	colors.h	/^		ORANGE,$/;"	e	enum:SSLRefbox::Colors::Color
Obstacle	field_hardware.h	/^	enum Obstacle {$/;"	g	class:Field_Hardware	access:public
PARTICLE_FILTER_H	particle_filter.h	2;"	d
PERCEPT_H	percept.h	2;"	d
PF_TESTER_H	pf_tester.h	2;"	d
PF_Tester	pf_tester.cc	/^PF_Tester::PF_Tester(Pre_Filter_Data* pf_data_, BSmart::Game_States* gamestate_) :$/;"	f	class:PF_Tester	signature:(Pre_Filter_Data* pf_data_, BSmart::Game_States* gamestate_)
PF_Tester	pf_tester.h	/^    PF_Tester(Pre_Filter_Data*, BSmart::Game_States*);$/;"	p	class:PF_Tester	access:public	signature:(Pre_Filter_Data*, BSmart::Game_States*)
PF_Tester	pf_tester.h	/^class PF_Tester : public QThread$/;"	c	inherits:QThread
PF_Tester::PF_Tester	pf_tester.cc	/^PF_Tester::PF_Tester(Pre_Filter_Data* pf_data_, BSmart::Game_States* gamestate_) :$/;"	f	class:PF_Tester	signature:(Pre_Filter_Data* pf_data_, BSmart::Game_States* gamestate_)
PF_Tester::PF_Tester	pf_tester.h	/^    PF_Tester(Pre_Filter_Data*, BSmart::Game_States*);$/;"	p	class:PF_Tester	access:public	signature:(Pre_Filter_Data*, BSmart::Game_States*)
PF_Tester::gamestate	pf_tester.h	/^    BSmart::Game_States* gamestate;$/;"	m	class:PF_Tester	access:private
PF_Tester::getStaticMetaObject	debug/moc_pf_tester.cpp	/^const QMetaObject &PF_Tester::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:PF_Tester	signature:()
PF_Tester::getStaticMetaObject	moc_pf_tester.cpp	/^const QMetaObject &PF_Tester::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:PF_Tester	signature:()
PF_Tester::metaObject	debug/moc_pf_tester.cpp	/^const QMetaObject *PF_Tester::metaObject() const$/;"	f	class:PF_Tester	signature:() const
PF_Tester::metaObject	moc_pf_tester.cpp	/^const QMetaObject *PF_Tester::metaObject() const$/;"	f	class:PF_Tester	signature:() const
PF_Tester::move_ball_bounce	pf_tester.cc	/^void PF_Tester::move_ball_bounce(int ms) {$/;"	f	class:PF_Tester	signature:(int ms)
PF_Tester::move_ball_bounce	pf_tester.h	/^    void move_ball_bounce(int);$/;"	p	class:PF_Tester	access:private	signature:(int)
PF_Tester::move_ball_respawn	pf_tester.cc	/^void PF_Tester::move_ball_respawn(int ms) {$/;"	f	class:PF_Tester	signature:(int ms)
PF_Tester::move_ball_respawn	pf_tester.h	/^    void move_ball_respawn(int);$/;"	p	class:PF_Tester	access:private	signature:(int)
PF_Tester::move_ball_rest	pf_tester.cc	/^void PF_Tester::move_ball_rest() {$/;"	f	class:PF_Tester	signature:()
PF_Tester::move_ball_rest	pf_tester.h	/^    void move_ball_rest();$/;"	p	class:PF_Tester	access:private	signature:()
PF_Tester::ms	pf_tester.h	/^    int ms;$/;"	m	class:PF_Tester	access:private
PF_Tester::new_frame	debug/moc_pf_tester.cpp	/^void PF_Tester::new_frame()$/;"	f	class:PF_Tester	signature:()
PF_Tester::new_frame	moc_pf_tester.cpp	/^void PF_Tester::new_frame()$/;"	f	class:PF_Tester	signature:()
PF_Tester::new_frame	pf_tester.h	/^    void new_frame();$/;"	p	class:PF_Tester	access:public	signature:()
PF_Tester::pf_data	pf_tester.h	/^    Pre_Filter_Data* pf_data;$/;"	m	class:PF_Tester	access:private
PF_Tester::qt_metacall	debug/moc_pf_tester.cpp	/^int PF_Tester::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:PF_Tester	signature:(QMetaObject::Call _c, int _id, void **_a)
PF_Tester::qt_metacall	moc_pf_tester.cpp	/^int PF_Tester::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:PF_Tester	signature:(QMetaObject::Call _c, int _id, void **_a)
PF_Tester::qt_metacast	debug/moc_pf_tester.cpp	/^void *PF_Tester::qt_metacast(const char *_clname)$/;"	f	class:PF_Tester	signature:(const char *_clname)
PF_Tester::qt_metacast	moc_pf_tester.cpp	/^void *PF_Tester::qt_metacast(const char *_clname)$/;"	f	class:PF_Tester	signature:(const char *_clname)
PF_Tester::reset_speed	pf_tester.cc	/^void PF_Tester::reset_speed() {$/;"	f	class:PF_Tester	signature:()
PF_Tester::reset_speed	pf_tester.h	/^    void reset_speed();$/;"	p	class:PF_Tester	access:private	signature:()
PF_Tester::run	pf_tester.cc	/^void PF_Tester::run() {$/;"	f	class:PF_Tester	signature:()
PF_Tester::run	pf_tester.h	/^    void run();$/;"	p	class:PF_Tester	access:public	signature:()
PF_Tester::speed	pf_tester.h	/^    double speed;$/;"	m	class:PF_Tester	access:private
PF_Tester::staticMetaObject	debug/moc_pf_tester.cpp	/^const QMetaObject PF_Tester::staticMetaObject = {$/;"	m	class:PF_Tester	file:
PF_Tester::staticMetaObject	moc_pf_tester.cpp	/^const QMetaObject PF_Tester::staticMetaObject = {$/;"	m	class:PF_Tester	file:
PF_Tester::~PF_Tester	pf_tester.cc	/^PF_Tester::~PF_Tester() {$/;"	f	class:PF_Tester	signature:()
PF_Tester::~PF_Tester	pf_tester.h	/^    ~PF_Tester();$/;"	p	class:PF_Tester	access:public	signature:()
PINK	colors.h	/^		PINK,$/;"	e	enum:SSLRefbox::Colors::Color
PRE_FILTER_DATA_H	pre_filter_data.h	2;"	d
Particle_Filter	particle_filter.cc	/^Particle_Filter::Particle_Filter(Pre_Filter_Data* pf_data_,$/;"	f	class:Particle_Filter	signature:(Pre_Filter_Data* pf_data_, Filter_Data* filter_data_)
Particle_Filter	particle_filter.h	/^    Particle_Filter(Pre_Filter_Data*, Filter_Data*);$/;"	p	class:Particle_Filter	access:public	signature:(Pre_Filter_Data*, Filter_Data*)
Particle_Filter	particle_filter.h	/^class Particle_Filter : public QObject$/;"	c	inherits:QObject
Particle_Filter::Particle_Filter	particle_filter.cc	/^Particle_Filter::Particle_Filter(Pre_Filter_Data* pf_data_,$/;"	f	class:Particle_Filter	signature:(Pre_Filter_Data* pf_data_, Filter_Data* filter_data_)
Particle_Filter::Particle_Filter	particle_filter.h	/^    Particle_Filter(Pre_Filter_Data*, Filter_Data*);$/;"	p	class:Particle_Filter	access:public	signature:(Pre_Filter_Data*, Filter_Data*)
Particle_Filter::all_contacts_log	particle_filter.h	/^    std::vector<Last_Contact> all_contacts_log;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::alpha_fast_ball	particle_filter.h	/^    double alpha_fast_ball;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::alpha_fast_robots	particle_filter.h	/^    double alpha_fast_robots;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::alpha_slow_ball	particle_filter.h	/^    double alpha_slow_ball;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::alpha_slow_robots	particle_filter.h	/^    double alpha_slow_robots;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::ball_direction_after	particle_filter.h	/^    BSmart::Pose ball_direction_after;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::ball_direction_before	particle_filter.h	/^    BSmart::Pose ball_direction_before;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::ball_distance_threshold	particle_filter.h	/^    double ball_distance_threshold;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::ball_last_touched_saved	particle_filter.h	/^    int ball_last_touched_saved; \/\/Sample::Last_Touched$/;"	m	class:Particle_Filter	access:private
Particle_Filter::ball_line	particle_filter.h	/^    BSmart::Line ball_line;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::ball_lying_counter	particle_filter.h	/^    int ball_lying_counter;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::ball_samples_new	particle_filter.h	/^    Ball_Sample_List ball_samples_new;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::ball_samples_old	particle_filter.h	/^    Ball_Sample_List ball_samples_old;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::ball_status_saved	particle_filter.h	/^    int ball_status_saved; \/\/Sample::Status$/;"	m	class:Particle_Filter	access:private
Particle_Filter::change_ball_last_touched_intern	debug/moc_particle_filter.cpp	/^void Particle_Filter::change_ball_last_touched_intern(QString _t1)$/;"	f	class:Particle_Filter	signature:(QString _t1)
Particle_Filter::change_ball_last_touched_intern	moc_particle_filter.cpp	/^void Particle_Filter::change_ball_last_touched_intern(QString _t1)$/;"	f	class:Particle_Filter	signature:(QString _t1)
Particle_Filter::change_ball_last_touched_intern	particle_filter.h	/^    void change_ball_last_touched_intern(QString);$/;"	p	class:Particle_Filter	access:public	signature:(QString)
Particle_Filter::change_ball_status_intern	debug/moc_particle_filter.cpp	/^void Particle_Filter::change_ball_status_intern(QString _t1)$/;"	f	class:Particle_Filter	signature:(QString _t1)
Particle_Filter::change_ball_status_intern	moc_particle_filter.cpp	/^void Particle_Filter::change_ball_status_intern(QString _t1)$/;"	f	class:Particle_Filter	signature:(QString _t1)
Particle_Filter::change_ball_status_intern	particle_filter.h	/^    void change_ball_status_intern(QString);$/;"	p	class:Particle_Filter	access:public	signature:(QString)
Particle_Filter::circle	particle_filter.h	/^    BSmart::Circle circle;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::create_models	particle_filter.cc	/^void Particle_Filter::create_models() {$/;"	f	class:Particle_Filter	signature:()
Particle_Filter::create_models	particle_filter.h	/^    void create_models();$/;"	p	class:Particle_Filter	access:public	signature:()
Particle_Filter::determine_ball_status	particle_filter.cc	/^void Particle_Filter::determine_ball_status(const Ball_Sample& new_ball_model) {$/;"	f	class:Particle_Filter	signature:(const Ball_Sample& new_ball_model)
Particle_Filter::determine_ball_status	particle_filter.h	/^    void determine_ball_status(const Ball_Sample&);$/;"	p	class:Particle_Filter	access:private	signature:(const Ball_Sample&)
Particle_Filter::dist_in_2d	particle_filter.cc	/^double Particle_Filter::dist_in_2d(int camID, BSmart::Pose3D sample,$/;"	f	class:Particle_Filter	signature:(int camID, BSmart::Pose3D sample, BSmart::Pose percept)
Particle_Filter::dist_in_2d	particle_filter.h	/^    double dist_in_2d(int camID, BSmart::Pose3D sample, BSmart::Pose percept);$/;"	p	class:Particle_Filter	access:private	signature:(int camID, BSmart::Pose3D sample, BSmart::Pose percept)
Particle_Filter::filter_data	particle_filter.h	/^    Filter_Data* filter_data;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::flying_robots	particle_filter.h	/^    std::vector<Last_Contact> flying_robots;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::gaussian	particle_filter.cc	/^double Particle_Filter::gaussian(double v, double std_dev) {$/;"	f	class:Particle_Filter	signature:(double v, double std_dev)
Particle_Filter::gaussian	particle_filter.h	/^    double gaussian(double v, double std_dev);$/;"	p	class:Particle_Filter	access:private	signature:(double v, double std_dev)
Particle_Filter::getStaticMetaObject	debug/moc_particle_filter.cpp	/^const QMetaObject &Particle_Filter::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Particle_Filter	signature:()
Particle_Filter::getStaticMetaObject	moc_particle_filter.cpp	/^const QMetaObject &Particle_Filter::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Particle_Filter	signature:()
Particle_Filter::get_random_pos_2d	particle_filter.cc	/^BSmart::Pose Particle_Filter::get_random_pos_2d(int min_x, int max_x,$/;"	f	class:Particle_Filter	signature:(int min_x, int max_x, int min_y, int max_y)
Particle_Filter::get_random_pos_2d	particle_filter.h	/^    BSmart::Pose get_random_pos_2d(int min_x = -(BSmart::Field::half_field_width + BSmart::Field::off_width) , int max_x = BSmart::Field::half_field_width + BSmart::Field::off_width, int min_y = - (BSmart::Field::half_field_height + BSmart::Field::off_width), int max_y = BSmart::Field::half_field_height  + BSmart::Field::off_width);$/;"	p	class:Particle_Filter	access:private	signature:(int min_x = -(BSmart::Field::half_field_width + BSmart::Field::off_width) , int max_x = BSmart::Field::half_field_width + BSmart::Field::off_width, int min_y = - (BSmart::Field::half_field_height + BSmart::Field::off_width), int max_y = BSmart::Field::half_field_height + BSmart::Field::off_width)
Particle_Filter::get_random_pos_3d	particle_filter.cc	/^BSmart::Pose3D Particle_Filter::get_random_pos_3d(int min_x, int max_x,$/;"	f	class:Particle_Filter	signature:(int min_x, int max_x, int min_y, int max_y, int min_z, int max_z)
Particle_Filter::get_random_pos_3d	particle_filter.h	/^    BSmart::Pose3D get_random_pos_3d(int min_x = -(BSmart::Field::half_field_width + BSmart::Field::off_width) , int max_x = BSmart::Field::half_field_width + BSmart::Field::off_width, int min_y = - (BSmart::Field::half_field_height + BSmart::Field::off_width), int max_y = BSmart::Field::half_field_height  + BSmart::Field::off_width, int min_z = 0, int max_z = 10);$/;"	p	class:Particle_Filter	access:private	signature:(int min_x = -(BSmart::Field::half_field_width + BSmart::Field::off_width) , int max_x = BSmart::Field::half_field_width + BSmart::Field::off_width, int min_y = - (BSmart::Field::half_field_height + BSmart::Field::off_width), int max_y = BSmart::Field::half_field_height + BSmart::Field::off_width, int min_z = 0, int max_z = 10)
Particle_Filter::get_random_status	particle_filter.cc	/^Sample::Status Particle_Filter::get_random_status() {$/;"	f	class:Particle_Filter	signature:()
Particle_Filter::get_random_status	particle_filter.h	/^    Sample::Status get_random_status();$/;"	p	class:Particle_Filter	access:private	signature:()
Particle_Filter::intersections	particle_filter.h	/^    std::vector<BSmart::Double_Vector> intersections;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::last_ball_model	particle_filter.h	/^    Ball_Sample last_ball_model;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::last_contacts	particle_filter.h	/^    std::vector<Last_Contact> last_contacts;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::last_movement	particle_filter.h	/^    double last_movement;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::last_touched_dist_tmp	particle_filter.h	/^    double last_touched_dist_tmp;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::last_touched_robot_saved	particle_filter.h	/^    BSmart::Int_Vector last_touched_robot_saved;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::metaObject	debug/moc_particle_filter.cpp	/^const QMetaObject *Particle_Filter::metaObject() const$/;"	f	class:Particle_Filter	signature:() const
Particle_Filter::metaObject	moc_particle_filter.cpp	/^const QMetaObject *Particle_Filter::metaObject() const$/;"	f	class:Particle_Filter	signature:() const
Particle_Filter::motion_update	particle_filter.cc	/^void Particle_Filter::motion_update() {$/;"	f	class:Particle_Filter	signature:()
Particle_Filter::motion_update	particle_filter.h	/^    void motion_update();$/;"	p	class:Particle_Filter	access:public	signature:()
Particle_Filter::newest_frame	particle_filter.h	/^    int newest_frame;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::o_fast_ball	particle_filter.h	/^    double o_fast_ball;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::o_fast_robots	particle_filter.h	/^    double o_fast_robots[Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	class:Particle_Filter	access:private
Particle_Filter::o_slow_ball	particle_filter.h	/^    double o_slow_ball;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::o_slow_robots	particle_filter.h	/^    double o_slow_robots[Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	class:Particle_Filter	access:private
Particle_Filter::pf_data	particle_filter.h	/^    Pre_Filter_Data* pf_data;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::print_ball_percept	particle_filter.h	/^    void print_ball_percept(Ball_Percept);$/;"	p	class:Particle_Filter	access:private	signature:(Ball_Percept)
Particle_Filter::print_robot_percept	particle_filter.h	/^    void print_robot_percept(Robot_Percept);$/;"	p	class:Particle_Filter	access:private	signature:(Robot_Percept)
Particle_Filter::qt_metacall	debug/moc_particle_filter.cpp	/^int Particle_Filter::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Particle_Filter	signature:(QMetaObject::Call _c, int _id, void **_a)
Particle_Filter::qt_metacall	moc_particle_filter.cpp	/^int Particle_Filter::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Particle_Filter	signature:(QMetaObject::Call _c, int _id, void **_a)
Particle_Filter::qt_metacast	debug/moc_particle_filter.cpp	/^void *Particle_Filter::qt_metacast(const char *_clname)$/;"	f	class:Particle_Filter	signature:(const char *_clname)
Particle_Filter::qt_metacast	moc_particle_filter.cpp	/^void *Particle_Filter::qt_metacast(const char *_clname)$/;"	f	class:Particle_Filter	signature:(const char *_clname)
Particle_Filter::random_ball_sample	particle_filter.cc	/^Ball_Sample Particle_Filter::random_ball_sample() {$/;"	f	class:Particle_Filter	signature:()
Particle_Filter::random_ball_sample	particle_filter.h	/^    Ball_Sample random_ball_sample();$/;"	p	class:Particle_Filter	access:private	signature:()
Particle_Filter::random_number	particle_filter.cc	/^int Particle_Filter::random_number(int bottom, int top) {$/;"	f	class:Particle_Filter	signature:(int bottom, int top)
Particle_Filter::random_number	particle_filter.h	/^    int random_number(int bottom, int top);$/;"	p	class:Particle_Filter	access:private	signature:(int bottom, int top)
Particle_Filter::random_robot_sample	particle_filter.cc	/^Robot_Sample Particle_Filter::random_robot_sample() {$/;"	f	class:Particle_Filter	signature:()
Particle_Filter::random_robot_sample	particle_filter.h	/^    Robot_Sample random_robot_sample();$/;"	p	class:Particle_Filter	access:private	signature:()
Particle_Filter::resample	particle_filter.cc	/^void Particle_Filter::resample() {$/;"	f	class:Particle_Filter	signature:()
Particle_Filter::resample	particle_filter.h	/^    void resample();$/;"	p	class:Particle_Filter	access:public	signature:()
Particle_Filter::robot_models	particle_filter.h	/^    Robot_Sample_List robot_models;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::robot_obstacles	particle_filter.h	/^    Robot_Sample_List robot_obstacles;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::robot_samples_new	particle_filter.h	/^    Robot_Sample_List robot_samples_new;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::robot_samples_old	particle_filter.h	/^    Robot_Sample_List robot_samples_old;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::sensor_update	particle_filter.cc	/^void Particle_Filter::sensor_update() {$/;"	f	class:Particle_Filter	signature:()
Particle_Filter::sensor_update	particle_filter.h	/^    void sensor_update(); \/\/ update weighting$/;"	p	class:Particle_Filter	access:public	signature:()
Particle_Filter::staticMetaObject	debug/moc_particle_filter.cpp	/^const QMetaObject Particle_Filter::staticMetaObject = {$/;"	m	class:Particle_Filter	file:
Particle_Filter::staticMetaObject	moc_particle_filter.cpp	/^const QMetaObject Particle_Filter::staticMetaObject = {$/;"	m	class:Particle_Filter	file:
Particle_Filter::std_dev_ball	particle_filter.h	/^    double std_dev_ball;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::std_dev_robot	particle_filter.h	/^    double std_dev_robot;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::timestamp	particle_filter.h	/^    BSmart::Time_Value timestamp;$/;"	m	class:Particle_Filter	access:private
Particle_Filter::weight_ball	particle_filter.cc	/^bool Particle_Filter::weight_ball(Ball_Percept& perc) {$/;"	f	class:Particle_Filter	signature:(Ball_Percept& perc)
Particle_Filter::weight_ball	particle_filter.h	/^    bool weight_ball(Ball_Percept&);$/;"	p	class:Particle_Filter	access:private	signature:(Ball_Percept&)
Particle_Filter::weight_robot	particle_filter.cc	/^bool Particle_Filter::weight_robot(Robot_Percept& perc, int team, int id) {$/;"	f	class:Particle_Filter	signature:(Robot_Percept& perc, int team, int id)
Particle_Filter::weight_robot	particle_filter.h	/^    bool weight_robot(Robot_Percept&, int, int);$/;"	p	class:Particle_Filter	access:private	signature:(Robot_Percept&, int, int)
Particle_Filter::~Particle_Filter	particle_filter.cc	/^Particle_Filter::~Particle_Filter() {$/;"	f	class:Particle_Filter	signature:()
Particle_Filter::~Particle_Filter	particle_filter.h	/^    ~Particle_Filter();$/;"	p	class:Particle_Filter	access:public	signature:()
Particle_Filter_Mother	particle_filter.cc	/^Particle_Filter_Mother::Particle_Filter_Mother(Pre_Filter_Data* pf_data_,$/;"	f	class:Particle_Filter_Mother	signature:(Pre_Filter_Data* pf_data_, Filter_Data* filter_data_, QWaitCondition* rules_wait_condition_, QWaitCondition* new_data_wait_condition_)
Particle_Filter_Mother	particle_filter.h	/^    Particle_Filter_Mother(Pre_Filter_Data*, Filter_Data*, QWaitCondition*, QWaitCondition*);$/;"	p	class:Particle_Filter_Mother	access:public	signature:(Pre_Filter_Data*, Filter_Data*, QWaitCondition*, QWaitCondition*)
Particle_Filter_Mother	particle_filter.h	/^class Particle_Filter_Mother : public QThread$/;"	c	inherits:QThread
Particle_Filter_Mother::Particle_Filter_Mother	particle_filter.cc	/^Particle_Filter_Mother::Particle_Filter_Mother(Pre_Filter_Data* pf_data_,$/;"	f	class:Particle_Filter_Mother	signature:(Pre_Filter_Data* pf_data_, Filter_Data* filter_data_, QWaitCondition* rules_wait_condition_, QWaitCondition* new_data_wait_condition_)
Particle_Filter_Mother::Particle_Filter_Mother	particle_filter.h	/^    Particle_Filter_Mother(Pre_Filter_Data*, Filter_Data*, QWaitCondition*, QWaitCondition*);$/;"	p	class:Particle_Filter_Mother	access:public	signature:(Pre_Filter_Data*, Filter_Data*, QWaitCondition*, QWaitCondition*)
Particle_Filter_Mother::change_ball_last_touched	debug/moc_particle_filter.cpp	/^void Particle_Filter_Mother::change_ball_last_touched(QString _t1)$/;"	f	class:Particle_Filter_Mother	signature:(QString _t1)
Particle_Filter_Mother::change_ball_last_touched	moc_particle_filter.cpp	/^void Particle_Filter_Mother::change_ball_last_touched(QString _t1)$/;"	f	class:Particle_Filter_Mother	signature:(QString _t1)
Particle_Filter_Mother::change_ball_last_touched	particle_filter.h	/^    void change_ball_last_touched(QString);$/;"	p	class:Particle_Filter_Mother	access:public	signature:(QString)
Particle_Filter_Mother::change_ball_status	debug/moc_particle_filter.cpp	/^void Particle_Filter_Mother::change_ball_status(QString _t1)$/;"	f	class:Particle_Filter_Mother	signature:(QString _t1)
Particle_Filter_Mother::change_ball_status	moc_particle_filter.cpp	/^void Particle_Filter_Mother::change_ball_status(QString _t1)$/;"	f	class:Particle_Filter_Mother	signature:(QString _t1)
Particle_Filter_Mother::change_ball_status	particle_filter.h	/^    void change_ball_status(QString);$/;"	p	class:Particle_Filter_Mother	access:public	signature:(QString)
Particle_Filter_Mother::connectActions	particle_filter.cc	/^void Particle_Filter_Mother::connectActions() {$/;"	f	class:Particle_Filter_Mother	signature:()
Particle_Filter_Mother::connectActions	particle_filter.h	/^    void connectActions();$/;"	p	class:Particle_Filter_Mother	access:public	signature:()
Particle_Filter_Mother::filter_data	particle_filter.h	/^    Filter_Data* filter_data;$/;"	m	class:Particle_Filter_Mother	access:private
Particle_Filter_Mother::getStaticMetaObject	debug/moc_particle_filter.cpp	/^const QMetaObject &Particle_Filter_Mother::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Particle_Filter_Mother	signature:()
Particle_Filter_Mother::getStaticMetaObject	moc_particle_filter.cpp	/^const QMetaObject &Particle_Filter_Mother::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Particle_Filter_Mother	signature:()
Particle_Filter_Mother::metaObject	debug/moc_particle_filter.cpp	/^const QMetaObject *Particle_Filter_Mother::metaObject() const$/;"	f	class:Particle_Filter_Mother	signature:() const
Particle_Filter_Mother::metaObject	moc_particle_filter.cpp	/^const QMetaObject *Particle_Filter_Mother::metaObject() const$/;"	f	class:Particle_Filter_Mother	signature:() const
Particle_Filter_Mother::new_data	particle_filter.h	/^    bool new_data;$/;"	m	class:Particle_Filter_Mother	access:private
Particle_Filter_Mother::new_data_wait_condition	particle_filter.h	/^    QWaitCondition* new_data_wait_condition;$/;"	m	class:Particle_Filter_Mother	access:private
Particle_Filter_Mother::new_frame	particle_filter.cc	/^void Particle_Filter_Mother::new_frame() \/\/SLOT$/;"	f	class:Particle_Filter_Mother	signature:()
Particle_Filter_Mother::new_frame	particle_filter.h	/^    void new_frame();$/;"	p	class:Particle_Filter_Mother	access:public	signature:()
Particle_Filter_Mother::pf	particle_filter.h	/^    Particle_Filter* pf;$/;"	m	class:Particle_Filter_Mother	access:private
Particle_Filter_Mother::qt_metacall	debug/moc_particle_filter.cpp	/^int Particle_Filter_Mother::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Particle_Filter_Mother	signature:(QMetaObject::Call _c, int _id, void **_a)
Particle_Filter_Mother::qt_metacall	moc_particle_filter.cpp	/^int Particle_Filter_Mother::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Particle_Filter_Mother	signature:(QMetaObject::Call _c, int _id, void **_a)
Particle_Filter_Mother::qt_metacast	debug/moc_particle_filter.cpp	/^void *Particle_Filter_Mother::qt_metacast(const char *_clname)$/;"	f	class:Particle_Filter_Mother	signature:(const char *_clname)
Particle_Filter_Mother::qt_metacast	moc_particle_filter.cpp	/^void *Particle_Filter_Mother::qt_metacast(const char *_clname)$/;"	f	class:Particle_Filter_Mother	signature:(const char *_clname)
Particle_Filter_Mother::rules_wait_condition	particle_filter.h	/^    QWaitCondition* rules_wait_condition;$/;"	m	class:Particle_Filter_Mother	access:private
Particle_Filter_Mother::run	particle_filter.cc	/^void Particle_Filter_Mother::run() {$/;"	f	class:Particle_Filter_Mother	signature:()
Particle_Filter_Mother::run	particle_filter.h	/^    void run();$/;"	p	class:Particle_Filter_Mother	access:public	signature:()
Particle_Filter_Mother::staticMetaObject	debug/moc_particle_filter.cpp	/^const QMetaObject Particle_Filter_Mother::staticMetaObject = {$/;"	m	class:Particle_Filter_Mother	file:
Particle_Filter_Mother::staticMetaObject	moc_particle_filter.cpp	/^const QMetaObject Particle_Filter_Mother::staticMetaObject = {$/;"	m	class:Particle_Filter_Mother	file:
Particle_Filter_Mother::~Particle_Filter_Mother	particle_filter.cc	/^Particle_Filter_Mother::~Particle_Filter_Mother() {$/;"	f	class:Particle_Filter_Mother	signature:()
Particle_Filter_Mother::~Particle_Filter_Mother	particle_filter.h	/^    ~Particle_Filter_Mother();$/;"	p	class:Particle_Filter_Mother	access:public	signature:()
Percept	percept.h	/^    Percept()$/;"	f	class:Percept	access:public	signature:()
Percept	percept.h	/^    Percept(double x, double y, double rot)$/;"	f	class:Percept	access:public	signature:(double x, double y, double rot)
Percept	percept.h	/^class Percept : public BSmart::Pose$/;"	c	inherits:BSmart::Pose
Percept::Percept	percept.h	/^    Percept()$/;"	f	class:Percept	access:public	signature:()
Percept::Percept	percept.h	/^    Percept(double x, double y, double rot)$/;"	f	class:Percept	access:public	signature:(double x, double y, double rot)
Percept::cam	percept.h	/^    int cam;                  \/\/!< Camera from which the percept was detected$/;"	m	class:Percept	access:public
Percept::confidence	percept.h	/^    unsigned int confidence;  \/\/!< Quality measure of the observation$/;"	m	class:Percept	access:public
Percept::framenumber	percept.h	/^    unsigned int framenumber; \/\/!< Frame in which the percept was detected$/;"	m	class:Percept	access:public
Percept::init	percept.h	/^    void init()$/;"	f	class:Percept	access:public	signature:()
Percept::timestamp	percept.h	/^    BSmart::Time_Value timestamp; \/\/!< Time stamp of the perception$/;"	m	class:Percept	access:public
Pre_Filter_Data	pre_filter_data.cc	/^Pre_Filter_Data::Pre_Filter_Data() {$/;"	f	class:Pre_Filter_Data	signature:()
Pre_Filter_Data	pre_filter_data.h	/^    Pre_Filter_Data();$/;"	p	class:Pre_Filter_Data	access:public	signature:()
Pre_Filter_Data	pre_filter_data.h	/^class Pre_Filter_Data$/;"	c
Pre_Filter_Data::Pre_Filter_Data	pre_filter_data.cc	/^Pre_Filter_Data::Pre_Filter_Data() {$/;"	f	class:Pre_Filter_Data	signature:()
Pre_Filter_Data::Pre_Filter_Data	pre_filter_data.h	/^    Pre_Filter_Data();$/;"	p	class:Pre_Filter_Data	access:public	signature:()
Pre_Filter_Data::ball_direction_after	pre_filter_data.h	/^    BSmart::Pose ball_direction_after;$/;"	m	class:Pre_Filter_Data	access:private
Pre_Filter_Data::ball_direction_before	pre_filter_data.h	/^    BSmart::Pose ball_direction_before;$/;"	m	class:Pre_Filter_Data	access:private
Pre_Filter_Data::cam_dist_threshhold	pre_filter_data.h	/^    int cam_dist_threshhold;$/;"	m	class:Pre_Filter_Data	access:private
Pre_Filter_Data::camera_pos	pre_filter_data.h	/^    Camera_Position camera_pos[2];$/;"	m	class:Pre_Filter_Data	access:private
Pre_Filter_Data::clear_balls	pre_filter_data.cc	/^void Pre_Filter_Data::clear_balls(int camID) {$/;"	f	class:Pre_Filter_Data	signature:(int camID)
Pre_Filter_Data::clear_balls	pre_filter_data.h	/^    void clear_balls(int camID);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID)
Pre_Filter_Data::clear_robots	pre_filter_data.cc	/^void Pre_Filter_Data::clear_robots(int camID) {$/;"	f	class:Pre_Filter_Data	signature:(int camID)
Pre_Filter_Data::clear_robots	pre_filter_data.h	/^    void clear_robots(int camID);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID)
Pre_Filter_Data::current_balls	pre_filter_data.h	/^    Ball_Percept_List current_balls[2];$/;"	m	class:Pre_Filter_Data	access:private
Pre_Filter_Data::get_ball_direction_after	pre_filter_data.cc	/^BSmart::Pose Pre_Filter_Data::get_ball_direction_after() {$/;"	f	class:Pre_Filter_Data	signature:()
Pre_Filter_Data::get_ball_direction_after	pre_filter_data.h	/^    BSmart::Pose get_ball_direction_after();$/;"	p	class:Pre_Filter_Data	access:public	signature:()
Pre_Filter_Data::get_ball_direction_before	pre_filter_data.cc	/^BSmart::Pose Pre_Filter_Data::get_ball_direction_before() {$/;"	f	class:Pre_Filter_Data	signature:()
Pre_Filter_Data::get_ball_direction_before	pre_filter_data.h	/^    BSmart::Pose get_ball_direction_before();$/;"	p	class:Pre_Filter_Data	access:public	signature:()
Pre_Filter_Data::get_camera_position	pre_filter_data.cc	/^BSmart::Pose3D Pre_Filter_Data::get_camera_position(int camID) {$/;"	f	class:Pre_Filter_Data	signature:(int camID)
Pre_Filter_Data::get_camera_position	pre_filter_data.h	/^    BSmart::Pose3D get_camera_position(int camID);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID)
Pre_Filter_Data::get_current_balls	pre_filter_data.cc	/^Ball_Percept_List Pre_Filter_Data::get_current_balls(int camID) {$/;"	f	class:Pre_Filter_Data	signature:(int camID)
Pre_Filter_Data::get_current_balls	pre_filter_data.h	/^    Ball_Percept_List get_current_balls(int camID);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID)
Pre_Filter_Data::get_newest_frame	pre_filter_data.cc	/^int Pre_Filter_Data::get_newest_frame() {$/;"	f	class:Pre_Filter_Data	signature:()
Pre_Filter_Data::get_newest_frame	pre_filter_data.h	/^    int get_newest_frame();$/;"	p	class:Pre_Filter_Data	access:public	signature:()
Pre_Filter_Data::get_robot_direction	pre_filter_data.cc	/^BSmart::Pose Pre_Filter_Data::get_robot_direction(int team, int id) {$/;"	f	class:Pre_Filter_Data	signature:(int team, int id)
Pre_Filter_Data::get_robot_direction	pre_filter_data.h	/^    BSmart::Pose get_robot_direction(int team, int id);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int team, int id)
Pre_Filter_Data::get_robots	pre_filter_data.cc	/^Robot_Percept_List Pre_Filter_Data::get_robots(int camID, int team, int id) {$/;"	f	class:Pre_Filter_Data	signature:(int camID, int team, int id)
Pre_Filter_Data::get_robots	pre_filter_data.h	/^    Robot_Percept_List get_robots(int camID, int team, int id);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID, int team, int id)
Pre_Filter_Data::get_timestamp	pre_filter_data.cc	/^BSmart::Time_Value Pre_Filter_Data::get_timestamp() {$/;"	f	class:Pre_Filter_Data	signature:()
Pre_Filter_Data::get_timestamp	pre_filter_data.h	/^    BSmart::Time_Value get_timestamp();$/;"	p	class:Pre_Filter_Data	access:public	signature:()
Pre_Filter_Data::newest_frame	pre_filter_data.h	/^    int newest_frame;$/;"	m	class:Pre_Filter_Data	access:private
Pre_Filter_Data::pf_data_mutex	pre_filter_data.h	/^    QMutex pf_data_mutex;$/;"	m	class:Pre_Filter_Data	access:private
Pre_Filter_Data::play_state	pre_filter_data.h	/^    BSmart::Game_States::Play_State play_state;$/;"	m	class:Pre_Filter_Data	access:private
Pre_Filter_Data::refbox_cmd	pre_filter_data.h	/^    char refbox_cmd;$/;"	m	class:Pre_Filter_Data	access:private
Pre_Filter_Data::robot_direction	pre_filter_data.h	/^    BSmart::Pose robot_direction[Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	class:Pre_Filter_Data	access:private
Pre_Filter_Data::robots	pre_filter_data.h	/^    Robot_Percept_List robots[2][Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	class:Pre_Filter_Data	access:private
Pre_Filter_Data::set_ball_direction_after	pre_filter_data.cc	/^void Pre_Filter_Data::set_ball_direction_after($/;"	f	class:Pre_Filter_Data	signature:( const BSmart::Pose& ball_direction_after_)
Pre_Filter_Data::set_ball_direction_after	pre_filter_data.h	/^    void set_ball_direction_after(const BSmart::Pose& ball_direction_after_);$/;"	p	class:Pre_Filter_Data	access:public	signature:(const BSmart::Pose& ball_direction_after_)
Pre_Filter_Data::set_ball_direction_before	pre_filter_data.cc	/^void Pre_Filter_Data::set_ball_direction_before($/;"	f	class:Pre_Filter_Data	signature:( const BSmart::Pose& ball_direction_before_)
Pre_Filter_Data::set_ball_direction_before	pre_filter_data.h	/^    void set_ball_direction_before(const BSmart::Pose& ball_direction_before_);$/;"	p	class:Pre_Filter_Data	access:public	signature:(const BSmart::Pose& ball_direction_before_)
Pre_Filter_Data::set_ball_framenumber	pre_filter_data.cc	/^void Pre_Filter_Data::set_ball_framenumber(int camID, unsigned int framenumber) {$/;"	f	class:Pre_Filter_Data	signature:(int camID, unsigned int framenumber)
Pre_Filter_Data::set_ball_framenumber	pre_filter_data.h	/^    void set_ball_framenumber(int camID, unsigned int framenumber);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID, unsigned int framenumber)
Pre_Filter_Data::set_ball_timestamp	pre_filter_data.cc	/^void Pre_Filter_Data::set_ball_timestamp(int camID,$/;"	f	class:Pre_Filter_Data	signature:(int camID, const BSmart::Time_Value& timestamp)
Pre_Filter_Data::set_ball_timestamp	pre_filter_data.h	/^    void set_ball_timestamp(int camID, const BSmart::Time_Value& timestamp);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID, const BSmart::Time_Value& timestamp)
Pre_Filter_Data::set_balls	pre_filter_data.cc	/^void Pre_Filter_Data::set_balls(int camID, const Ball_Percept_List& pBalls) {$/;"	f	class:Pre_Filter_Data	signature:(int camID, const Ball_Percept_List& pBalls)
Pre_Filter_Data::set_balls	pre_filter_data.h	/^    void set_balls(int camID, const Ball_Percept_List& pBalls);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID, const Ball_Percept_List& pBalls)
Pre_Filter_Data::set_camera_pos	pre_filter_data.cc	/^void Pre_Filter_Data::set_camera_pos(int camID, const BSmart::Pose3D& new_pos) {$/;"	f	class:Pre_Filter_Data	signature:(int camID, const BSmart::Pose3D& new_pos)
Pre_Filter_Data::set_camera_pos	pre_filter_data.h	/^    void set_camera_pos(int camID, const BSmart::Pose3D& new_pos);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID, const BSmart::Pose3D& new_pos)
Pre_Filter_Data::set_newest_frame	pre_filter_data.cc	/^void Pre_Filter_Data::set_newest_frame(int frame) {$/;"	f	class:Pre_Filter_Data	signature:(int frame)
Pre_Filter_Data::set_newest_frame	pre_filter_data.h	/^    void set_newest_frame(int);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int)
Pre_Filter_Data::set_robot_direction	pre_filter_data.cc	/^void Pre_Filter_Data::set_robot_direction(int team, int id,$/;"	f	class:Pre_Filter_Data	signature:(int team, int id, const BSmart::Pose& robot_direction_)
Pre_Filter_Data::set_robot_direction	pre_filter_data.h	/^    void set_robot_direction(int team, int id, const BSmart::Pose& robot_direction_);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int team, int id, const BSmart::Pose& robot_direction_)
Pre_Filter_Data::set_robots	pre_filter_data.cc	/^void Pre_Filter_Data::set_robots(int camID, int team, int id,$/;"	f	class:Pre_Filter_Data	signature:(int camID, int team, int id, const Robot_Percept_List& pRobots)
Pre_Filter_Data::set_robots	pre_filter_data.h	/^    void set_robots(int camID, int team, int id, const Robot_Percept_List& pRobots);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID, int team, int id, const Robot_Percept_List& pRobots)
Pre_Filter_Data::set_timestamp	pre_filter_data.cc	/^void Pre_Filter_Data::set_timestamp(BSmart::Time_Value frame_received) {$/;"	f	class:Pre_Filter_Data	signature:(BSmart::Time_Value frame_received)
Pre_Filter_Data::set_timestamp	pre_filter_data.h	/^    void set_timestamp(BSmart::Time_Value);$/;"	p	class:Pre_Filter_Data	access:public	signature:(BSmart::Time_Value)
Pre_Filter_Data::timestamp	pre_filter_data.h	/^    BSmart::Time_Value timestamp;$/;"	m	class:Pre_Filter_Data	access:private
QMAKE	Makefile	/^QMAKE         = \/usr\/bin\/qmake$/;"	m
QMAKE_TARGET	Makefile	/^QMAKE_TARGET  = ssl-refbox$/;"	m
Q_ALL	glextra.h	/^    Q_ALL = Q_I | Q_II | Q_III | Q_IV   \/\/full  circle$/;"	e	enum:GLExtra::Quadrant
Q_E	glextra.h	/^    Q_E   = Q_I | Q_IV,                 \/\/east  hemicircle$/;"	e	enum:GLExtra::Quadrant
Q_I	glextra.h	/^    Q_I   = 0x1,$/;"	e	enum:GLExtra::Quadrant
Q_II	glextra.h	/^    Q_II  = 0x2,$/;"	e	enum:GLExtra::Quadrant
Q_III	glextra.h	/^    Q_III = 0x4,$/;"	e	enum:GLExtra::Quadrant
Q_IV	glextra.h	/^    Q_IV  = 0x8,$/;"	e	enum:GLExtra::Quadrant
Q_N	glextra.h	/^    Q_N   = Q_I | Q_II,                 \/\/north hemicircle$/;"	e	enum:GLExtra::Quadrant
Q_S	glextra.h	/^    Q_S   = Q_III | Q_IV,               \/\/south hemicircle$/;"	e	enum:GLExtra::Quadrant
Q_W	glextra.h	/^    Q_W   = Q_II | Q_III,               \/\/west  hemicircle$/;"	e	enum:GLExtra::Quadrant
Quadrant	glextra.h	/^    enum Quadrant$/;"	g	class:GLExtra	access:public
RANLIB	Makefile	/^RANLIB        = $/;"	m
RED	colors.h	/^		RED,$/;"	e	enum:SSLRefbox::Colors::Color
REFBOXLISTENER	refboxlistener.h	2;"	d
REFEREE	sample.h	/^        REFEREE,$/;"	e	enum:Sample::Last_Touched
ROBOT	sample.h	/^        ROBOT$/;"	e	enum:Sample::Type
ROBOT_BLUE	field_hardware.h	/^		ROBOT_BLUE,$/;"	e	enum:Field_Hardware::Obstacle
ROBOT_SAMPLES	filter_data.h	/^		ROBOT_SAMPLES = 50,$/;"	e	enum:Filter_Data::__anon1
ROBOT_YELLOW	field_hardware.h	/^		ROBOT_YELLOW,$/;"	e	enum:Field_Hardware::Obstacle
ROLLING	sample.h	/^        ROLLING,$/;"	e	enum:Sample::Status
RefboxListener	refboxlistener.cc	/^RefboxListener::RefboxListener(BSmart::Game_States* gamestate_) :$/;"	f	class:RefboxListener	signature:(BSmart::Game_States* gamestate_)
RefboxListener	refboxlistener.h	/^    RefboxListener(BSmart::Game_States*);$/;"	p	class:RefboxListener	access:public	signature:(BSmart::Game_States*)
RefboxListener	refboxlistener.h	/^class RefboxListener : public QThread$/;"	c	inherits:QThread
RefboxListener::GameStatePacket	refboxlistener.h	/^    struct GameStatePacket$/;"	s	class:RefboxListener	access:public
RefboxListener::GameStatePacket::cmd	refboxlistener.h	/^        char           cmd;            \/\/ Current referee command$/;"	m	struct:RefboxListener::GameStatePacket	access:public
RefboxListener::GameStatePacket::cmd_counter	refboxlistener.h	/^        unsigned char  cmd_counter;    \/\/ Increments on each new command$/;"	m	struct:RefboxListener::GameStatePacket	access:public
RefboxListener::GameStatePacket::goals_blue	refboxlistener.h	/^        unsigned char  goals_blue;     \/\/ current score for blue team$/;"	m	struct:RefboxListener::GameStatePacket	access:public
RefboxListener::GameStatePacket::goals_yellow	refboxlistener.h	/^        unsigned char  goals_yellow;   \/\/ current score for yellow team$/;"	m	struct:RefboxListener::GameStatePacket	access:public
RefboxListener::GameStatePacket::time_remaining	refboxlistener.h	/^        unsigned short time_remaining; \/\/ Seconds remaining for game stage$/;"	m	struct:RefboxListener::GameStatePacket	access:public
RefboxListener::RefboxListener	refboxlistener.cc	/^RefboxListener::RefboxListener(BSmart::Game_States* gamestate_) :$/;"	f	class:RefboxListener	signature:(BSmart::Game_States* gamestate_)
RefboxListener::RefboxListener	refboxlistener.h	/^    RefboxListener(BSmart::Game_States*);$/;"	p	class:RefboxListener	access:public	signature:(BSmart::Game_States*)
RefboxListener::buffer	refboxlistener.h	/^    char* buffer;$/;"	m	class:RefboxListener	access:private
RefboxListener::buflen	refboxlistener.h	/^    size_t buflen;$/;"	m	class:RefboxListener	access:private
RefboxListener::execute	refboxlistener.cc	/^void RefboxListener::execute() {$/;"	f	class:RefboxListener	signature:()
RefboxListener::execute	refboxlistener.h	/^    void execute();$/;"	p	class:RefboxListener	access:private	signature:()
RefboxListener::gamestate	refboxlistener.h	/^    BSmart::Game_States* gamestate;$/;"	m	class:RefboxListener	access:private
RefboxListener::getStaticMetaObject	debug/moc_refboxlistener.cpp	/^const QMetaObject &RefboxListener::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:RefboxListener	signature:()
RefboxListener::getStaticMetaObject	moc_refboxlistener.cpp	/^const QMetaObject &RefboxListener::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:RefboxListener	signature:()
RefboxListener::gsp_last	refboxlistener.h	/^    GameStatePacket gsp_last;$/;"	m	class:RefboxListener	access:private
RefboxListener::has_new_data	refboxlistener.h	/^    bool has_new_data;$/;"	m	class:RefboxListener	access:private
RefboxListener::input_serial	refboxlistener.cc	/^void RefboxListener::input_serial(const char cmd) {$/;"	f	class:RefboxListener	signature:(const char cmd)
RefboxListener::input_serial	refboxlistener.h	/^    void input_serial(const char);$/;"	p	class:RefboxListener	access:private	signature:(const char)
RefboxListener::metaObject	debug/moc_refboxlistener.cpp	/^const QMetaObject *RefboxListener::metaObject() const$/;"	f	class:RefboxListener	signature:() const
RefboxListener::metaObject	moc_refboxlistener.cpp	/^const QMetaObject *RefboxListener::metaObject() const$/;"	f	class:RefboxListener	signature:() const
RefboxListener::new_refbox_cmd	refboxlistener.cc	/^void RefboxListener::new_refbox_cmd(char comd) {$/;"	f	class:RefboxListener	signature:(char comd)
RefboxListener::new_refbox_cmd	refboxlistener.h	/^    void new_refbox_cmd(char);$/;"	p	class:RefboxListener	access:public	signature:(char)
RefboxListener::qt_metacall	debug/moc_refboxlistener.cpp	/^int RefboxListener::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:RefboxListener	signature:(QMetaObject::Call _c, int _id, void **_a)
RefboxListener::qt_metacall	moc_refboxlistener.cpp	/^int RefboxListener::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:RefboxListener	signature:(QMetaObject::Call _c, int _id, void **_a)
RefboxListener::qt_metacast	debug/moc_refboxlistener.cpp	/^void *RefboxListener::qt_metacast(const char *_clname)$/;"	f	class:RefboxListener	signature:(const char *_clname)
RefboxListener::qt_metacast	moc_refboxlistener.cpp	/^void *RefboxListener::qt_metacast(const char *_clname)$/;"	f	class:RefboxListener	signature:(const char *_clname)
RefboxListener::run	refboxlistener.cc	/^void RefboxListener::run() {$/;"	f	class:RefboxListener	signature:()
RefboxListener::run	refboxlistener.h	/^    void run();$/;"	p	class:RefboxListener	access:public	signature:()
RefboxListener::socket	refboxlistener.h	/^    BSmart::Multicast_Socket* socket;$/;"	m	class:RefboxListener	access:private
RefboxListener::staticMetaObject	debug/moc_refboxlistener.cpp	/^const QMetaObject RefboxListener::staticMetaObject = {$/;"	m	class:RefboxListener	file:
RefboxListener::staticMetaObject	moc_refboxlistener.cpp	/^const QMetaObject RefboxListener::staticMetaObject = {$/;"	m	class:RefboxListener	file:
RefboxListener::update_game_state	refboxlistener.cc	/^void RefboxListener::update_game_state(const int referee_signal) {$/;"	f	class:RefboxListener	signature:(const int referee_signal)
RefboxListener::update_game_state	refboxlistener.h	/^    void update_game_state(const int);$/;"	p	class:RefboxListener	access:private	signature:(const int)
RefboxListener::~RefboxListener	refboxlistener.cc	/^RefboxListener::~RefboxListener() {$/;"	f	class:RefboxListener	signature:()
RefboxListener::~RefboxListener	refboxlistener.h	/^    ~RefboxListener();$/;"	p	class:RefboxListener	access:public	signature:()
Robot_Percept	percept.h	/^    Robot_Percept() : Percept(), id(-1), rotation_known(false),$/;"	f	class:Robot_Percept	access:public	signature:()
Robot_Percept	percept.h	/^    Robot_Percept(double x, double y, double rot)$/;"	f	class:Robot_Percept	access:public	signature:(double x, double y, double rot)
Robot_Percept	percept.h	/^class Robot_Percept : public Percept$/;"	c	inherits:Percept
Robot_Percept::Robot_Percept	percept.h	/^    Robot_Percept() : Percept(), id(-1), rotation_known(false),$/;"	f	class:Robot_Percept	access:public	signature:()
Robot_Percept::Robot_Percept	percept.h	/^    Robot_Percept(double x, double y, double rot)$/;"	f	class:Robot_Percept	access:public	signature:(double x, double y, double rot)
Robot_Percept::color	percept.h	/^    SSLRefbox::Colors::Color color;$/;"	m	class:Robot_Percept	access:public
Robot_Percept::id	percept.h	/^    int id;$/;"	m	class:Robot_Percept	access:public
Robot_Percept::rotation_known	percept.h	/^    bool rotation_known;$/;"	m	class:Robot_Percept	access:public
Robot_Percept_List	percept.h	/^typedef std::vector<Robot_Percept> Robot_Percept_List;$/;"	t
Robot_Sample	sample.cc	/^Robot_Sample::Robot_Sample() :$/;"	f	class:Robot_Sample	signature:()
Robot_Sample	sample.cc	/^Robot_Sample::Robot_Sample(BSmart::Pose pos_, BSmart::Pose speed_) :$/;"	f	class:Robot_Sample	signature:(BSmart::Pose pos_, BSmart::Pose speed_)
Robot_Sample	sample.cc	/^Robot_Sample::Robot_Sample(const Robot_Sample& other) :$/;"	f	class:Robot_Sample	signature:(const Robot_Sample& other)
Robot_Sample	sample.h	/^    Robot_Sample();$/;"	p	class:Robot_Sample	access:public	signature:()
Robot_Sample	sample.h	/^    Robot_Sample(BSmart::Pose, BSmart::Pose);$/;"	p	class:Robot_Sample	access:public	signature:(BSmart::Pose, BSmart::Pose)
Robot_Sample	sample.h	/^    Robot_Sample(const Robot_Sample&);$/;"	p	class:Robot_Sample	access:public	signature:(const Robot_Sample&)
Robot_Sample	sample.h	/^class Robot_Sample : public Sample$/;"	c	inherits:Sample
Robot_Sample::Robot_Sample	sample.cc	/^Robot_Sample::Robot_Sample() :$/;"	f	class:Robot_Sample	signature:()
Robot_Sample::Robot_Sample	sample.cc	/^Robot_Sample::Robot_Sample(BSmart::Pose pos_, BSmart::Pose speed_) :$/;"	f	class:Robot_Sample	signature:(BSmart::Pose pos_, BSmart::Pose speed_)
Robot_Sample::Robot_Sample	sample.cc	/^Robot_Sample::Robot_Sample(const Robot_Sample& other) :$/;"	f	class:Robot_Sample	signature:(const Robot_Sample& other)
Robot_Sample::Robot_Sample	sample.h	/^    Robot_Sample();$/;"	p	class:Robot_Sample	access:public	signature:()
Robot_Sample::Robot_Sample	sample.h	/^    Robot_Sample(BSmart::Pose, BSmart::Pose);$/;"	p	class:Robot_Sample	access:public	signature:(BSmart::Pose, BSmart::Pose)
Robot_Sample::Robot_Sample	sample.h	/^    Robot_Sample(const Robot_Sample&);$/;"	p	class:Robot_Sample	access:public	signature:(const Robot_Sample&)
Robot_Sample::check_bar_reflections	sample.cc	/^bool Robot_Sample::check_bar_reflections(Hitpoint* hitpoint) {$/;"	f	class:Robot_Sample	signature:(Hitpoint* hitpoint)
Robot_Sample::check_bar_reflections	sample.h	/^    bool check_bar_reflections(Hitpoint*);$/;"	p	class:Robot_Sample	access:private	signature:(Hitpoint*)
Robot_Sample::check_collisions	sample.cc	/^void Robot_Sample::check_collisions(const Robot_Sample_List& robot_obstacles) {$/;"	f	class:Robot_Sample	signature:(const Robot_Sample_List& robot_obstacles)
Robot_Sample::check_collisions	sample.h	/^    void check_collisions(const Robot_Sample_List&);$/;"	p	class:Robot_Sample	access:private	signature:(const Robot_Sample_List&)
Robot_Sample::check_goalpost_reflections	sample.cc	/^bool Robot_Sample::check_goalpost_reflections(Hitpoint* hitpoint) {$/;"	f	class:Robot_Sample	signature:(Hitpoint* hitpoint)
Robot_Sample::check_goalpost_reflections	sample.h	/^    bool check_goalpost_reflections(Hitpoint*);$/;"	p	class:Robot_Sample	access:private	signature:(Hitpoint*)
Robot_Sample::check_robot_reflections	sample.cc	/^bool Robot_Sample::check_robot_reflections(Hitpoint* hitpoint,$/;"	f	class:Robot_Sample	signature:(Hitpoint* hitpoint, const Robot_Sample_List& robot_obstacles)
Robot_Sample::check_robot_reflections	sample.h	/^    bool check_robot_reflections(Hitpoint*, const Robot_Sample_List&);$/;"	p	class:Robot_Sample	access:private	signature:(Hitpoint*, const Robot_Sample_List&)
Robot_Sample::circle	sample.h	/^    BSmart::Circle circle;$/;"	m	class:Robot_Sample	access:private
Robot_Sample::confidence	sample.h	/^    double confidence;$/;"	m	class:Robot_Sample	access:public
Robot_Sample::id	sample.h	/^    int id;$/;"	m	class:Robot_Sample	access:public
Robot_Sample::intersection	sample.h	/^    BSmart::Double_Vector intersection;$/;"	m	class:Robot_Sample	access:private
Robot_Sample::intersections	sample.h	/^    std::vector<BSmart::Double_Vector> intersections;$/;"	m	class:Robot_Sample	access:private
Robot_Sample::last_pos	sample.h	/^    BSmart::Pose last_pos;$/;"	m	class:Robot_Sample	access:private
Robot_Sample::move	sample.cc	/^void Robot_Sample::move(const double ms,$/;"	f	class:Robot_Sample	signature:(const double ms, const Robot_Sample_List& robot_obstacles)
Robot_Sample::move	sample.h	/^    void move(const double, const Robot_Sample_List&);$/;"	p	class:Robot_Sample	access:public	signature:(const double, const Robot_Sample_List&)
Robot_Sample::polarbaer	sample.h	/^    BSmart::Double_Vector polarbaer;$/;"	m	class:Robot_Sample	access:private
Robot_Sample::pos	sample.h	/^    BSmart::Pose pos;$/;"	m	class:Robot_Sample	access:public
Robot_Sample::robot_line	sample.h	/^    BSmart::Line robot_line;$/;"	m	class:Robot_Sample	access:private
Robot_Sample::robot_noise	sample.cc	/^const double Robot_Sample::robot_noise = 5.; \/\/ mm$/;"	m	class:Robot_Sample	file:
Robot_Sample::robot_noise	sample.h	/^    static const double robot_noise;$/;"	m	class:Robot_Sample	access:private
Robot_Sample::robot_speed_noise	sample.cc	/^const double Robot_Sample::robot_speed_noise = 0.1; \/\/ m\/s$/;"	m	class:Robot_Sample	file:
Robot_Sample::robot_speed_noise	sample.h	/^    static const double robot_speed_noise;$/;"	m	class:Robot_Sample	access:private
Robot_Sample::speed	sample.h	/^    BSmart::Pose speed;$/;"	m	class:Robot_Sample	access:public
Robot_Sample::team	sample.h	/^    int team;$/;"	m	class:Robot_Sample	access:public
Robot_Sample::~Robot_Sample	sample.cc	/^Robot_Sample::~Robot_Sample() {$/;"	f	class:Robot_Sample	signature:()
Robot_Sample::~Robot_Sample	sample.h	/^    ~Robot_Sample();$/;"	p	class:Robot_Sample	access:public	signature:()
Robot_Sample_List	sample.h	/^typedef std::vector<Robot_Sample> Robot_Sample_List;$/;"	t
SAMPLE_H	sample.h	2;"	d
SED	Makefile	/^SED           = sed$/;"	m
SOURCES	Makefile	/^SOURCES       = glextra.cc \\$/;"	m
SSLRefbox	colors.h	/^namespace SSLRefbox {$/;"	n
SSLRefbox::Colors	colors.h	/^class Colors {$/;"	c	namespace:SSLRefbox
SSLRefbox::Colors::BLACK	colors.h	/^		BLACK,$/;"	e	enum:SSLRefbox::Colors::Color
SSLRefbox::Colors::BLUE	colors.h	/^		BLUE,$/;"	e	enum:SSLRefbox::Colors::Color
SSLRefbox::Colors::Color	colors.h	/^	enum Color {$/;"	g	class:SSLRefbox::Colors	access:public
SSLRefbox::Colors::Colors	colors.h	/^	Colors() {$/;"	f	class:SSLRefbox::Colors	access:public	signature:()
SSLRefbox::Colors::FIELD	colors.h	/^		FIELD,$/;"	e	enum:SSLRefbox::Colors::Color
SSLRefbox::Colors::GREEN	colors.h	/^		GREEN,$/;"	e	enum:SSLRefbox::Colors::Color
SSLRefbox::Colors::GREY	colors.h	/^		GREY,$/;"	e	enum:SSLRefbox::Colors::Color
SSLRefbox::Colors::MAGENTA	colors.h	/^		MAGENTA,$/;"	e	enum:SSLRefbox::Colors::Color
SSLRefbox::Colors::NONE	colors.h	/^		NONE$/;"	e	enum:SSLRefbox::Colors::Color
SSLRefbox::Colors::ORANGE	colors.h	/^		ORANGE,$/;"	e	enum:SSLRefbox::Colors::Color
SSLRefbox::Colors::PINK	colors.h	/^		PINK,$/;"	e	enum:SSLRefbox::Colors::Color
SSLRefbox::Colors::RED	colors.h	/^		RED,$/;"	e	enum:SSLRefbox::Colors::Color
SSLRefbox::Colors::WHITE	colors.h	/^		WHITE,$/;"	e	enum:SSLRefbox::Colors::Color
SSLRefbox::Colors::WHITE_TRANSPARENT	colors.h	/^		WHITE_TRANSPARENT,$/;"	e	enum:SSLRefbox::Colors::Color
SSLRefbox::Colors::YELLOW	colors.h	/^		YELLOW,$/;"	e	enum:SSLRefbox::Colors::Color
SSLRefbox::Colors::color	colors.h	/^	} color;$/;"	m	class:SSLRefbox::Colors	typeref:enum:SSLRefbox::Colors::Color	access:public
SSLRefbox::Colors::~Colors	colors.h	/^	virtual ~Colors() {$/;"	f	class:SSLRefbox::Colors	access:public	signature:()
SSLVISION	sslvision.h	2;"	d
SSLVision	sslvision.cc	/^SSLVision::SSLVision(Pre_Filter_Data* data_, BSmart::Game_States* gamestate_,$/;"	f	class:SSLVision	signature:(Pre_Filter_Data* data_, BSmart::Game_States* gamestate_, QWaitCondition* new_data_wait_condition_)
SSLVision	sslvision.h	/^    SSLVision(Pre_Filter_Data*, BSmart::Game_States*, QWaitCondition*);$/;"	p	class:SSLVision	access:public	signature:(Pre_Filter_Data*, BSmart::Game_States*, QWaitCondition*)
SSLVision	sslvision.h	/^class SSLVision : public QThread$/;"	c	inherits:QThread
SSLVision::MaxDataGramSize	sslvision.h	/^    static const int MaxDataGramSize = 65536;$/;"	m	class:SSLVision	access:private
SSLVision::SSLVision	sslvision.cc	/^SSLVision::SSLVision(Pre_Filter_Data* data_, BSmart::Game_States* gamestate_,$/;"	f	class:SSLVision	signature:(Pre_Filter_Data* data_, BSmart::Game_States* gamestate_, QWaitCondition* new_data_wait_condition_)
SSLVision::SSLVision	sslvision.h	/^    SSLVision(Pre_Filter_Data*, BSmart::Game_States*, QWaitCondition*);$/;"	p	class:SSLVision	access:public	signature:(Pre_Filter_Data*, BSmart::Game_States*, QWaitCondition*)
SSLVision::analyse_percepts	sslvision.cc	/^void SSLVision::analyse_percepts() {$/;"	f	class:SSLVision	signature:()
SSLVision::analyse_percepts	sslvision.h	/^    void analyse_percepts();$/;"	p	class:SSLVision	access:private	signature:()
SSLVision::buffer	sslvision.h	/^    char* buffer;$/;"	m	class:SSLVision	access:private
SSLVision::cam_height	sslvision.h	/^    int cam_height;$/;"	m	class:SSLVision	access:private
SSLVision::cam_width	sslvision.h	/^    int cam_width;$/;"	m	class:SSLVision	access:private
SSLVision::change_play_button	debug/moc_sslvision.cpp	/^void SSLVision::change_play_button(QString _t1)$/;"	f	class:SSLVision	signature:(QString _t1)
SSLVision::change_play_button	moc_sslvision.cpp	/^void SSLVision::change_play_button(QString _t1)$/;"	f	class:SSLVision	signature:(QString _t1)
SSLVision::change_play_button	sslvision.h	/^    void change_play_button(QString);$/;"	p	class:SSLVision	access:public	signature:(QString)
SSLVision::change_record_button	debug/moc_sslvision.cpp	/^void SSLVision::change_record_button(QString _t1)$/;"	f	class:SSLVision	signature:(QString _t1)
SSLVision::change_record_button	moc_sslvision.cpp	/^void SSLVision::change_record_button(QString _t1)$/;"	f	class:SSLVision	signature:(QString _t1)
SSLVision::change_record_button	sslvision.h	/^    void change_record_button(QString);$/;"	p	class:SSLVision	access:public	signature:(QString)
SSLVision::data	sslvision.h	/^    Pre_Filter_Data* data;$/;"	m	class:SSLVision	access:private
SSLVision::end_play_record	sslvision.cc	/^void SSLVision::end_play_record() {$/;"	f	class:SSLVision	signature:()
SSLVision::end_play_record	sslvision.h	/^    void end_play_record();$/;"	p	class:SSLVision	access:private	signature:()
SSLVision::end_record	sslvision.cc	/^int SSLVision::end_record() {$/;"	f	class:SSLVision	signature:()
SSLVision::end_record	sslvision.h	/^    int end_record();$/;"	p	class:SSLVision	access:private	signature:()
SSLVision::execute	sslvision.cc	/^int SSLVision::execute(Transformed_Percept& trans_perc) {$/;"	f	class:SSLVision	signature:(Transformed_Percept& trans_perc)
SSLVision::execute	sslvision.h	/^    int execute(Transformed_Percept&);$/;"	p	class:SSLVision	access:private	signature:(Transformed_Percept&)
SSLVision::fileName	sslvision.h	/^    QString fileName;$/;"	m	class:SSLVision	access:private
SSLVision::frame	sslvision.h	/^    SSL_DetectionFrame frame;$/;"	m	class:SSLVision	access:private
SSLVision::gamestate	sslvision.h	/^    BSmart::Game_States* gamestate;$/;"	m	class:SSLVision	access:private
SSLVision::getStaticMetaObject	debug/moc_sslvision.cpp	/^const QMetaObject &SSLVision::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:SSLVision	signature:()
SSLVision::getStaticMetaObject	moc_sslvision.cpp	/^const QMetaObject &SSLVision::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:SSLVision	signature:()
SSLVision::initializeSlider	debug/moc_sslvision.cpp	/^void SSLVision::initializeSlider(int _t1, int _t2, int _t3, int _t4, int _t5)$/;"	f	class:SSLVision	signature:(int _t1, int _t2, int _t3, int _t4, int _t5)
SSLVision::initializeSlider	moc_sslvision.cpp	/^void SSLVision::initializeSlider(int _t1, int _t2, int _t3, int _t4, int _t5)$/;"	f	class:SSLVision	signature:(int _t1, int _t2, int _t3, int _t4, int _t5)
SSLVision::initializeSlider	sslvision.h	/^    void initializeSlider(int,int,int,int,int);$/;"	p	class:SSLVision	access:public	signature:(int,int,int,int,int)
SSLVision::log_control	sslvision.h	/^    Log_Control* log_control;$/;"	m	class:SSLVision	access:public
SSLVision::log_size	debug/moc_sslvision.cpp	/^void SSLVision::log_size(int _t1)$/;"	f	class:SSLVision	signature:(int _t1)
SSLVision::log_size	moc_sslvision.cpp	/^void SSLVision::log_size(int _t1)$/;"	f	class:SSLVision	signature:(int _t1)
SSLVision::log_size	sslvision.h	/^    void log_size(int);$/;"	p	class:SSLVision	access:public	signature:(int)
SSLVision::logs	sslvision.h	/^    Refbox_Log logs;$/;"	m	class:SSLVision	access:private
SSLVision::metaObject	debug/moc_sslvision.cpp	/^const QMetaObject *SSLVision::metaObject() const$/;"	f	class:SSLVision	signature:() const
SSLVision::metaObject	moc_sslvision.cpp	/^const QMetaObject *SSLVision::metaObject() const$/;"	f	class:SSLVision	signature:() const
SSLVision::new_data_wait_condition	sslvision.h	/^    QWaitCondition* new_data_wait_condition;$/;"	m	class:SSLVision	access:private
SSLVision::new_frame	debug/moc_sslvision.cpp	/^void SSLVision::new_frame()$/;"	f	class:SSLVision	signature:()
SSLVision::new_frame	moc_sslvision.cpp	/^void SSLVision::new_frame()$/;"	f	class:SSLVision	signature:()
SSLVision::new_frame	sslvision.h	/^    void new_frame();$/;"	p	class:SSLVision	access:public	signature:()
SSLVision::new_refbox_cmd	debug/moc_sslvision.cpp	/^void SSLVision::new_refbox_cmd(char _t1)$/;"	f	class:SSLVision	signature:(char _t1)
SSLVision::new_refbox_cmd	moc_sslvision.cpp	/^void SSLVision::new_refbox_cmd(char _t1)$/;"	f	class:SSLVision	signature:(char _t1)
SSLVision::new_refbox_cmd	sslvision.h	/^    void new_refbox_cmd(char);$/;"	p	class:SSLVision	access:public	signature:(char)
SSLVision::npc	sslvision.h	/^    int npc;$/;"	m	class:SSLVision	access:private
SSLVision::play	sslvision.h	/^    bool play;$/;"	m	class:SSLVision	access:private
SSLVision::play_record	sslvision.cc	/^void SSLVision::play_record() {$/;"	f	class:SSLVision	signature:()
SSLVision::play_record	sslvision.h	/^    void play_record();$/;"	p	class:SSLVision	access:public	signature:()
SSLVision::process_balls	sslvision.cc	/^void SSLVision::process_balls(Transformed_Percept& trans_perc) {$/;"	f	class:SSLVision	signature:(Transformed_Percept& trans_perc)
SSLVision::process_balls	sslvision.h	/^    void process_balls(Transformed_Percept&);$/;"	p	class:SSLVision	access:private	signature:(Transformed_Percept&)
SSLVision::process_blue	sslvision.cc	/^void SSLVision::process_blue(Transformed_Percept& trans_perc) {$/;"	f	class:SSLVision	signature:(Transformed_Percept& trans_perc)
SSLVision::process_blue	sslvision.h	/^    void process_blue(Transformed_Percept&);$/;"	p	class:SSLVision	access:private	signature:(Transformed_Percept&)
SSLVision::process_yellow	sslvision.cc	/^void SSLVision::process_yellow(Transformed_Percept& trans_perc) {$/;"	f	class:SSLVision	signature:(Transformed_Percept& trans_perc)
SSLVision::process_yellow	sslvision.h	/^    void process_yellow(Transformed_Percept&);$/;"	p	class:SSLVision	access:private	signature:(Transformed_Percept&)
SSLVision::qt_metacall	debug/moc_sslvision.cpp	/^int SSLVision::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:SSLVision	signature:(QMetaObject::Call _c, int _id, void **_a)
SSLVision::qt_metacall	moc_sslvision.cpp	/^int SSLVision::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:SSLVision	signature:(QMetaObject::Call _c, int _id, void **_a)
SSLVision::qt_metacast	debug/moc_sslvision.cpp	/^void *SSLVision::qt_metacast(const char *_clname)$/;"	f	class:SSLVision	signature:(const char *_clname)
SSLVision::qt_metacast	moc_sslvision.cpp	/^void *SSLVision::qt_metacast(const char *_clname)$/;"	f	class:SSLVision	signature:(const char *_clname)
SSLVision::queue_filled	sslvision.h	/^    bool queue_filled;$/;"	m	class:SSLVision	access:private
SSLVision::rec	sslvision.h	/^    bool rec;$/;"	m	class:SSLVision	access:private
SSLVision::record	sslvision.cc	/^void SSLVision::record() {$/;"	f	class:SSLVision	signature:()
SSLVision::record	sslvision.h	/^    void record();$/;"	p	class:SSLVision	access:public	signature:()
SSLVision::recv	sslvision.cc	/^int SSLVision::recv(SSL_DetectionFrame& frame) {$/;"	f	class:SSLVision	signature:(SSL_DetectionFrame& frame)
SSLVision::recv	sslvision.h	/^    int  recv(SSL_DetectionFrame&);$/;"	p	class:SSLVision	access:private	signature:(SSL_DetectionFrame&)
SSLVision::reset_data	sslvision.cc	/^void SSLVision::reset_data(int cam) {$/;"	f	class:SSLVision	signature:(int cam)
SSLVision::reset_data	sslvision.h	/^    void reset_data(int);$/;"	p	class:SSLVision	access:private	signature:(int)
SSLVision::reset_transformed_percept	sslvision.cc	/^void SSLVision::reset_transformed_percept(Transformed_Percept& trans_perc) {$/;"	f	class:SSLVision	signature:(Transformed_Percept& trans_perc)
SSLVision::reset_transformed_percept	sslvision.h	/^    void reset_transformed_percept(Transformed_Percept&);$/;"	p	class:SSLVision	access:private	signature:(Transformed_Percept&)
SSLVision::robot_r	sslvision.h	/^    int robot_r;$/;"	m	class:SSLVision	access:private
SSLVision::run	sslvision.cc	/^void SSLVision::run() {$/;"	f	class:SSLVision	signature:()
SSLVision::run	sslvision.h	/^    void run();$/;"	p	class:SSLVision	access:public	signature:()
SSLVision::showLogControl	debug/moc_sslvision.cpp	/^void SSLVision::showLogControl(bool _t1)$/;"	f	class:SSLVision	signature:(bool _t1)
SSLVision::showLogControl	moc_sslvision.cpp	/^void SSLVision::showLogControl(bool _t1)$/;"	f	class:SSLVision	signature:(bool _t1)
SSLVision::showLogControl	sslvision.h	/^    void showLogControl(bool);$/;"	p	class:SSLVision	access:public	signature:(bool)
SSLVision::socket	sslvision.h	/^    BSmart::Multicast_Socket* socket;$/;"	m	class:SSLVision	access:private
SSLVision::standard_sleep_time	sslvision.h	/^    int standard_sleep_time;$/;"	m	class:SSLVision	access:private
SSLVision::start_play_record	sslvision.cc	/^int SSLVision::start_play_record() {$/;"	f	class:SSLVision	signature:()
SSLVision::start_play_record	sslvision.h	/^    int start_play_record();$/;"	p	class:SSLVision	access:private	signature:()
SSLVision::start_record	sslvision.cc	/^void SSLVision::start_record() {$/;"	f	class:SSLVision	signature:()
SSLVision::start_record	sslvision.h	/^    void start_record();$/;"	p	class:SSLVision	access:private	signature:()
SSLVision::staticMetaObject	debug/moc_sslvision.cpp	/^const QMetaObject SSLVision::staticMetaObject = {$/;"	m	class:SSLVision	file:
SSLVision::staticMetaObject	moc_sslvision.cpp	/^const QMetaObject SSLVision::staticMetaObject = {$/;"	m	class:SSLVision	file:
SSLVision::tf_percept_queue_all	sslvision.h	/^    std::vector<Transformed_Percept> tf_percept_queue_all;$/;"	m	class:SSLVision	access:private
SSLVision::tf_percept_queue_one_ball	sslvision.h	/^    std::vector<Transformed_Percept> tf_percept_queue_one_ball[2];$/;"	m	class:SSLVision	access:private
SSLVision::tf_percept_queue_one_robot	sslvision.h	/^    std::vector<Transformed_Percept> tf_percept_queue_one_robot[2][Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	class:SSLVision	access:private
SSLVision::transformed_percept	sslvision.h	/^    Transformed_Percept transformed_percept;$/;"	m	class:SSLVision	access:private
SSLVision::update_frame	debug/moc_sslvision.cpp	/^void SSLVision::update_frame(int _t1)$/;"	f	class:SSLVision	signature:(int _t1)
SSLVision::update_frame	moc_sslvision.cpp	/^void SSLVision::update_frame(int _t1)$/;"	f	class:SSLVision	signature:(int _t1)
SSLVision::update_frame	sslvision.h	/^    void update_frame(int);$/;"	p	class:SSLVision	access:public	signature:(int)
SSLVision::~SSLVision	sslvision.cc	/^SSLVision::~SSLVision() {$/;"	f	class:SSLVision	signature:()
SSLVision::~SSLVision	sslvision.h	/^    ~SSLVision();$/;"	p	class:SSLVision	access:public	signature:()
SSL_REFBOX_RULES_H	ssl_refbox_rules.h	2;"	d
SSL_Refbox_Rules	ssl_refbox_rules.cc	/^SSL_Refbox_Rules::SSL_Refbox_Rules(QWaitCondition* rules_wait_condition_,$/;"	f	class:SSL_Refbox_Rules	signature:(QWaitCondition* rules_wait_condition_, Filter_Data* filter_data_, BSmart::Game_States* gamestate_)
SSL_Refbox_Rules	ssl_refbox_rules.h	/^    SSL_Refbox_Rules(QWaitCondition*, Filter_Data*, BSmart::Game_States*);$/;"	p	class:SSL_Refbox_Rules	access:public	signature:(QWaitCondition*, Filter_Data*, BSmart::Game_States*)
SSL_Refbox_Rules	ssl_refbox_rules.h	/^class SSL_Refbox_Rules : public QThread$/;"	c	inherits:QThread
SSL_Refbox_Rules::SSL_Refbox_Rules	ssl_refbox_rules.cc	/^SSL_Refbox_Rules::SSL_Refbox_Rules(QWaitCondition* rules_wait_condition_,$/;"	f	class:SSL_Refbox_Rules	signature:(QWaitCondition* rules_wait_condition_, Filter_Data* filter_data_, BSmart::Game_States* gamestate_)
SSL_Refbox_Rules::SSL_Refbox_Rules	ssl_refbox_rules.h	/^    SSL_Refbox_Rules(QWaitCondition*, Filter_Data*, BSmart::Game_States*);$/;"	p	class:SSL_Refbox_Rules	access:public	signature:(QWaitCondition*, Filter_Data*, BSmart::Game_States*)
SSL_Refbox_Rules::argv_tmp	ssl_refbox_rules.h	/^    char* argv_tmp[];$/;"	m	class:SSL_Refbox_Rules	access:private
SSL_Refbox_Rules::cur_frm	ssl_refbox_rules.h	/^    int cur_frm;$/;"	m	class:SSL_Refbox_Rules	access:private
SSL_Refbox_Rules::cur_timestamp	ssl_refbox_rules.h	/^    int cur_timestamp;$/;"	m	class:SSL_Refbox_Rules	access:private
SSL_Refbox_Rules::filter_data	ssl_refbox_rules.h	/^    Filter_Data* filter_data;$/;"	m	class:SSL_Refbox_Rules	access:private
SSL_Refbox_Rules::gamestate	ssl_refbox_rules.h	/^    BSmart::Game_States* gamestate;$/;"	m	class:SSL_Refbox_Rules	access:private
SSL_Refbox_Rules::getStaticMetaObject	debug/moc_ssl_refbox_rules.cpp	/^const QMetaObject &SSL_Refbox_Rules::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:SSL_Refbox_Rules	signature:()
SSL_Refbox_Rules::getStaticMetaObject	moc_ssl_refbox_rules.cpp	/^const QMetaObject &SSL_Refbox_Rules::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:SSL_Refbox_Rules	signature:()
SSL_Refbox_Rules::internal_play_states	ssl_refbox_rules.h	/^    BSmart::Int_Vector internal_play_states;$/;"	m	class:SSL_Refbox_Rules	access:private
SSL_Refbox_Rules::last_break	ssl_refbox_rules.h	/^    int last_break;$/;"	m	class:SSL_Refbox_Rules	access:private
SSL_Refbox_Rules::last_msg	ssl_refbox_rules.h	/^    int last_msg;$/;"	m	class:SSL_Refbox_Rules	access:private
SSL_Refbox_Rules::local_play_state_alt	ssl_refbox_rules.h	/^    int local_play_state_alt;$/;"	m	class:SSL_Refbox_Rules	access:private
SSL_Refbox_Rules::metaObject	debug/moc_ssl_refbox_rules.cpp	/^const QMetaObject *SSL_Refbox_Rules::metaObject() const$/;"	f	class:SSL_Refbox_Rules	signature:() const
SSL_Refbox_Rules::metaObject	moc_ssl_refbox_rules.cpp	/^const QMetaObject *SSL_Refbox_Rules::metaObject() const$/;"	f	class:SSL_Refbox_Rules	signature:() const
SSL_Refbox_Rules::new_filter_data	debug/moc_ssl_refbox_rules.cpp	/^void SSL_Refbox_Rules::new_filter_data()$/;"	f	class:SSL_Refbox_Rules	signature:()
SSL_Refbox_Rules::new_filter_data	moc_ssl_refbox_rules.cpp	/^void SSL_Refbox_Rules::new_filter_data()$/;"	f	class:SSL_Refbox_Rules	signature:()
SSL_Refbox_Rules::new_filter_data	ssl_refbox_rules.h	/^    void new_filter_data();$/;"	p	class:SSL_Refbox_Rules	access:public	signature:()
SSL_Refbox_Rules::play_state_old	ssl_refbox_rules.h	/^    BSmart::Game_States::Play_State play_state_old;$/;"	m	class:SSL_Refbox_Rules	access:private
SSL_Refbox_Rules::qt_metacall	debug/moc_ssl_refbox_rules.cpp	/^int SSL_Refbox_Rules::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:SSL_Refbox_Rules	signature:(QMetaObject::Call _c, int _id, void **_a)
SSL_Refbox_Rules::qt_metacall	moc_ssl_refbox_rules.cpp	/^int SSL_Refbox_Rules::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:SSL_Refbox_Rules	signature:(QMetaObject::Call _c, int _id, void **_a)
SSL_Refbox_Rules::qt_metacast	debug/moc_ssl_refbox_rules.cpp	/^void *SSL_Refbox_Rules::qt_metacast(const char *_clname)$/;"	f	class:SSL_Refbox_Rules	signature:(const char *_clname)
SSL_Refbox_Rules::qt_metacast	moc_ssl_refbox_rules.cpp	/^void *SSL_Refbox_Rules::qt_metacast(const char *_clname)$/;"	f	class:SSL_Refbox_Rules	signature:(const char *_clname)
SSL_Refbox_Rules::refbox_cmd_alt	ssl_refbox_rules.h	/^    char refbox_cmd_alt;$/;"	m	class:SSL_Refbox_Rules	access:private
SSL_Refbox_Rules::rules_wait_condition	ssl_refbox_rules.h	/^    QWaitCondition* rules_wait_condition;$/;"	m	class:SSL_Refbox_Rules	access:private
SSL_Refbox_Rules::run	ssl_refbox_rules.cc	/^void SSL_Refbox_Rules::run() {$/;"	f	class:SSL_Refbox_Rules	signature:()
SSL_Refbox_Rules::run	ssl_refbox_rules.h	/^    void run();$/;"	p	class:SSL_Refbox_Rules	access:public	signature:()
SSL_Refbox_Rules::staticMetaObject	debug/moc_ssl_refbox_rules.cpp	/^const QMetaObject SSL_Refbox_Rules::staticMetaObject = {$/;"	m	class:SSL_Refbox_Rules	file:
SSL_Refbox_Rules::staticMetaObject	moc_ssl_refbox_rules.cpp	/^const QMetaObject SSL_Refbox_Rules::staticMetaObject = {$/;"	m	class:SSL_Refbox_Rules	file:
SSL_Refbox_Rules::touches	ssl_refbox_rules.h	/^    int touches;$/;"	m	class:SSL_Refbox_Rules	access:private
SSL_Refbox_Rules::written	ssl_refbox_rules.h	/^    bool written;$/;"	m	class:SSL_Refbox_Rules	access:private
SSL_Refbox_Rules::written_halftime	ssl_refbox_rules.h	/^    bool written_halftime;$/;"	m	class:SSL_Refbox_Rules	access:private
SSL_Refbox_Rules::~SSL_Refbox_Rules	ssl_refbox_rules.cc	/^SSL_Refbox_Rules::~SSL_Refbox_Rules() {$/;"	f	class:SSL_Refbox_Rules	signature:()
SSL_Refbox_Rules::~SSL_Refbox_Rules	ssl_refbox_rules.h	/^    ~SSL_Refbox_Rules();$/;"	p	class:SSL_Refbox_Rules	access:public	signature:()
STATUS_NUM	sample.h	/^        STATUS_NUM$/;"	e	enum:Sample::Status
STATUS_UNKNOWN	sample.h	/^        STATUS_UNKNOWN = 0,$/;"	e	enum:Sample::Status
STRIP	Makefile	/^STRIP         = strip$/;"	m
SYMLINK	Makefile	/^SYMLINK       = ln -f -s$/;"	m
Sample	sample.cc	/^Sample::Sample() {$/;"	f	class:Sample	signature:()
Sample	sample.h	/^    Sample();$/;"	p	class:Sample	access:public	signature:()
Sample	sample.h	/^class Sample$/;"	c
Sample::BALL	sample.h	/^        BALL = 0,$/;"	e	enum:Sample::Type
Sample::BLUE	sample.h	/^        BLUE,$/;"	e	enum:Sample::Last_Touched
Sample::BOUNCED	sample.h	/^        BOUNCED,$/;"	e	enum:Sample::Status
Sample::CHIPPED	sample.h	/^        CHIPPED,$/;"	e	enum:Sample::Status
Sample::FLYING	sample.h	/^        FLYING,$/;"	e	enum:Sample::Status
Sample::KICKED	sample.h	/^        KICKED,$/;"	e	enum:Sample::Status
Sample::LAST_TOUCHED_NUM	sample.h	/^        LAST_TOUCHED_NUM$/;"	e	enum:Sample::Last_Touched
Sample::LYING	sample.h	/^        LYING,$/;"	e	enum:Sample::Status
Sample::Last_Touched	sample.h	/^    enum Last_Touched$/;"	g	class:Sample	access:public
Sample::REFEREE	sample.h	/^        REFEREE,$/;"	e	enum:Sample::Last_Touched
Sample::ROBOT	sample.h	/^        ROBOT$/;"	e	enum:Sample::Type
Sample::ROLLING	sample.h	/^        ROLLING,$/;"	e	enum:Sample::Status
Sample::STATUS_NUM	sample.h	/^        STATUS_NUM$/;"	e	enum:Sample::Status
Sample::STATUS_UNKNOWN	sample.h	/^        STATUS_UNKNOWN = 0,$/;"	e	enum:Sample::Status
Sample::Sample	sample.cc	/^Sample::Sample() {$/;"	f	class:Sample	signature:()
Sample::Sample	sample.h	/^    Sample();$/;"	p	class:Sample	access:public	signature:()
Sample::Status	sample.h	/^    enum Status$/;"	g	class:Sample	access:public
Sample::TOUCH_UNKNOWN	sample.h	/^        TOUCH_UNKNOWN = 0,$/;"	e	enum:Sample::Last_Touched
Sample::Type	sample.h	/^    enum Type$/;"	g	class:Sample	access:public
Sample::YELLOW	sample.h	/^        YELLOW,$/;"	e	enum:Sample::Last_Touched
Sample::age	sample.h	/^    int age;$/;"	m	class:Sample	access:public
Sample::fuettere_polarbaer	sample.cc	/^void Sample::fuettere_polarbaer(BSmart::Double_Vector* polarbaer) {$/;"	f	class:Sample	signature:(BSmart::Double_Vector* polarbaer)
Sample::fuettere_polarbaer	sample.h	/^    void fuettere_polarbaer(BSmart::Double_Vector*);$/;"	p	class:Sample	access:public	signature:(BSmart::Double_Vector*)
Sample::last_touched_names	sample.cc	/^const QString Sample::last_touched_names[LAST_TOUCHED_NUM] = { "UNKNOWN",$/;"	m	class:Sample	file:
Sample::last_touched_names	sample.h	/^    static const QString last_touched_names[LAST_TOUCHED_NUM];$/;"	m	class:Sample	access:public
Sample::status	sample.h	/^    Status status;$/;"	m	class:Sample	access:public
Sample::status_names	sample.cc	/^const QString Sample::status_names[STATUS_NUM] = { "UNKNOWN", "ROLLING",$/;"	m	class:Sample	file:
Sample::status_names	sample.h	/^    static const QString status_names[STATUS_NUM];$/;"	m	class:Sample	access:public
Sample::timestamp	sample.h	/^    double timestamp;$/;"	m	class:Sample	access:public
Sample::type	sample.h	/^    Type type;$/;"	m	class:Sample	access:public
Sample::weighting	sample.h	/^    double weighting;$/;"	m	class:Sample	access:public
Sample::~Sample	sample.h	/^    ~Sample() {};$/;"	f	class:Sample	access:public	signature:()
Spielfeld	ui_GuiControls.h	/^    QFrame *Spielfeld;$/;"	m	class:Ui_GuiControls	access:public
Status	sample.h	/^    enum Status$/;"	g	class:Sample	access:public
TAR	Makefile	/^TAR           = tar -cf$/;"	m
TARGET	Makefile	/^TARGET        = ..\/bin\/ssl-refbox$/;"	m
TOUCH_UNKNOWN	sample.h	/^        TOUCH_UNKNOWN = 0,$/;"	e	enum:Sample::Last_Touched
Team_Marker_List	percept.h	/^typedef std::vector<BSmart::Double_Vector> Team_Marker_List;$/;"	t
Transformed_Percept	sslvision.h	/^struct Transformed_Percept$/;"	s
Transformed_Percept::ball_direction_after	sslvision.h	/^    BSmart::Pose ball_direction_after;$/;"	m	struct:Transformed_Percept	access:public
Transformed_Percept::ball_direction_before	sslvision.h	/^    BSmart::Pose ball_direction_before;$/;"	m	struct:Transformed_Percept	access:public
Transformed_Percept::ball_frame_number	sslvision.h	/^    unsigned int ball_frame_number;$/;"	m	struct:Transformed_Percept	access:public
Transformed_Percept::balls	sslvision.h	/^    Ball_Percept_List balls;$/;"	m	struct:Transformed_Percept	access:public
Transformed_Percept::cam_id	sslvision.h	/^    int cam_id;$/;"	m	struct:Transformed_Percept	access:public
Transformed_Percept::current_frame	sslvision.h	/^    int current_frame;$/;"	m	struct:Transformed_Percept	access:public
Transformed_Percept::frame_received	sslvision.h	/^    BSmart::Time_Value frame_received;$/;"	m	struct:Transformed_Percept	access:public
Transformed_Percept::has_one_ball	sslvision.h	/^    bool has_one_ball;$/;"	m	struct:Transformed_Percept	access:public
Transformed_Percept::has_one_robot	sslvision.h	/^    bool has_one_robot[Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	struct:Transformed_Percept	access:public
Transformed_Percept::refbox_cmd	sslvision.h	/^    std::string refbox_cmd;$/;"	m	struct:Transformed_Percept	access:public
Transformed_Percept::robot_direction	sslvision.h	/^    BSmart::Pose robot_direction[Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	struct:Transformed_Percept	access:public
Transformed_Percept::robots	sslvision.h	/^    Robot_Percept_List robots[Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	struct:Transformed_Percept	access:public
Transformed_Percept::sleep_time	sslvision.h	/^    int sleep_time;$/;"	m	struct:Transformed_Percept	access:public
Type	sample.h	/^    enum Type$/;"	g	class:Sample	access:public
UI_GUICONTROLS_H	ui_GuiControls.h	11;"	d
Ui	guiactions.h	/^namespace Ui { class GuiControls; }$/;"	n
Ui	ui_GuiControls.h	/^namespace Ui {$/;"	n
Ui::GuiControls	ui_GuiControls.h	/^    class GuiControls: public Ui_GuiControls {};$/;"	c	namespace:Ui	inherits:Ui_GuiControls
Ui_GuiControls	ui_GuiControls.h	/^class Ui_GuiControls$/;"	c
Ui_GuiControls::Spielfeld	ui_GuiControls.h	/^    QFrame *Spielfeld;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::actionAbout	ui_GuiControls.h	/^    QAction *actionAbout;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::actionAbout_Qt	ui_GuiControls.h	/^    QAction *actionAbout_Qt;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::actionAutoScan	ui_GuiControls.h	/^    QAction *actionAutoScan;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::actionClear_Console	ui_GuiControls.h	/^    QAction *actionClear_Console;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::actionE_xit	ui_GuiControls.h	/^    QAction *actionE_xit;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::actionFull_Screen	ui_GuiControls.h	/^    QAction *actionFull_Screen;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::actionSingle_Scan	ui_GuiControls.h	/^    QAction *actionSingle_Scan;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::actionToggleConsole	ui_GuiControls.h	/^    QAction *actionToggleConsole;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::actionToggleControls	ui_GuiControls.h	/^    QAction *actionToggleControls;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::action_Copy	ui_GuiControls.h	/^    QAction *action_Copy;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::action_Paste	ui_GuiControls.h	/^    QAction *action_Paste;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::ball_last_touched	ui_GuiControls.h	/^    QLabel *ball_last_touched;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::ball_status	ui_GuiControls.h	/^    QLabel *ball_status;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::centralwidget	ui_GuiControls.h	/^    QWidget *centralwidget;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::gamearea	ui_GuiControls.h	/^    Gamearea *gamearea;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::gridLayout	ui_GuiControls.h	/^    QGridLayout *gridLayout;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::gridLayout_3	ui_GuiControls.h	/^    QGridLayout *gridLayout_3;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::gridLayout_7	ui_GuiControls.h	/^    QGridLayout *gridLayout_7;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::horizontalSlider	ui_GuiControls.h	/^    QSlider *horizontalSlider;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::load_log	ui_GuiControls.h	/^    QPushButton *load_log;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::logControl	ui_GuiControls.h	/^    QDockWidget *logControl;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::logControlWidget	ui_GuiControls.h	/^    QWidget *logControlWidget;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::log_backward	ui_GuiControls.h	/^    QPushButton *log_backward;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::log_faster	ui_GuiControls.h	/^    QPushButton *log_faster;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::log_forward	ui_GuiControls.h	/^    QPushButton *log_forward;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::log_frameNumber	ui_GuiControls.h	/^    QLCDNumber *log_frameNumber;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::log_frame_back	ui_GuiControls.h	/^    QPushButton *log_frame_back;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::log_frame_forward	ui_GuiControls.h	/^    QPushButton *log_frame_forward;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::log_pause	ui_GuiControls.h	/^    QPushButton *log_pause;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::log_play	ui_GuiControls.h	/^    QPushButton *log_play;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::log_slower	ui_GuiControls.h	/^    QPushButton *log_slower;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::log_speed	ui_GuiControls.h	/^    QLabel *log_speed;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::log_totalFrames	ui_GuiControls.h	/^    QLCDNumber *log_totalFrames;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::menuUI	ui_GuiControls.h	/^    QMenu *menuUI;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::menu_Help	ui_GuiControls.h	/^    QMenu *menu_Help;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::menu_Menu	ui_GuiControls.h	/^    QMenu *menu_Menu;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::menubar	ui_GuiControls.h	/^    QMenuBar *menubar;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::record_log	ui_GuiControls.h	/^    QPushButton *record_log;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::retranslateUi	ui_GuiControls.h	/^    void retranslateUi(QMainWindow *GuiControls)$/;"	f	class:Ui_GuiControls	access:public	signature:(QMainWindow *GuiControls)
Ui_GuiControls::setupUi	ui_GuiControls.h	/^    void setupUi(QMainWindow *GuiControls)$/;"	f	class:Ui_GuiControls	access:public	signature:(QMainWindow *GuiControls)
Ui_GuiControls::show_rules	ui_GuiControls.h	/^    QPushButton *show_rules;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::statusbar	ui_GuiControls.h	/^    QStatusBar *statusbar;$/;"	m	class:Ui_GuiControls	access:public
Ui_GuiControls::verticalSpacer	ui_GuiControls.h	/^    QSpacerItem *verticalSpacer;$/;"	m	class:Ui_GuiControls	access:public
WHITE	colors.h	/^		WHITE,$/;"	e	enum:SSLRefbox::Colors::Color
WHITE_TRANSPARENT	colors.h	/^		WHITE_TRANSPARENT,$/;"	e	enum:SSLRefbox::Colors::Color
YELLOW	colors.h	/^		YELLOW,$/;"	e	enum:SSLRefbox::Colors::Color
YELLOW	sample.h	/^        YELLOW,$/;"	e	enum:Sample::Last_Touched
_BSMARTGUI_GL_EXTRA_H_	glextra.h	2;"	d
__COMMANDS_H__	commands.h	26;"	d
actionAbout	ui_GuiControls.h	/^    QAction *actionAbout;$/;"	m	class:Ui_GuiControls	access:public
actionAbout_Qt	ui_GuiControls.h	/^    QAction *actionAbout_Qt;$/;"	m	class:Ui_GuiControls	access:public
actionAutoScan	ui_GuiControls.h	/^    QAction *actionAutoScan;$/;"	m	class:Ui_GuiControls	access:public
actionClear_Console	ui_GuiControls.h	/^    QAction *actionClear_Console;$/;"	m	class:Ui_GuiControls	access:public
actionE_xit	ui_GuiControls.h	/^    QAction *actionE_xit;$/;"	m	class:Ui_GuiControls	access:public
actionFull_Screen	ui_GuiControls.h	/^    QAction *actionFull_Screen;$/;"	m	class:Ui_GuiControls	access:public
actionSingle_Scan	ui_GuiControls.h	/^    QAction *actionSingle_Scan;$/;"	m	class:Ui_GuiControls	access:public
actionToggleConsole	ui_GuiControls.h	/^    QAction *actionToggleConsole;$/;"	m	class:Ui_GuiControls	access:public
actionToggleControls	ui_GuiControls.h	/^    QAction *actionToggleControls;$/;"	m	class:Ui_GuiControls	access:public
action_Copy	ui_GuiControls.h	/^    QAction *action_Copy;$/;"	m	class:Ui_GuiControls	access:public
action_Paste	ui_GuiControls.h	/^    QAction *action_Paste;$/;"	m	class:Ui_GuiControls	access:public
age	sample.h	/^    int age;$/;"	m	class:Sample	access:public
all_contacts_log	particle_filter.h	/^    std::vector<Last_Contact> all_contacts_log;$/;"	m	class:Particle_Filter	access:private
alpha_fast_ball	particle_filter.h	/^    double alpha_fast_ball;$/;"	m	class:Particle_Filter	access:private
alpha_fast_robots	particle_filter.h	/^    double alpha_fast_robots;$/;"	m	class:Particle_Filter	access:private
alpha_slow_ball	particle_filter.h	/^    double alpha_slow_ball;$/;"	m	class:Particle_Filter	access:private
alpha_slow_robots	particle_filter.h	/^    double alpha_slow_robots;$/;"	m	class:Particle_Filter	access:private
analyse_percepts	sslvision.cc	/^void SSLVision::analyse_percepts() {$/;"	f	class:SSLVision	signature:()
analyse_percepts	sslvision.h	/^    void analyse_percepts();$/;"	p	class:SSLVision	access:private	signature:()
argv_global	ssl_refbox_rules.cc	/^char* argv_global;$/;"	v
argv_tmp	ssl_refbox_rules.h	/^    char* argv_tmp[];$/;"	m	class:SSL_Refbox_Rules	access:private
ball_direction_after	particle_filter.h	/^    BSmart::Pose ball_direction_after;$/;"	m	class:Particle_Filter	access:private
ball_direction_after	pre_filter_data.h	/^    BSmart::Pose ball_direction_after;$/;"	m	class:Pre_Filter_Data	access:private
ball_direction_after	sslvision.h	/^    BSmart::Pose ball_direction_after;$/;"	m	struct:Transformed_Percept	access:public
ball_direction_before	particle_filter.h	/^    BSmart::Pose ball_direction_before;$/;"	m	class:Particle_Filter	access:private
ball_direction_before	pre_filter_data.h	/^    BSmart::Pose ball_direction_before;$/;"	m	class:Pre_Filter_Data	access:private
ball_direction_before	sslvision.h	/^    BSmart::Pose ball_direction_before;$/;"	m	struct:Transformed_Percept	access:public
ball_distance_threshold	particle_filter.h	/^    double ball_distance_threshold;$/;"	m	class:Particle_Filter	access:private
ball_frame_number	sslvision.h	/^    unsigned int ball_frame_number;$/;"	m	struct:Transformed_Percept	access:public
ball_in_left_goal	ssl_refbox_rules_prolog.pl	/^ball_in_left_goal :- field('field',Field_width,_,Goal_width,Goal_Depth,Goal_Height,_,_,_) , ball_location('ball',Pos_x,Pos_y,Pos_z,_,_,_) , Pos_x < -(Field_width\/2) , Pos_x > -((Field_width\/2)+Goal_Depth) , Pos_y > -(Goal_width\/2) , Pos_y < (Goal_width\/2) , Pos_z < Goal_Height.$/;"	l
ball_in_right_goal	ssl_refbox_rules_prolog.pl	/^ball_in_right_goal :- field('field',Field_width,_,Goal_width,Goal_Depth,Goal_Height,_,_,_) , ball_location('ball',Pos_x,Pos_y,Pos_z,_,_,_) , Pos_x > (Field_width\/2) , Pos_x < ((Field_width\/2)+Goal_Depth) , Pos_y > -(Goal_width\/2) , Pos_y < (Goal_width\/2) , Pos_z < Goal_Height.$/;"	l
ball_last_touched	ui_GuiControls.h	/^    QLabel *ball_last_touched;$/;"	m	class:Ui_GuiControls	access:public
ball_last_touched_saved	particle_filter.h	/^    int ball_last_touched_saved; \/\/Sample::Last_Touched$/;"	m	class:Particle_Filter	access:private
ball_line	particle_filter.h	/^    BSmart::Line ball_line;$/;"	m	class:Particle_Filter	access:private
ball_line	sample.h	/^    BSmart::Line ball_line;$/;"	m	class:Ball_Sample	access:private
ball_lying_counter	particle_filter.h	/^    int ball_lying_counter;$/;"	m	class:Particle_Filter	access:private
ball_model	filter_data.h	/^	Ball_Sample ball_model;$/;"	m	class:Filter_Data	access:private
ball_model	glextra.h	/^    Ball_Sample ball_model;$/;"	m	class:GLExtra	access:private
ball_noise	sample.cc	/^const double Ball_Sample::ball_noise = 2.; \/\/ mm$/;"	m	class:Ball_Sample	file:
ball_noise	sample.h	/^    static const double ball_noise;$/;"	m	class:Ball_Sample	access:private
ball_samples	filter_data.h	/^	Ball_Sample_List ball_samples;$/;"	m	class:Filter_Data	access:private
ball_samples	glextra.h	/^    Ball_Sample_List ball_samples;$/;"	m	class:GLExtra	access:private
ball_samples_new	particle_filter.h	/^    Ball_Sample_List ball_samples_new;$/;"	m	class:Particle_Filter	access:private
ball_samples_old	particle_filter.h	/^    Ball_Sample_List ball_samples_old;$/;"	m	class:Particle_Filter	access:private
ball_speed_noise	sample.cc	/^const double Ball_Sample::ball_speed_noise = 0.02; \/\/ m\/s$/;"	m	class:Ball_Sample	file:
ball_speed_noise	sample.h	/^    static const double ball_speed_noise;$/;"	m	class:Ball_Sample	access:private
ball_status	ui_GuiControls.h	/^    QLabel *ball_status;$/;"	m	class:Ui_GuiControls	access:public
ball_status_saved	particle_filter.h	/^    int ball_status_saved; \/\/Sample::Status$/;"	m	class:Particle_Filter	access:private
balls	sslvision.h	/^    Ball_Percept_List balls;$/;"	m	struct:Transformed_Percept	access:public
belief	pre_filter_data.h	/^    double belief;$/;"	m	struct:Camera_Position	access:public
bglBresCircle	glextra.cc	/^inline void GLExtra::bglBresCircle(const int& r, const Quadrant& q) {$/;"	f	class:GLExtra	signature:(const int& r, const Quadrant& q)
bglBresCircle	glextra.h	/^    static void bglBresCircle(const int& r, const Quadrant& q = Q_ALL);$/;"	p	class:GLExtra	access:private	signature:(const int& r, const Quadrant& q = Q_ALL)
bglDrawField	glextra.cc	/^void GLExtra::bglDrawField() {$/;"	f	class:GLExtra	signature:()
bglDrawField	glextra.h	/^    static void bglDrawField();$/;"	p	class:GLExtra	access:public	signature:()
bglDrawFilterData	glextra.cc	/^void GLExtra::bglDrawFilterData() {$/;"	f	class:GLExtra	signature:()
bglDrawFilterData	glextra.h	/^    void bglDrawFilterData();$/;"	p	class:GLExtra	access:public	signature:()
bglDrawRulesystemData	glextra.cc	/^void GLExtra::bglDrawRulesystemData() {$/;"	f	class:GLExtra	signature:()
bglDrawRulesystemData	glextra.h	/^    void bglDrawRulesystemData();$/;"	p	class:GLExtra	access:public	signature:()
bglPoint	glextra.cc	/^inline void GLExtra::bglPoint(const float x, const float y, const float sz) {$/;"	f	class:GLExtra	signature:(const float x, const float y, const float sz)
bglPoint	glextra.h	/^    static void bglPoint(const float x, const float y, const float sz = 20);$/;"	p	class:GLExtra	access:private	signature:(const float x, const float y, const float sz = 20)
bitmap_output	gamearea.cc	/^void Gamearea::bitmap_output(void *font) {$/;"	f	class:Gamearea	signature:(void *font)
bitmap_output	gamearea.h	/^	void bitmap_output(void*);$/;"	p	class:Gamearea	access:public	signature:(void*)
broken_rule_vector	glextra.h	/^    std::vector<Broken_Rule> broken_rule_vector;$/;"	m	class:GLExtra	access:private
broken_rules	filter_data.h	/^	std::vector<Broken_Rule> broken_rules;$/;"	m	class:Filter_Data	access:private
buffer	refboxlistener.h	/^    char* buffer;$/;"	m	class:RefboxListener	access:private
buffer	sslvision.h	/^    char* buffer;$/;"	m	class:SSLVision	access:private
buflen	refboxlistener.h	/^    size_t buflen;$/;"	m	class:RefboxListener	access:private
cam	percept.h	/^    int cam;                  \/\/!< Camera from which the percept was detected$/;"	m	class:Percept	access:public
cam_dist_threshhold	pre_filter_data.h	/^    int cam_dist_threshhold;$/;"	m	class:Pre_Filter_Data	access:private
cam_height	sslvision.h	/^    int cam_height;$/;"	m	class:SSLVision	access:private
cam_id	sslvision.h	/^    int cam_id;$/;"	m	struct:Transformed_Percept	access:public
cam_pos	pre_filter_data.h	/^    BSmart::Pose3D cam_pos;$/;"	m	struct:Camera_Position	access:public
cam_width	sslvision.h	/^    int cam_width;$/;"	m	class:SSLVision	access:private
camera_pos	pre_filter_data.h	/^    Camera_Position camera_pos[2];$/;"	m	class:Pre_Filter_Data	access:private
center	field_hardware.h	/^	BSmart::Pose center;$/;"	m	class:Field_Goalpost	access:public
centralwidget	ui_GuiControls.h	/^    QWidget *centralwidget;$/;"	m	class:Ui_GuiControls	access:public
change_ball_last_touched	debug/moc_particle_filter.cpp	/^void Particle_Filter_Mother::change_ball_last_touched(QString _t1)$/;"	f	class:Particle_Filter_Mother	signature:(QString _t1)
change_ball_last_touched	guiactions.cc	/^void GuiActions::change_ball_last_touched(QString text) {$/;"	f	class:GuiActions	signature:(QString text)
change_ball_last_touched	guiactions.h	/^    void change_ball_last_touched(QString);$/;"	p	class:GuiActions	access:public	signature:(QString)
change_ball_last_touched	moc_particle_filter.cpp	/^void Particle_Filter_Mother::change_ball_last_touched(QString _t1)$/;"	f	class:Particle_Filter_Mother	signature:(QString _t1)
change_ball_last_touched	particle_filter.h	/^    void change_ball_last_touched(QString);$/;"	p	class:Particle_Filter_Mother	access:public	signature:(QString)
change_ball_last_touched_intern	debug/moc_particle_filter.cpp	/^void Particle_Filter::change_ball_last_touched_intern(QString _t1)$/;"	f	class:Particle_Filter	signature:(QString _t1)
change_ball_last_touched_intern	moc_particle_filter.cpp	/^void Particle_Filter::change_ball_last_touched_intern(QString _t1)$/;"	f	class:Particle_Filter	signature:(QString _t1)
change_ball_last_touched_intern	particle_filter.h	/^    void change_ball_last_touched_intern(QString);$/;"	p	class:Particle_Filter	access:public	signature:(QString)
change_ball_status	debug/moc_particle_filter.cpp	/^void Particle_Filter_Mother::change_ball_status(QString _t1)$/;"	f	class:Particle_Filter_Mother	signature:(QString _t1)
change_ball_status	guiactions.cc	/^void GuiActions::change_ball_status(QString text) {$/;"	f	class:GuiActions	signature:(QString text)
change_ball_status	guiactions.h	/^    void change_ball_status(QString);$/;"	p	class:GuiActions	access:public	signature:(QString)
change_ball_status	moc_particle_filter.cpp	/^void Particle_Filter_Mother::change_ball_status(QString _t1)$/;"	f	class:Particle_Filter_Mother	signature:(QString _t1)
change_ball_status	particle_filter.h	/^    void change_ball_status(QString);$/;"	p	class:Particle_Filter_Mother	access:public	signature:(QString)
change_ball_status_intern	debug/moc_particle_filter.cpp	/^void Particle_Filter::change_ball_status_intern(QString _t1)$/;"	f	class:Particle_Filter	signature:(QString _t1)
change_ball_status_intern	moc_particle_filter.cpp	/^void Particle_Filter::change_ball_status_intern(QString _t1)$/;"	f	class:Particle_Filter	signature:(QString _t1)
change_ball_status_intern	particle_filter.h	/^    void change_ball_status_intern(QString);$/;"	p	class:Particle_Filter	access:public	signature:(QString)
change_play_button	debug/moc_sslvision.cpp	/^void SSLVision::change_play_button(QString _t1)$/;"	f	class:SSLVision	signature:(QString _t1)
change_play_button	guiactions.cc	/^void GuiActions::change_play_button(QString text) {$/;"	f	class:GuiActions	signature:(QString text)
change_play_button	guiactions.h	/^    void change_play_button(QString);$/;"	p	class:GuiActions	access:public	signature:(QString)
change_play_button	moc_sslvision.cpp	/^void SSLVision::change_play_button(QString _t1)$/;"	f	class:SSLVision	signature:(QString _t1)
change_play_button	sslvision.h	/^    void change_play_button(QString);$/;"	p	class:SSLVision	access:public	signature:(QString)
change_record_button	debug/moc_sslvision.cpp	/^void SSLVision::change_record_button(QString _t1)$/;"	f	class:SSLVision	signature:(QString _t1)
change_record_button	guiactions.cc	/^void GuiActions::change_record_button(QString text) {$/;"	f	class:GuiActions	signature:(QString text)
change_record_button	guiactions.h	/^    void change_record_button(QString);$/;"	p	class:GuiActions	access:public	signature:(QString)
change_record_button	moc_sslvision.cpp	/^void SSLVision::change_record_button(QString _t1)$/;"	f	class:SSLVision	signature:(QString _t1)
change_record_button	sslvision.h	/^    void change_record_button(QString);$/;"	p	class:SSLVision	access:public	signature:(QString)
change_show_rules	debug/moc_gamearea.cpp	/^void Gamearea::change_show_rules(QString _t1)$/;"	f	class:Gamearea	signature:(QString _t1)
change_show_rules	gamearea.h	/^    void change_show_rules(QString);$/;"	p	class:Gamearea	access:public	signature:(QString)
change_show_rules	guiactions.cc	/^void GuiActions::change_show_rules(QString text) {$/;"	f	class:GuiActions	signature:(QString text)
change_show_rules	guiactions.h	/^    void change_show_rules(QString);$/;"	p	class:GuiActions	access:public	signature:(QString)
change_show_rules	moc_gamearea.cpp	/^void Gamearea::change_show_rules(QString _t1)$/;"	f	class:Gamearea	signature:(QString _t1)
check_bar_reflections	sample.cc	/^bool Ball_Sample::check_bar_reflections(Hitpoint* hitpoint) {$/;"	f	class:Ball_Sample	signature:(Hitpoint* hitpoint)
check_bar_reflections	sample.cc	/^bool Robot_Sample::check_bar_reflections(Hitpoint* hitpoint) {$/;"	f	class:Robot_Sample	signature:(Hitpoint* hitpoint)
check_bar_reflections	sample.h	/^    bool check_bar_reflections(Hitpoint*);$/;"	p	class:Ball_Sample	access:private	signature:(Hitpoint*)
check_bar_reflections	sample.h	/^    bool check_bar_reflections(Hitpoint*);$/;"	p	class:Robot_Sample	access:private	signature:(Hitpoint*)
check_collisions	sample.cc	/^void Ball_Sample::check_collisions(const Robot_Sample_List& robot_obstacles,$/;"	f	class:Ball_Sample	signature:(const Robot_Sample_List& robot_obstacles, double ms)
check_collisions	sample.cc	/^void Robot_Sample::check_collisions(const Robot_Sample_List& robot_obstacles) {$/;"	f	class:Robot_Sample	signature:(const Robot_Sample_List& robot_obstacles)
check_collisions	sample.h	/^    void check_collisions(const Robot_Sample_List&);$/;"	p	class:Robot_Sample	access:private	signature:(const Robot_Sample_List&)
check_collisions	sample.h	/^    void check_collisions(const Robot_Sample_List&, double);$/;"	p	class:Ball_Sample	access:private	signature:(const Robot_Sample_List&, double)
check_floor_reflection	sample.cc	/^bool Ball_Sample::check_floor_reflection(Hitpoint* hitpoint) {$/;"	f	class:Ball_Sample	signature:(Hitpoint* hitpoint)
check_floor_reflection	sample.h	/^    bool check_floor_reflection(Hitpoint*);$/;"	p	class:Ball_Sample	access:private	signature:(Hitpoint*)
check_goalpost_reflections	sample.cc	/^bool Ball_Sample::check_goalpost_reflections(Hitpoint* hitpoint) {$/;"	f	class:Ball_Sample	signature:(Hitpoint* hitpoint)
check_goalpost_reflections	sample.cc	/^bool Robot_Sample::check_goalpost_reflections(Hitpoint* hitpoint) {$/;"	f	class:Robot_Sample	signature:(Hitpoint* hitpoint)
check_goalpost_reflections	sample.h	/^    bool check_goalpost_reflections(Hitpoint*);$/;"	p	class:Ball_Sample	access:private	signature:(Hitpoint*)
check_goalpost_reflections	sample.h	/^    bool check_goalpost_reflections(Hitpoint*);$/;"	p	class:Robot_Sample	access:private	signature:(Hitpoint*)
check_left_goalie	ssl_refbox_rules_prolog.pl	/^check_left_goalie :- field('field',Field_width,_,_,_,_,_,_,_) , get_left(Left_team) , goalie('left_goalie',Left_team,Id1) , roboter(Left_team,Id1,Pos_x1,Pos_y1,_,_,1) , distance(Pos_x1,Pos_y1,-(Field_width\/2),0,Dist1) , roboter(Left_team,Id2,Pos_x2,Pos_y2,_,_,1) , Id1 =\\= Id2 , distance(Pos_x2,Pos_y2,-(Field_width\/2),0,Dist2) , Dist2 < Dist1 , set_rule_breaker(Left_team,Id2).$/;"	l
check_right_goalie	ssl_refbox_rules_prolog.pl	/^check_right_goalie :- field('field',Field_width,_,_,_,_,_,_,_) , get_left(Left_team) , goalie('right_goalie',Team,Id1) , Team =\\= Left_team , roboter(Team,Id1,Pos_x1,Pos_y1,_,_,1) , distance(Pos_x1,Pos_y1,(Field_width\/2),0,Dist1) , roboter(Team,Id2,Pos_x2,Pos_y2,_,_,1) , Id1 =\\= Id2 , distance(Pos_x2,Pos_y2,(Field_width\/2),0,Dist2) , Dist2 < Dist1 , set_rule_breaker(Team,Id2).$/;"	l
check_robot_reflections	sample.cc	/^bool Ball_Sample::check_robot_reflections(Hitpoint* hitpoint,$/;"	f	class:Ball_Sample	signature:(Hitpoint* hitpoint, const Robot_Sample_List& robot_obstacles)
check_robot_reflections	sample.cc	/^bool Robot_Sample::check_robot_reflections(Hitpoint* hitpoint,$/;"	f	class:Robot_Sample	signature:(Hitpoint* hitpoint, const Robot_Sample_List& robot_obstacles)
check_robot_reflections	sample.h	/^    bool check_robot_reflections(Hitpoint*, const Robot_Sample_List&);$/;"	p	class:Ball_Sample	access:private	signature:(Hitpoint*, const Robot_Sample_List&)
check_robot_reflections	sample.h	/^    bool check_robot_reflections(Hitpoint*, const Robot_Sample_List&);$/;"	p	class:Robot_Sample	access:private	signature:(Hitpoint*, const Robot_Sample_List&)
circle	field_hardware.h	/^	BSmart::Circle circle;$/;"	m	class:Field_Goalpost	access:public
circle	particle_filter.h	/^    BSmart::Circle circle;$/;"	m	class:Particle_Filter	access:private
circle	sample.h	/^    BSmart::Circle circle;$/;"	m	class:Ball_Sample	access:private
circle	sample.h	/^    BSmart::Circle circle;$/;"	m	class:Robot_Sample	access:private
circle_around_ball	filter_data.h	/^	bool circle_around_ball;$/;"	m	struct:Broken_Rule	access:public
clear_balls	pre_filter_data.cc	/^void Pre_Filter_Data::clear_balls(int camID) {$/;"	f	class:Pre_Filter_Data	signature:(int camID)
clear_balls	pre_filter_data.h	/^    void clear_balls(int camID);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID)
clear_robots	pre_filter_data.cc	/^void Pre_Filter_Data::clear_robots(int camID) {$/;"	f	class:Pre_Filter_Data	signature:(int camID)
clear_robots	pre_filter_data.h	/^    void clear_robots(int camID);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID)
cmd	refboxlistener.h	/^        char           cmd;            \/\/ Current referee command$/;"	m	struct:RefboxListener::GameStatePacket	access:public
cmd_counter	refboxlistener.h	/^        unsigned char  cmd_counter;    \/\/ Increments on each new command$/;"	m	struct:RefboxListener::GameStatePacket	access:public
collision3D	sample.h	/^    BSmart::Pose3D collision3D;$/;"	m	class:Ball_Sample	access:private
collisionpoint	field_hardware.h	/^	BSmart::Double_Vector collisionpoint; \/\/2d$/;"	m	struct:Hitpoint	access:public
color	colors.h	/^	} color;$/;"	m	class:SSLRefbox::Colors	typeref:enum:SSLRefbox::Colors::Color	access:public
color	percept.h	/^    SSLRefbox::Colors::Color color;$/;"	m	class:Robot_Percept	access:public
confidence	percept.h	/^    unsigned int confidence;  \/\/!< Quality measure of the observation$/;"	m	class:Percept	access:public
confidence	sample.h	/^    double confidence;$/;"	m	class:Robot_Sample	access:public
connectActions	guiactions.cc	/^void GuiActions::connectActions() {$/;"	f	class:GuiActions	signature:()
connectActions	guiactions.h	/^    void connectActions();$/;"	p	class:GuiActions	access:public	signature:()
connectActions	particle_filter.cc	/^void Particle_Filter_Mother::connectActions() {$/;"	f	class:Particle_Filter_Mother	signature:()
connectActions	particle_filter.h	/^    void connectActions();$/;"	p	class:Particle_Filter_Mother	access:public	signature:()
create_models	particle_filter.cc	/^void Particle_Filter::create_models() {$/;"	f	class:Particle_Filter	signature:()
create_models	particle_filter.h	/^    void create_models();$/;"	p	class:Particle_Filter	access:public	signature:()
cur_frm	ssl_refbox_rules.h	/^    int cur_frm;$/;"	m	class:SSL_Refbox_Rules	access:private
cur_timestamp	ssl_refbox_rules.h	/^    int cur_timestamp;$/;"	m	class:SSL_Refbox_Rules	access:private
current_ball_percepts	filter_data.h	/^	Ball_Percept_List current_ball_percepts;$/;"	m	class:Filter_Data	access:private
current_ball_percepts	glextra.h	/^    Ball_Percept_List current_ball_percepts;$/;"	m	class:GLExtra	access:private
current_balls	pre_filter_data.h	/^    Ball_Percept_List current_balls[2];$/;"	m	class:Pre_Filter_Data	access:private
current_frame	log_control.h	/^    int current_frame;$/;"	m	class:Log_Control	access:private
current_frame	sslvision.h	/^    int current_frame;$/;"	m	struct:Transformed_Percept	access:public
current_robot_percepts	filter_data.h	/^	Robot_Percept_List current_robot_percepts[NUMBER_OF_TEAMS][NUMBER_OF_IDS];$/;"	m	class:Filter_Data	access:private
current_robot_percepts	glextra.h	/^    Robot_Percept_List current_robot_percepts;$/;"	m	class:GLExtra	access:private
data	sslvision.h	/^    Pre_Filter_Data* data;$/;"	m	class:SSLVision	access:private
defense_area	filter_data.h	/^	int defense_area; \/\/-1 no, 0 left, 1 right$/;"	m	struct:Broken_Rule	access:public
determine_ball_status	particle_filter.cc	/^void Particle_Filter::determine_ball_status(const Ball_Sample& new_ball_model) {$/;"	f	class:Particle_Filter	signature:(const Ball_Sample& new_ball_model)
determine_ball_status	particle_filter.h	/^    void determine_ball_status(const Ball_Sample&);$/;"	p	class:Particle_Filter	access:private	signature:(const Ball_Sample&)
dist	field_hardware.h	/^	double dist;$/;"	m	struct:Hitpoint	access:public
dist	field_hardware.h	/^	int dist;$/;"	m	class:Field_Bar	access:public
dist_in_2d	particle_filter.cc	/^double Particle_Filter::dist_in_2d(int camID, BSmart::Pose3D sample,$/;"	f	class:Particle_Filter	signature:(int camID, BSmart::Pose3D sample, BSmart::Pose percept)
dist_in_2d	particle_filter.h	/^    double dist_in_2d(int camID, BSmart::Pose3D sample, BSmart::Pose percept);$/;"	p	class:Particle_Filter	access:private	signature:(int camID, BSmart::Pose3D sample, BSmart::Pose percept)
draw_ball	glextra.cc	/^void GLExtra::draw_ball(double x, double y, double z,$/;"	f	class:GLExtra	signature:(double x, double y, double z, SSLRefbox::Colors::Color color)
draw_ball	glextra.h	/^    void draw_ball(double, double, double, SSLRefbox::Colors::Color);$/;"	p	class:GLExtra	access:private	signature:(double, double, double, SSLRefbox::Colors::Color)
draw_defense_area	glextra.cc	/^void GLExtra::draw_defense_area(int offset) {$/;"	f	class:GLExtra	signature:(int offset)
draw_defense_area	glextra.h	/^    static void draw_defense_area(int);$/;"	p	class:GLExtra	access:private	signature:(int)
draw_goal	glextra.cc	/^void GLExtra::draw_goal() {$/;"	f	class:GLExtra	signature:()
draw_goal	glextra.h	/^    static void draw_goal();$/;"	p	class:GLExtra	access:private	signature:()
draw_marks	glextra.cc	/^void GLExtra::draw_marks() {$/;"	f	class:GLExtra	signature:()
draw_marks	glextra.h	/^    static void draw_marks();$/;"	p	class:GLExtra	access:private	signature:()
draw_robot	glextra.cc	/^void GLExtra::draw_robot(int x, int y, SSLRefbox::Colors::Color color,$/;"	f	class:GLExtra	signature:(int x, int y, SSLRefbox::Colors::Color color, int team, int id, bool last_touched)
draw_robot	glextra.h	/^    void draw_robot(int, int, SSLRefbox::Colors::Color, int team = -1, int id = -1, bool last_touched = false);$/;"	p	class:GLExtra	access:private	signature:(int, int, SSLRefbox::Colors::Color, int team = -1, int id = -1, bool last_touched = false)
end_blue_timeout	ssl_refbox_rules_prolog.pl	/^end_blue_timeout     :- set_local_play_state(1) , set_timeout_blue_end  , set_total_play_time_start , retract(timestamp('timeout_start_blue',_))   , assert(timestamp('timeout_start_blue',0)).$/;"	l
end_first_half	ssl_refbox_rules_prolog.pl	/^end_first_half :- reset_total_play_time_start.$/;"	l
end_play_record	sslvision.cc	/^void SSLVision::end_play_record() {$/;"	f	class:SSLVision	signature:()
end_play_record	sslvision.h	/^    void end_play_record();$/;"	p	class:SSLVision	access:private	signature:()
end_record	sslvision.cc	/^int SSLVision::end_record() {$/;"	f	class:SSLVision	signature:()
end_record	sslvision.h	/^    int end_record();$/;"	p	class:SSLVision	access:private	signature:()
end_yellow_timeout	ssl_refbox_rules_prolog.pl	/^end_yellow_timeout   :- set_local_play_state(1) , set_timeout_yellow_end, set_total_play_time_start , retract(timestamp('timeout_start_yellow',_)) , assert(timestamp('timeout_start_yellow',0)).$/;"	l
execute	refboxlistener.cc	/^void RefboxListener::execute() {$/;"	f	class:RefboxListener	signature:()
execute	refboxlistener.h	/^    void execute();$/;"	p	class:RefboxListener	access:private	signature:()
execute	sslvision.cc	/^int SSLVision::execute(Transformed_Percept& trans_perc) {$/;"	f	class:SSLVision	signature:(Transformed_Percept& trans_perc)
execute	sslvision.h	/^    int execute(Transformed_Percept&);$/;"	p	class:SSLVision	access:private	signature:(Transformed_Percept&)
field_bars_ball	field_hardware.cc	/^		Field_Hardware::field_bars_ball[Field_Hardware::NUMBER_FIELD_BARS] =$/;"	m	class:Field_Hardware	file:
field_bars_ball	field_hardware.h	/^	static const Field_Bar field_bars_ball[NUMBER_FIELD_BARS];$/;"	m	class:Field_Hardware	access:public
field_bars_robot	field_hardware.cc	/^		Field_Hardware::field_bars_robot[Field_Hardware::NUMBER_FIELD_BARS] =$/;"	m	class:Field_Hardware	file:
field_bars_robot	field_hardware.h	/^	static const Field_Bar field_bars_robot[NUMBER_FIELD_BARS];$/;"	m	class:Field_Hardware	access:public
field_goalposts_ball	field_hardware.cc	/^		Field_Hardware::field_goalposts_ball[Field_Hardware::NUMBER_FIELD_GOALPOSTS] =$/;"	m	class:Field_Hardware	file:
field_goalposts_ball	field_hardware.h	/^	static const Field_Goalpost field_goalposts_ball[NUMBER_FIELD_GOALPOSTS];$/;"	m	class:Field_Hardware	access:public
field_goalposts_robot	field_hardware.cc	/^		Field_Hardware::field_goalposts_robot[Field_Hardware::NUMBER_FIELD_GOALPOSTS] =$/;"	m	class:Field_Hardware	file:
field_goalposts_robot	field_hardware.h	/^	static const Field_Goalpost field_goalposts_robot[NUMBER_FIELD_GOALPOSTS];$/;"	m	class:Field_Hardware	access:public
fileName	sslvision.h	/^    QString fileName;$/;"	m	class:SSLVision	access:private
filter_data	gamearea.h	/^    Filter_Data* filter_data;$/;"	m	class:Gamearea	access:public
filter_data	glextra.h	/^    Filter_Data* filter_data;$/;"	m	class:GLExtra	access:private
filter_data	particle_filter.h	/^    Filter_Data* filter_data;$/;"	m	class:Particle_Filter	access:private
filter_data	particle_filter.h	/^    Filter_Data* filter_data;$/;"	m	class:Particle_Filter_Mother	access:private
filter_data	ssl_refbox_rules.h	/^    Filter_Data* filter_data;$/;"	m	class:SSL_Refbox_Rules	access:private
find_goalies	ssl_refbox_rules_prolog.pl	/^find_goalies :- find_left_goalie , find_right_goalie.$/;"	l
find_left_goalie	ssl_refbox_rules_prolog.pl	/^find_left_goalie :- field('field',Field_width,_,_,_,_,_,_,_) , left_team('left_team',Left_team) , roboter(Left_team,Id1,Pos_x1,Pos_y1,_,_,1) , distance(Pos_x1,Pos_y1,-(Field_width\/2),0,Dist1) , not((roboter(Left_team,Id2,Pos_x2,Pos_y2,_,_,1) , Id1 =\\= Id2 , distance(Pos_x2,Pos_y2,-(Field_width\/2),0,Dist2) , Dist2 < Dist1)) , set_left_goalie(Left_team,Id1).$/;"	l
find_right_goalie	ssl_refbox_rules_prolog.pl	/^find_right_goalie :- field('field',Field_width,_,_,_,_,_,_,_) , left_team('left_team',Left_team) , roboter(Team,Id1,Pos_x1,Pos_y1,_,_,1) , Team =\\= Left_team , distance(Pos_x1,Pos_y1,(Field_width\/2),0,Dist1) , not((roboter(Team,Id2,Pos_x2,Pos_y2,_,_,1) , Id1 =\\= Id2 , distance(Pos_x2,Pos_y2,(Field_width\/2),0,Dist2) , Dist2 < Dist1)) , set_right_goalie(Team,Id1).$/;"	l
flying_robots	particle_filter.h	/^    std::vector<Last_Contact> flying_robots;$/;"	m	class:Particle_Filter	access:private
frame	filter_data.h	/^	int frame;$/;"	m	class:Filter_Data	access:private
frame	particle_filter.h	/^    int frame;$/;"	m	struct:Last_Contact	access:public
frame	sslvision.h	/^    SSL_DetectionFrame frame;$/;"	m	class:SSLVision	access:private
frame_received	sslvision.h	/^    BSmart::Time_Value frame_received;$/;"	m	struct:Transformed_Percept	access:public
framenumber	percept.h	/^    unsigned int framenumber; \/\/!< Frame in which the percept was detected$/;"	m	class:Percept	access:public
freekick_blue	ssl_refbox_rules_prolog.pl	/^freekick_blue :- get_local_play_state(11).$/;"	l
freekick_blue	ssl_refbox_rules_prolog.pl	/^freekick_blue :- get_local_play_state(12).$/;"	l
freekick_blue	ssl_refbox_rules_prolog.pl	/^freekick_blue :- get_local_play_state(13).$/;"	l
freekick_blue	ssl_refbox_rules_prolog.pl	/^freekick_blue :- get_local_play_state(9).$/;"	l
freekick_pos	filter_data.h	/^	BSmart::Int_Vector freekick_pos;$/;"	m	struct:Broken_Rule	access:public
freekick_yellow	ssl_refbox_rules_prolog.pl	/^freekick_yellow :- get_local_play_state(3).$/;"	l
freekick_yellow	ssl_refbox_rules_prolog.pl	/^freekick_yellow :- get_local_play_state(5).$/;"	l
freekick_yellow	ssl_refbox_rules_prolog.pl	/^freekick_yellow :- get_local_play_state(6).$/;"	l
freekick_yellow	ssl_refbox_rules_prolog.pl	/^freekick_yellow :- get_local_play_state(7).$/;"	l
fuettere_polarbaer	sample.cc	/^void Sample::fuettere_polarbaer(BSmart::Double_Vector* polarbaer) {$/;"	f	class:Sample	signature:(BSmart::Double_Vector* polarbaer)
fuettere_polarbaer	sample.h	/^    void fuettere_polarbaer(BSmart::Double_Vector*);$/;"	p	class:Sample	access:public	signature:(BSmart::Double_Vector*)
fullscreen	guiactions.cc	/^void GuiActions::fullscreen(bool f) {$/;"	f	class:GuiActions	signature:(bool f)
fullscreen	guiactions.h	/^    void fullscreen(bool);$/;"	p	class:GuiActions	access:public	signature:(bool)
game_control	ssl_refbox_rules_prolog.pl	/^game_control :- start_game ; set_running.$/;"	l
game_init	ssl_refbox_rules_prolog.pl	/^game_init :- set_local_next_play_state(7) , set_local_play_state(0) , assert(result('result',0,0)) , assert(timestamp('total_play_time_start',0)) , assert(timestamp('total_play_time_total',0)) , assert(timestamp('timeout_start_yellow',0)) , assert(timestamp('timeout_start_blue',0)) , assert(timeouts('timeouts',0,0)) , assert(check_offside(0)) , assert(ball_status('ball',0,0,0,0)).$/;"	l
gamearea	ui_GuiControls.h	/^    Gamearea *gamearea;$/;"	m	class:Ui_GuiControls	access:public
gamestate	gamearea.h	/^    BSmart::Game_States* gamestate;$/;"	m	class:Gamearea	access:public
gamestate	glextra.h	/^    BSmart::Game_States* gamestate;$/;"	m	class:GLExtra	access:private
gamestate	pf_tester.h	/^    BSmart::Game_States* gamestate;$/;"	m	class:PF_Tester	access:private
gamestate	refboxlistener.h	/^    BSmart::Game_States* gamestate;$/;"	m	class:RefboxListener	access:private
gamestate	ssl_refbox_rules.h	/^    BSmart::Game_States* gamestate;$/;"	m	class:SSL_Refbox_Rules	access:private
gamestate	sslvision.h	/^    BSmart::Game_States* gamestate;$/;"	m	class:SSLVision	access:private
gaussian	particle_filter.cc	/^double Particle_Filter::gaussian(double v, double std_dev) {$/;"	f	class:Particle_Filter	signature:(double v, double std_dev)
gaussian	particle_filter.h	/^    double gaussian(double v, double std_dev);$/;"	p	class:Particle_Filter	access:private	signature:(double v, double std_dev)
getStaticMetaObject	debug/moc_gamearea.cpp	/^const QMetaObject &Gamearea::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Gamearea	signature:()
getStaticMetaObject	debug/moc_guiactions.cpp	/^const QMetaObject &GuiActions::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:GuiActions	signature:()
getStaticMetaObject	debug/moc_log_control.cpp	/^const QMetaObject &Log_Control::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Log_Control	signature:()
getStaticMetaObject	debug/moc_particle_filter.cpp	/^const QMetaObject &Particle_Filter::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Particle_Filter	signature:()
getStaticMetaObject	debug/moc_particle_filter.cpp	/^const QMetaObject &Particle_Filter_Mother::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Particle_Filter_Mother	signature:()
getStaticMetaObject	debug/moc_pf_tester.cpp	/^const QMetaObject &PF_Tester::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:PF_Tester	signature:()
getStaticMetaObject	debug/moc_refboxlistener.cpp	/^const QMetaObject &RefboxListener::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:RefboxListener	signature:()
getStaticMetaObject	debug/moc_ssl_refbox_rules.cpp	/^const QMetaObject &SSL_Refbox_Rules::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:SSL_Refbox_Rules	signature:()
getStaticMetaObject	debug/moc_sslvision.cpp	/^const QMetaObject &SSLVision::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:SSLVision	signature:()
getStaticMetaObject	moc_gamearea.cpp	/^const QMetaObject &Gamearea::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Gamearea	signature:()
getStaticMetaObject	moc_guiactions.cpp	/^const QMetaObject &GuiActions::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:GuiActions	signature:()
getStaticMetaObject	moc_log_control.cpp	/^const QMetaObject &Log_Control::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Log_Control	signature:()
getStaticMetaObject	moc_particle_filter.cpp	/^const QMetaObject &Particle_Filter::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Particle_Filter	signature:()
getStaticMetaObject	moc_particle_filter.cpp	/^const QMetaObject &Particle_Filter_Mother::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:Particle_Filter_Mother	signature:()
getStaticMetaObject	moc_pf_tester.cpp	/^const QMetaObject &PF_Tester::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:PF_Tester	signature:()
getStaticMetaObject	moc_refboxlistener.cpp	/^const QMetaObject &RefboxListener::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:RefboxListener	signature:()
getStaticMetaObject	moc_ssl_refbox_rules.cpp	/^const QMetaObject &SSL_Refbox_Rules::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:SSL_Refbox_Rules	signature:()
getStaticMetaObject	moc_sslvision.cpp	/^const QMetaObject &SSLVision::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:SSLVision	signature:()
get_ball_direction_after	pre_filter_data.cc	/^BSmart::Pose Pre_Filter_Data::get_ball_direction_after() {$/;"	f	class:Pre_Filter_Data	signature:()
get_ball_direction_after	pre_filter_data.h	/^    BSmart::Pose get_ball_direction_after();$/;"	p	class:Pre_Filter_Data	access:public	signature:()
get_ball_direction_before	pre_filter_data.cc	/^BSmart::Pose Pre_Filter_Data::get_ball_direction_before() {$/;"	f	class:Pre_Filter_Data	signature:()
get_ball_direction_before	pre_filter_data.h	/^    BSmart::Pose get_ball_direction_before();$/;"	p	class:Pre_Filter_Data	access:public	signature:()
get_ball_model	filter_data.cc	/^Ball_Sample Filter_Data::get_ball_model() {$/;"	f	class:Filter_Data	signature:()
get_ball_model	filter_data.h	/^	Ball_Sample get_ball_model();$/;"	p	class:Filter_Data	access:public	signature:()
get_ball_samples	filter_data.cc	/^Ball_Sample_List Filter_Data::get_ball_samples() {$/;"	f	class:Filter_Data	signature:()
get_ball_samples	filter_data.h	/^	Ball_Sample_List get_ball_samples();$/;"	p	class:Filter_Data	access:public	signature:()
get_broken_rules	filter_data.cc	/^std::vector<Broken_Rule> Filter_Data::get_broken_rules() {$/;"	f	class:Filter_Data	signature:()
get_broken_rules	filter_data.h	/^	std::vector<Broken_Rule> get_broken_rules();$/;"	p	class:Filter_Data	access:public	signature:()
get_camera_position	pre_filter_data.cc	/^BSmart::Pose3D Pre_Filter_Data::get_camera_position(int camID) {$/;"	f	class:Pre_Filter_Data	signature:(int camID)
get_camera_position	pre_filter_data.h	/^    BSmart::Pose3D get_camera_position(int camID);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID)
get_current_ball_percepts	filter_data.cc	/^Ball_Percept_List Filter_Data::get_current_ball_percepts() {$/;"	f	class:Filter_Data	signature:()
get_current_ball_percepts	filter_data.h	/^	Ball_Percept_List get_current_ball_percepts();$/;"	p	class:Filter_Data	access:public	signature:()
get_current_balls	pre_filter_data.cc	/^Ball_Percept_List Pre_Filter_Data::get_current_balls(int camID) {$/;"	f	class:Pre_Filter_Data	signature:(int camID)
get_current_balls	pre_filter_data.h	/^    Ball_Percept_List get_current_balls(int camID);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID)
get_current_frame	log_control.cc	/^int Log_Control::get_current_frame() {$/;"	f	class:Log_Control	signature:()
get_current_frame	log_control.h	/^    int get_current_frame();$/;"	p	class:Log_Control	access:public	signature:()
get_current_robot_obstacles	filter_data.cc	/^Robot_Sample_List Filter_Data::get_current_robot_obstacles() {$/;"	f	class:Filter_Data	signature:()
get_current_robot_obstacles	filter_data.h	/^	Robot_Sample_List get_current_robot_obstacles();$/;"	p	class:Filter_Data	access:public	signature:()
get_current_robot_percepts	filter_data.cc	/^Robot_Percept_List Filter_Data::get_current_robot_percepts(int team, int id) {$/;"	f	class:Filter_Data	signature:(int team, int id)
get_current_robot_percepts	filter_data.h	/^	Robot_Percept_List get_current_robot_percepts(int, int);$/;"	p	class:Filter_Data	access:public	signature:(int, int)
get_frame	filter_data.cc	/^int Filter_Data::get_frame() {$/;"	f	class:Filter_Data	signature:()
get_frame	filter_data.h	/^	int get_frame();$/;"	p	class:Filter_Data	access:public	signature:()
get_internal_play_states	filter_data.cc	/^BSmart::Int_Vector Filter_Data::get_internal_play_states() {$/;"	f	class:Filter_Data	signature:()
get_internal_play_states	filter_data.h	/^	BSmart::Int_Vector get_internal_play_states();$/;"	p	class:Filter_Data	access:public	signature:()
get_newest_frame	pre_filter_data.cc	/^int Pre_Filter_Data::get_newest_frame() {$/;"	f	class:Pre_Filter_Data	signature:()
get_newest_frame	pre_filter_data.h	/^    int get_newest_frame();$/;"	p	class:Pre_Filter_Data	access:public	signature:()
get_next_frame	log_control.cc	/^int Log_Control::get_next_frame() {$/;"	f	class:Log_Control	signature:()
get_next_frame	log_control.h	/^    int get_next_frame();$/;"	p	class:Log_Control	access:public	signature:()
get_play_speed	log_control.cc	/^double Log_Control::get_play_speed() {$/;"	f	class:Log_Control	signature:()
get_play_speed	log_control.h	/^    double get_play_speed();$/;"	p	class:Log_Control	access:public	signature:()
get_prop_next_frame	log_control.cc	/^int Log_Control::get_prop_next_frame() {$/;"	f	class:Log_Control	signature:()
get_prop_next_frame	log_control.h	/^    int get_prop_next_frame();$/;"	p	class:Log_Control	access:public	signature:()
get_random_pos_2d	particle_filter.cc	/^BSmart::Pose Particle_Filter::get_random_pos_2d(int min_x, int max_x,$/;"	f	class:Particle_Filter	signature:(int min_x, int max_x, int min_y, int max_y)
get_random_pos_2d	particle_filter.h	/^    BSmart::Pose get_random_pos_2d(int min_x = -(BSmart::Field::half_field_width + BSmart::Field::off_width) , int max_x = BSmart::Field::half_field_width + BSmart::Field::off_width, int min_y = - (BSmart::Field::half_field_height + BSmart::Field::off_width), int max_y = BSmart::Field::half_field_height  + BSmart::Field::off_width);$/;"	p	class:Particle_Filter	access:private	signature:(int min_x = -(BSmart::Field::half_field_width + BSmart::Field::off_width) , int max_x = BSmart::Field::half_field_width + BSmart::Field::off_width, int min_y = - (BSmart::Field::half_field_height + BSmart::Field::off_width), int max_y = BSmart::Field::half_field_height + BSmart::Field::off_width)
get_random_pos_3d	particle_filter.cc	/^BSmart::Pose3D Particle_Filter::get_random_pos_3d(int min_x, int max_x,$/;"	f	class:Particle_Filter	signature:(int min_x, int max_x, int min_y, int max_y, int min_z, int max_z)
get_random_pos_3d	particle_filter.h	/^    BSmart::Pose3D get_random_pos_3d(int min_x = -(BSmart::Field::half_field_width + BSmart::Field::off_width) , int max_x = BSmart::Field::half_field_width + BSmart::Field::off_width, int min_y = - (BSmart::Field::half_field_height + BSmart::Field::off_width), int max_y = BSmart::Field::half_field_height  + BSmart::Field::off_width, int min_z = 0, int max_z = 10);$/;"	p	class:Particle_Filter	access:private	signature:(int min_x = -(BSmart::Field::half_field_width + BSmart::Field::off_width) , int max_x = BSmart::Field::half_field_width + BSmart::Field::off_width, int min_y = - (BSmart::Field::half_field_height + BSmart::Field::off_width), int max_y = BSmart::Field::half_field_height + BSmart::Field::off_width, int min_z = 0, int max_z = 10)
get_random_status	particle_filter.cc	/^Sample::Status Particle_Filter::get_random_status() {$/;"	f	class:Particle_Filter	signature:()
get_random_status	particle_filter.h	/^    Sample::Status get_random_status();$/;"	p	class:Particle_Filter	access:private	signature:()
get_robot_direction	pre_filter_data.cc	/^BSmart::Pose Pre_Filter_Data::get_robot_direction(int team, int id) {$/;"	f	class:Pre_Filter_Data	signature:(int team, int id)
get_robot_direction	pre_filter_data.h	/^    BSmart::Pose get_robot_direction(int team, int id);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int team, int id)
get_robot_model	filter_data.cc	/^Robot_Sample Filter_Data::get_robot_model(int team, int id) {$/;"	f	class:Filter_Data	signature:(int team, int id)
get_robot_model	filter_data.h	/^	Robot_Sample get_robot_model(int, int);$/;"	p	class:Filter_Data	access:public	signature:(int, int)
get_robot_samples	filter_data.cc	/^Robot_Sample_List Filter_Data::get_robot_samples(int team, int id) {$/;"	f	class:Filter_Data	signature:(int team, int id)
get_robot_samples	filter_data.h	/^	Robot_Sample_List get_robot_samples(int, int);$/;"	p	class:Filter_Data	access:public	signature:(int, int)
get_robot_seen	filter_data.cc	/^bool Filter_Data::get_robot_seen(int team, int id) {$/;"	f	class:Filter_Data	signature:(int team, int id)
get_robot_seen	filter_data.h	/^	bool get_robot_seen(int, int);$/;"	p	class:Filter_Data	access:public	signature:(int, int)
get_robots	pre_filter_data.cc	/^Robot_Percept_List Pre_Filter_Data::get_robots(int camID, int team, int id) {$/;"	f	class:Pre_Filter_Data	signature:(int camID, int team, int id)
get_robots	pre_filter_data.h	/^    Robot_Percept_List get_robots(int camID, int team, int id);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID, int team, int id)
get_timestamp	filter_data.cc	/^BSmart::Time_Value Filter_Data::get_timestamp() {$/;"	f	class:Filter_Data	signature:()
get_timestamp	filter_data.h	/^	BSmart::Time_Value get_timestamp();$/;"	p	class:Filter_Data	access:public	signature:()
get_timestamp	pre_filter_data.cc	/^BSmart::Time_Value Pre_Filter_Data::get_timestamp() {$/;"	f	class:Pre_Filter_Data	signature:()
get_timestamp	pre_filter_data.h	/^    BSmart::Time_Value get_timestamp();$/;"	p	class:Pre_Filter_Data	access:public	signature:()
glextra	gamearea.h	/^    GLExtra glextra;$/;"	m	class:Gamearea	access:private
goals_blue	refboxlistener.h	/^        unsigned char  goals_blue;     \/\/ current score for blue team$/;"	m	struct:RefboxListener::GameStatePacket	access:public
goals_yellow	refboxlistener.h	/^        unsigned char  goals_yellow;   \/\/ current score for yellow team$/;"	m	struct:RefboxListener::GameStatePacket	access:public
goto_frame	debug/moc_guiactions.cpp	/^void GuiActions::goto_frame(int _t1)$/;"	f	class:GuiActions	signature:(int _t1)
goto_frame	guiactions.h	/^    void goto_frame(int);$/;"	p	class:GuiActions	access:public	signature:(int)
goto_frame	log_control.cc	/^void Log_Control::goto_frame(int f) {$/;"	f	class:Log_Control	signature:(int f)
goto_frame	log_control.h	/^    void goto_frame(int);$/;"	p	class:Log_Control	access:public	signature:(int)
goto_frame	moc_guiactions.cpp	/^void GuiActions::goto_frame(int _t1)$/;"	f	class:GuiActions	signature:(int _t1)
gridLayout	ui_GuiControls.h	/^    QGridLayout *gridLayout;$/;"	m	class:Ui_GuiControls	access:public
gridLayout_3	ui_GuiControls.h	/^    QGridLayout *gridLayout_3;$/;"	m	class:Ui_GuiControls	access:public
gridLayout_7	ui_GuiControls.h	/^    QGridLayout *gridLayout_7;$/;"	m	class:Ui_GuiControls	access:public
gsp_last	refboxlistener.h	/^    GameStatePacket gsp_last;$/;"	m	class:RefboxListener	access:private
has_new_data	refboxlistener.h	/^    bool has_new_data;$/;"	m	class:RefboxListener	access:private
has_one_ball	sslvision.h	/^    bool has_one_ball;$/;"	m	struct:Transformed_Percept	access:public
has_one_robot	sslvision.h	/^    bool has_one_robot[Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	struct:Transformed_Percept	access:public
height	field_hardware.h	/^	int height;$/;"	m	class:Field_Bar	access:public
height	field_hardware.h	/^	int height;$/;"	m	class:Field_Goalpost	access:public
height	field_hardware.h	/^	int height;$/;"	m	struct:Hitpoint	access:public
horizontalSlider	ui_GuiControls.h	/^    QSlider *horizontalSlider;$/;"	m	class:Ui_GuiControls	access:public
id	percept.h	/^    int id;$/;"	m	class:Robot_Percept	access:public
id	sample.h	/^    int id;$/;"	m	class:Robot_Sample	access:public
init	percept.h	/^    void init()$/;"	f	class:Percept	access:public	signature:()
initializeGL	gamearea.cc	/^void Gamearea::initializeGL() {$/;"	f	class:Gamearea	signature:()
initializeGL	gamearea.h	/^	void initializeGL();$/;"	p	class:Gamearea	access:public	signature:()
initializeSlider	debug/moc_sslvision.cpp	/^void SSLVision::initializeSlider(int _t1, int _t2, int _t3, int _t4, int _t5)$/;"	f	class:SSLVision	signature:(int _t1, int _t2, int _t3, int _t4, int _t5)
initializeSlider	guiactions.cc	/^void GuiActions::initializeSlider(int min, int max, int singleStep,$/;"	f	class:GuiActions	signature:(int min, int max, int singleStep, int pageStep, int tickInterval)
initializeSlider	guiactions.h	/^    void initializeSlider(int, int, int, int, int);$/;"	p	class:GuiActions	access:public	signature:(int, int, int, int, int)
initializeSlider	moc_sslvision.cpp	/^void SSLVision::initializeSlider(int _t1, int _t2, int _t3, int _t4, int _t5)$/;"	f	class:SSLVision	signature:(int _t1, int _t2, int _t3, int _t4, int _t5)
initializeSlider	sslvision.h	/^    void initializeSlider(int,int,int,int,int);$/;"	p	class:SSLVision	access:public	signature:(int,int,int,int,int)
input_serial	refboxlistener.cc	/^void RefboxListener::input_serial(const char cmd) {$/;"	f	class:RefboxListener	signature:(const char cmd)
input_serial	refboxlistener.h	/^    void input_serial(const char);$/;"	p	class:RefboxListener	access:private	signature:(const char)
int_to_string	glextra.cc	/^int GLExtra::int_to_string(std::string& string, int i) {$/;"	f	class:GLExtra	signature:(std::string& string, int i)
int_to_string	glextra.h	/^    int int_to_string(std::string& string, int i);$/;"	p	class:GLExtra	access:private	signature:(std::string& string, int i)
internal_play_states	filter_data.h	/^	BSmart::Int_Vector internal_play_states;$/;"	m	class:Filter_Data	access:private
internal_play_states	glextra.h	/^    BSmart::Int_Vector internal_play_states;$/;"	m	class:GLExtra	access:private
internal_play_states	ssl_refbox_rules.h	/^    BSmart::Int_Vector internal_play_states;$/;"	m	class:SSL_Refbox_Rules	access:private
intersection	sample.h	/^    BSmart::Double_Vector intersection;$/;"	m	class:Ball_Sample	access:private
intersection	sample.h	/^    BSmart::Double_Vector intersection;$/;"	m	class:Robot_Sample	access:private
intersections	particle_filter.h	/^    std::vector<BSmart::Double_Vector> intersections;$/;"	m	class:Particle_Filter	access:private
intersections	sample.h	/^    std::vector<BSmart::Double_Vector> intersections;$/;"	m	class:Ball_Sample	access:private
intersections	sample.h	/^    std::vector<BSmart::Double_Vector> intersections;$/;"	m	class:Robot_Sample	access:private
kickoff_blue	ssl_refbox_rules_prolog.pl	/^kickoff_blue :- get_local_play_state(X) , (X =:= 9 ; X =:= 13).$/;"	l
kickoff_yellow	ssl_refbox_rules_prolog.pl	/^kickoff_yellow :- get_local_play_state(X) , (X =:= 3 ; X =:= 7).$/;"	l
last_ball_model	particle_filter.h	/^    Ball_Sample last_ball_model;$/;"	m	class:Particle_Filter	access:private
last_break	ssl_refbox_rules.h	/^    int last_break;$/;"	m	class:SSL_Refbox_Rules	access:private
last_contacts	particle_filter.h	/^    std::vector<Last_Contact> last_contacts;$/;"	m	class:Particle_Filter	access:private
last_movement	particle_filter.h	/^    double last_movement;$/;"	m	class:Particle_Filter	access:private
last_msg	ssl_refbox_rules.h	/^    int last_msg;$/;"	m	class:SSL_Refbox_Rules	access:private
last_pos	sample.h	/^    BSmart::Pose last_pos;$/;"	m	class:Robot_Sample	access:private
last_pos	sample.h	/^    BSmart::Pose3D last_pos;$/;"	m	class:Ball_Sample	access:private
last_touched	sample.h	/^    Last_Touched last_touched;$/;"	m	class:Ball_Sample	access:public
last_touched_dist_tmp	particle_filter.h	/^    double last_touched_dist_tmp;$/;"	m	class:Particle_Filter	access:private
last_touched_names	sample.cc	/^const QString Sample::last_touched_names[LAST_TOUCHED_NUM] = { "UNKNOWN",$/;"	m	class:Sample	file:
last_touched_names	sample.h	/^    static const QString last_touched_names[LAST_TOUCHED_NUM];$/;"	m	class:Sample	access:public
last_touched_robot	sample.h	/^    BSmart::Int_Vector last_touched_robot;$/;"	m	class:Ball_Sample	access:public
last_touched_robot_saved	particle_filter.h	/^    BSmart::Int_Vector last_touched_robot_saved;$/;"	m	class:Particle_Filter	access:private
line	field_hardware.h	/^	BSmart::Line line;$/;"	m	class:Field_Bar	access:public
line_for_smth	filter_data.h	/^	BSmart::Line line_for_smth;$/;"	m	struct:Broken_Rule	access:public
load_log	ui_GuiControls.h	/^    QPushButton *load_log;$/;"	m	class:Ui_GuiControls	access:public
local_play_state_alt	ssl_refbox_rules.h	/^    int local_play_state_alt;$/;"	m	class:SSL_Refbox_Rules	access:private
logControl	ui_GuiControls.h	/^    QDockWidget *logControl;$/;"	m	class:Ui_GuiControls	access:public
logControlWidget	ui_GuiControls.h	/^    QWidget *logControlWidget;$/;"	m	class:Ui_GuiControls	access:public
log_backward	log_control.cc	/^void Log_Control::log_backward() {$/;"	f	class:Log_Control	signature:()
log_backward	log_control.h	/^    void log_backward();$/;"	p	class:Log_Control	access:public	signature:()
log_backward	ui_GuiControls.h	/^    QPushButton *log_backward;$/;"	m	class:Ui_GuiControls	access:public
log_control	sslvision.h	/^    Log_Control* log_control;$/;"	m	class:SSLVision	access:public
log_faster	log_control.cc	/^void Log_Control::log_faster() {$/;"	f	class:Log_Control	signature:()
log_faster	log_control.h	/^    void log_faster();$/;"	p	class:Log_Control	access:public	signature:()
log_faster	ui_GuiControls.h	/^    QPushButton *log_faster;$/;"	m	class:Ui_GuiControls	access:public
log_forward	log_control.cc	/^void Log_Control::log_forward() {$/;"	f	class:Log_Control	signature:()
log_forward	log_control.h	/^    void log_forward();$/;"	p	class:Log_Control	access:public	signature:()
log_forward	ui_GuiControls.h	/^    QPushButton *log_forward;$/;"	m	class:Ui_GuiControls	access:public
log_frameNumber	ui_GuiControls.h	/^    QLCDNumber *log_frameNumber;$/;"	m	class:Ui_GuiControls	access:public
log_frame_back	log_control.cc	/^void Log_Control::log_frame_back() {$/;"	f	class:Log_Control	signature:()
log_frame_back	log_control.h	/^    void log_frame_back();$/;"	p	class:Log_Control	access:public	signature:()
log_frame_back	ui_GuiControls.h	/^    QPushButton *log_frame_back;$/;"	m	class:Ui_GuiControls	access:public
log_frame_forward	log_control.cc	/^void Log_Control::log_frame_forward() {$/;"	f	class:Log_Control	signature:()
log_frame_forward	log_control.h	/^    void log_frame_forward();$/;"	p	class:Log_Control	access:public	signature:()
log_frame_forward	ui_GuiControls.h	/^    QPushButton *log_frame_forward;$/;"	m	class:Ui_GuiControls	access:public
log_length	log_control.h	/^    int log_length;$/;"	m	class:Log_Control	access:private
log_pause	log_control.cc	/^void Log_Control::log_pause() {$/;"	f	class:Log_Control	signature:()
log_pause	log_control.h	/^    void log_pause();$/;"	p	class:Log_Control	access:public	signature:()
log_pause	ui_GuiControls.h	/^    QPushButton *log_pause;$/;"	m	class:Ui_GuiControls	access:public
log_play	log_control.cc	/^void Log_Control::log_play() {$/;"	f	class:Log_Control	signature:()
log_play	log_control.h	/^    void log_play();$/;"	p	class:Log_Control	access:public	signature:()
log_play	ui_GuiControls.h	/^    QPushButton *log_play;$/;"	m	class:Ui_GuiControls	access:public
log_size	debug/moc_sslvision.cpp	/^void SSLVision::log_size(int _t1)$/;"	f	class:SSLVision	signature:(int _t1)
log_size	moc_sslvision.cpp	/^void SSLVision::log_size(int _t1)$/;"	f	class:SSLVision	signature:(int _t1)
log_size	sslvision.h	/^    void log_size(int);$/;"	p	class:SSLVision	access:public	signature:(int)
log_slower	log_control.cc	/^void Log_Control::log_slower() {$/;"	f	class:Log_Control	signature:()
log_slower	log_control.h	/^    void log_slower();$/;"	p	class:Log_Control	access:public	signature:()
log_slower	ui_GuiControls.h	/^    QPushButton *log_slower;$/;"	m	class:Ui_GuiControls	access:public
log_speed	ui_GuiControls.h	/^    QLabel *log_speed;$/;"	m	class:Ui_GuiControls	access:public
log_totalFrames	ui_GuiControls.h	/^    QLCDNumber *log_totalFrames;$/;"	m	class:Ui_GuiControls	access:public
logs	sslvision.h	/^    Refbox_Log logs;$/;"	m	class:SSLVision	access:private
lying_shot	particle_filter.h	/^    bool lying_shot;$/;"	m	struct:Last_Contact	access:public
m_field	gamearea.h	/^    GLuint  m_field;$/;"	m	class:Gamearea	access:private
m_gui	guiactions.h	/^Ui::GuiControls* m_gui;$/;"	m	class:GuiActions	access:private
m_timer	gamearea.h	/^    int m_timer;$/;"	m	class:Gamearea	access:private
main	main.cc	/^int main(int argc, char* argv[]) {$/;"	f	signature:(int argc, char* argv[])
menuUI	ui_GuiControls.h	/^    QMenu *menuUI;$/;"	m	class:Ui_GuiControls	access:public
menu_Help	ui_GuiControls.h	/^    QMenu *menu_Help;$/;"	m	class:Ui_GuiControls	access:public
menu_Menu	ui_GuiControls.h	/^    QMenu *menu_Menu;$/;"	m	class:Ui_GuiControls	access:public
menubar	ui_GuiControls.h	/^    QMenuBar *menubar;$/;"	m	class:Ui_GuiControls	access:public
metaObject	debug/moc_gamearea.cpp	/^const QMetaObject *Gamearea::metaObject() const$/;"	f	class:Gamearea	signature:() const
metaObject	debug/moc_guiactions.cpp	/^const QMetaObject *GuiActions::metaObject() const$/;"	f	class:GuiActions	signature:() const
metaObject	debug/moc_log_control.cpp	/^const QMetaObject *Log_Control::metaObject() const$/;"	f	class:Log_Control	signature:() const
metaObject	debug/moc_particle_filter.cpp	/^const QMetaObject *Particle_Filter::metaObject() const$/;"	f	class:Particle_Filter	signature:() const
metaObject	debug/moc_particle_filter.cpp	/^const QMetaObject *Particle_Filter_Mother::metaObject() const$/;"	f	class:Particle_Filter_Mother	signature:() const
metaObject	debug/moc_pf_tester.cpp	/^const QMetaObject *PF_Tester::metaObject() const$/;"	f	class:PF_Tester	signature:() const
metaObject	debug/moc_refboxlistener.cpp	/^const QMetaObject *RefboxListener::metaObject() const$/;"	f	class:RefboxListener	signature:() const
metaObject	debug/moc_ssl_refbox_rules.cpp	/^const QMetaObject *SSL_Refbox_Rules::metaObject() const$/;"	f	class:SSL_Refbox_Rules	signature:() const
metaObject	debug/moc_sslvision.cpp	/^const QMetaObject *SSLVision::metaObject() const$/;"	f	class:SSLVision	signature:() const
metaObject	moc_gamearea.cpp	/^const QMetaObject *Gamearea::metaObject() const$/;"	f	class:Gamearea	signature:() const
metaObject	moc_guiactions.cpp	/^const QMetaObject *GuiActions::metaObject() const$/;"	f	class:GuiActions	signature:() const
metaObject	moc_log_control.cpp	/^const QMetaObject *Log_Control::metaObject() const$/;"	f	class:Log_Control	signature:() const
metaObject	moc_particle_filter.cpp	/^const QMetaObject *Particle_Filter::metaObject() const$/;"	f	class:Particle_Filter	signature:() const
metaObject	moc_particle_filter.cpp	/^const QMetaObject *Particle_Filter_Mother::metaObject() const$/;"	f	class:Particle_Filter_Mother	signature:() const
metaObject	moc_pf_tester.cpp	/^const QMetaObject *PF_Tester::metaObject() const$/;"	f	class:PF_Tester	signature:() const
metaObject	moc_refboxlistener.cpp	/^const QMetaObject *RefboxListener::metaObject() const$/;"	f	class:RefboxListener	signature:() const
metaObject	moc_ssl_refbox_rules.cpp	/^const QMetaObject *SSL_Refbox_Rules::metaObject() const$/;"	f	class:SSL_Refbox_Rules	signature:() const
metaObject	moc_sslvision.cpp	/^const QMetaObject *SSLVision::metaObject() const$/;"	f	class:SSLVision	signature:() const
motion_update	particle_filter.cc	/^void Particle_Filter::motion_update() {$/;"	f	class:Particle_Filter	signature:()
motion_update	particle_filter.h	/^    void motion_update();$/;"	p	class:Particle_Filter	access:public	signature:()
move	sample.cc	/^void Ball_Sample::move(const double ms,$/;"	f	class:Ball_Sample	signature:(const double ms, const Robot_Sample_List& robot_obstacles)
move	sample.cc	/^void Robot_Sample::move(const double ms,$/;"	f	class:Robot_Sample	signature:(const double ms, const Robot_Sample_List& robot_obstacles)
move	sample.h	/^    void move(const double, const Robot_Sample_List&);$/;"	p	class:Ball_Sample	access:public	signature:(const double, const Robot_Sample_List&)
move	sample.h	/^    void move(const double, const Robot_Sample_List&);$/;"	p	class:Robot_Sample	access:public	signature:(const double, const Robot_Sample_List&)
move_ball_bounce	pf_tester.cc	/^void PF_Tester::move_ball_bounce(int ms) {$/;"	f	class:PF_Tester	signature:(int ms)
move_ball_bounce	pf_tester.h	/^    void move_ball_bounce(int);$/;"	p	class:PF_Tester	access:private	signature:(int)
move_ball_respawn	pf_tester.cc	/^void PF_Tester::move_ball_respawn(int ms) {$/;"	f	class:PF_Tester	signature:(int ms)
move_ball_respawn	pf_tester.h	/^    void move_ball_respawn(int);$/;"	p	class:PF_Tester	access:private	signature:(int)
move_ball_rest	pf_tester.cc	/^void PF_Tester::move_ball_rest() {$/;"	f	class:PF_Tester	signature:()
move_ball_rest	pf_tester.h	/^    void move_ball_rest();$/;"	p	class:PF_Tester	access:private	signature:()
move_balls	filter_data.cc	/^void Filter_Data::move_balls(double ms, const Robot_Sample_List& robots) {$/;"	f	class:Filter_Data	signature:(double ms, const Robot_Sample_List& robots)
move_balls	filter_data.h	/^	void move_balls(double, const Robot_Sample_List&);$/;"	p	class:Filter_Data	access:public	signature:(double, const Robot_Sample_List&)
move_robots	filter_data.cc	/^void Filter_Data::move_robots(double ms, const Robot_Sample_List& robots) {$/;"	f	class:Filter_Data	signature:(double ms, const Robot_Sample_List& robots)
move_robots	filter_data.h	/^	void move_robots(double, const Robot_Sample_List&);$/;"	p	class:Filter_Data	access:public	signature:(double, const Robot_Sample_List&)
ms	pf_tester.h	/^    int ms;$/;"	m	class:PF_Tester	access:private
new_data	particle_filter.h	/^    bool new_data;$/;"	m	class:Particle_Filter_Mother	access:private
new_data_wait_condition	gamearea.h	/^    QWaitCondition* new_data_wait_condition;$/;"	m	class:Gamearea	access:public
new_data_wait_condition	particle_filter.h	/^    QWaitCondition* new_data_wait_condition;$/;"	m	class:Particle_Filter_Mother	access:private
new_data_wait_condition	sslvision.h	/^    QWaitCondition* new_data_wait_condition;$/;"	m	class:SSLVision	access:private
new_filter_data	debug/moc_ssl_refbox_rules.cpp	/^void SSL_Refbox_Rules::new_filter_data()$/;"	f	class:SSL_Refbox_Rules	signature:()
new_filter_data	moc_ssl_refbox_rules.cpp	/^void SSL_Refbox_Rules::new_filter_data()$/;"	f	class:SSL_Refbox_Rules	signature:()
new_filter_data	ssl_refbox_rules.h	/^    void new_filter_data();$/;"	p	class:SSL_Refbox_Rules	access:public	signature:()
new_frame	debug/moc_pf_tester.cpp	/^void PF_Tester::new_frame()$/;"	f	class:PF_Tester	signature:()
new_frame	debug/moc_sslvision.cpp	/^void SSLVision::new_frame()$/;"	f	class:SSLVision	signature:()
new_frame	moc_pf_tester.cpp	/^void PF_Tester::new_frame()$/;"	f	class:PF_Tester	signature:()
new_frame	moc_sslvision.cpp	/^void SSLVision::new_frame()$/;"	f	class:SSLVision	signature:()
new_frame	particle_filter.cc	/^void Particle_Filter_Mother::new_frame() \/\/SLOT$/;"	f	class:Particle_Filter_Mother	signature:()
new_frame	particle_filter.h	/^    void new_frame();$/;"	p	class:Particle_Filter_Mother	access:public	signature:()
new_frame	pf_tester.h	/^    void new_frame();$/;"	p	class:PF_Tester	access:public	signature:()
new_frame	sslvision.h	/^    void new_frame();$/;"	p	class:SSLVision	access:public	signature:()
new_refbox_cmd	debug/moc_sslvision.cpp	/^void SSLVision::new_refbox_cmd(char _t1)$/;"	f	class:SSLVision	signature:(char _t1)
new_refbox_cmd	moc_sslvision.cpp	/^void SSLVision::new_refbox_cmd(char _t1)$/;"	f	class:SSLVision	signature:(char _t1)
new_refbox_cmd	refboxlistener.cc	/^void RefboxListener::new_refbox_cmd(char comd) {$/;"	f	class:RefboxListener	signature:(char comd)
new_refbox_cmd	refboxlistener.h	/^    void new_refbox_cmd(char);$/;"	p	class:RefboxListener	access:public	signature:(char)
new_refbox_cmd	sslvision.h	/^    void new_refbox_cmd(char);$/;"	p	class:SSLVision	access:public	signature:(char)
newest_frame	particle_filter.h	/^    int newest_frame;$/;"	m	class:Particle_Filter	access:private
newest_frame	pre_filter_data.h	/^    int newest_frame;$/;"	m	class:Pre_Filter_Data	access:private
next_frame	log_control.h	/^    int next_frame;$/;"	m	class:Log_Control	access:private
npc	sslvision.h	/^    int npc;$/;"	m	class:SSLVision	access:private
o_fast_ball	particle_filter.h	/^    double o_fast_ball;$/;"	m	class:Particle_Filter	access:private
o_fast_robots	particle_filter.h	/^    double o_fast_robots[Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	class:Particle_Filter	access:private
o_slow_ball	particle_filter.h	/^    double o_slow_ball;$/;"	m	class:Particle_Filter	access:private
o_slow_robots	particle_filter.h	/^    double o_slow_robots[Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	class:Particle_Filter	access:private
obstacle	field_hardware.h	/^	Field_Hardware::Obstacle obstacle;$/;"	m	class:Field_Obstacle	access:public
obstacle	field_hardware.h	/^	Field_Hardware::Obstacle obstacle;$/;"	m	struct:Hitpoint	access:public
operator <	percept.h	/^    bool operator<(const Ball_Percept& comp) const$/;"	f	class:Ball_Percept	access:public	signature:(const Ball_Percept& comp) const
orientation_point	field_hardware.h	/^	BSmart::Double_Vector orientation_point;$/;"	m	struct:Hitpoint	access:public
paintGL	gamearea.cc	/^void Gamearea::paintGL() {$/;"	f	class:Gamearea	signature:()
paintGL	gamearea.h	/^	void paintGL();$/;"	p	class:Gamearea	access:public	signature:()
particle_filter	gamearea.h	/^    Particle_Filter_Mother* particle_filter;$/;"	m	class:Gamearea	access:public
penalty_blue	ssl_refbox_rules_prolog.pl	/^penalty_blue :- get_local_play_state(X) , (X =:= 10 ; X =:= 14).$/;"	l
penalty_blue_on_left_goal	ssl_refbox_rules_prolog.pl	/^penalty_blue_on_left_goal :- field('field',Field_width,_,_,_,_,_,_,Penalty_mark) , Min_dist is ((-(Field_width))+Penalty_mark+400) , goalie('left_goalie',0,Goalie_id) , roboter(0,Other_id,Pos_x_other,_,_,_,1) , Goalie_id =\\= Other_id , Pos_x_other < Min_dist , set_rule_breaker(0,Other_id).$/;"	l
penalty_blue_on_left_goal	ssl_refbox_rules_prolog.pl	/^penalty_blue_on_left_goal :- field('field',Field_width,_,_,_,_,_,_,Penalty_mark) , Min_dist is ((-(Field_width))+Penalty_mark+400) , not((roboter(1,_,Pos_x_kicker,_,_,_,1) , Pos_x_kicker < Min_dist)) , set_rule_breaker(1,12).$/;"	l
penalty_blue_on_left_goal	ssl_refbox_rules_prolog.pl	/^penalty_blue_on_left_goal :- field('field',Field_width,_,_,_,_,_,_,Penalty_mark) , Min_dist is ((-(Field_width))+Penalty_mark+400) , roboter(1,Kicker_id,Pos_x_kicker,_,_,_,1) , roboter(1,Other_id,Pos_x_other,_,_,_,1) , Kicker_id =\\= Other_id , Pos_x_kicker < Min_dist , Pos_x_other < Min_dist , ( ( Pos_x_kicker < Pos_x_other , set_rule_breaker(1,Other_id)) ; ( Pos_x_kicker > Pos_x_other , set_rule_breaker(1,Kicker_id)) ).$/;"	l
penalty_blue_on_right_goal	ssl_refbox_rules_prolog.pl	/^penalty_blue_on_right_goal :- field('field',Field_width,_,_,_,_,_,_,Penalty_mark) , Min_dist is (Field_width-Penalty_mark-400) , goalie('right_goalie',0,Goalie_id) , roboter(0,Other_id,Pos_x_other,_,_,_,1) , Goalie_id =\\= Other_id , Pos_x_other > Min_dist , set_rule_breaker(0,Other_id).$/;"	l
penalty_blue_on_right_goal	ssl_refbox_rules_prolog.pl	/^penalty_blue_on_right_goal :- field('field',Field_width,_,_,_,_,_,_,Penalty_mark) , Min_dist is (Field_width-Penalty_mark-400) , not((roboter(1,_,Pos_x_kicker,_,_,_,1) , Pos_x_kicker > Min_dist)) , set_rule_breaker(1,12).$/;"	l
penalty_blue_on_right_goal	ssl_refbox_rules_prolog.pl	/^penalty_blue_on_right_goal :- field('field',Field_width,_,_,_,_,_,_,Penalty_mark) , Min_dist is (Field_width-Penalty_mark-400) , roboter(1,Kicker_id,Pos_x_kicker,_,_,_,1) , roboter(1,Other_id,Pos_x_other,_,_,_,1) , Kicker_id =\\= Other_id , Pos_x_kicker > Min_dist , Pos_x_other > Min_dist , ( ( Pos_x_kicker > Pos_x_other , set_rule_breaker(1,Other_id)) ; ( Pos_x_kicker < Pos_x_other , set_rule_breaker(1,Kicker_id)) ).$/;"	l
penalty_yellow	ssl_refbox_rules_prolog.pl	/^penalty_yellow :- get_local_play_state(X) , (X =:= 4 ; X =:= 8).$/;"	l
penalty_yellow_on_left_goal	ssl_refbox_rules_prolog.pl	/^penalty_yellow_on_left_goal :- field('field',Field_width,_,_,_,_,_,_,Penalty_mark) , Min_dist is ((-(Field_width))+Penalty_mark+400) , goalie('left_goalie',1,Goalie_id) , roboter(1,Other_id,Pos_x_other,_,_,_,1) , Goalie_id =\\= Other_id , Pos_x_other < Min_dist , set_rule_breaker(1,Other_id).$/;"	l
penalty_yellow_on_left_goal	ssl_refbox_rules_prolog.pl	/^penalty_yellow_on_left_goal :- field('field',Field_width,_,_,_,_,_,_,Penalty_mark) , Min_dist is ((-(Field_width))+Penalty_mark+400) , not((roboter(0,_,Pos_x_kicker,_,_,_,1) , Pos_x_kicker < Min_dist)) , set_rule_breaker(0,12).$/;"	l
penalty_yellow_on_left_goal	ssl_refbox_rules_prolog.pl	/^penalty_yellow_on_left_goal :- field('field',Field_width,_,_,_,_,_,_,Penalty_mark) , Min_dist is ((-(Field_width))+Penalty_mark+400) , roboter(0,Kicker_id,Pos_x_kicker,_,_,_,1) , roboter(0,Other_id,Pos_x_other,_,_,_,1) , Kicker_id =\\= Other_id , Pos_x_kicker < Min_dist , Pos_x_other < Min_dist , ( ( Pos_x_kicker < Pos_x_other , set_rule_breaker(1,Other_id)) ; ( Pos_x_kicker > Pos_x_other , set_rule_breaker(0,Kicker_id)) ).$/;"	l
penalty_yellow_on_right_goal	ssl_refbox_rules_prolog.pl	/^penalty_yellow_on_right_goal :- field('field',Field_width,_,_,_,_,_,_,Penalty_mark) , Min_dist is (Field_width-Penalty_mark-400) , goalie('right_goalie',1,Goalie_id) , roboter(1,Other_id,Pos_x_other,_,_,_,1) , Goalie_id =\\= Other_id , Pos_x_other > Min_dist , set_rule_breaker(1,Other_id).$/;"	l
penalty_yellow_on_right_goal	ssl_refbox_rules_prolog.pl	/^penalty_yellow_on_right_goal :- field('field',Field_width,_,_,_,_,_,_,Penalty_mark) , Min_dist is (Field_width-Penalty_mark-400) , not((roboter(0,_,Pos_x_kicker,_,_,_,1) , Pos_x_kicker > Min_dist)) , set_rule_breaker(0,12).$/;"	l
penalty_yellow_on_right_goal	ssl_refbox_rules_prolog.pl	/^penalty_yellow_on_right_goal :- field('field',Field_width,_,_,_,_,_,_,Penalty_mark) , Min_dist is (Field_width-Penalty_mark-400) , roboter(0,Kicker_id,Pos_x_kicker,_,_,_,1) , roboter(0,Other_id,Pos_x_other,_,_,_,1) , Kicker_id =\\= Other_id , Pos_x_kicker > Min_dist , Pos_x_other > Min_dist , ( ( Pos_x_kicker > Pos_x_other , set_rule_breaker(1,Other_id)) ; ( Pos_x_kicker < Pos_x_other , set_rule_breaker(0,Kicker_id)) ).$/;"	l
pf	particle_filter.h	/^    Particle_Filter* pf;$/;"	m	class:Particle_Filter_Mother	access:private
pf_data	gamearea.h	/^    Pre_Filter_Data* pf_data;$/;"	m	class:Gamearea	access:public
pf_data	particle_filter.h	/^    Pre_Filter_Data* pf_data;$/;"	m	class:Particle_Filter	access:private
pf_data	pf_tester.h	/^    Pre_Filter_Data* pf_data;$/;"	m	class:PF_Tester	access:private
pf_data_mutex	pre_filter_data.h	/^    QMutex pf_data_mutex;$/;"	m	class:Pre_Filter_Data	access:private
pf_tester	gamearea.h	/^    PF_Tester* pf_tester;$/;"	m	class:Gamearea	access:public
play	sslvision.h	/^    bool play;$/;"	m	class:SSLVision	access:private
play_record	sslvision.cc	/^void SSLVision::play_record() {$/;"	f	class:SSLVision	signature:()
play_record	sslvision.h	/^    void play_record();$/;"	p	class:SSLVision	access:public	signature:()
play_speed	log_control.h	/^    double play_speed;$/;"	m	class:Log_Control	access:private
play_speed_save	log_control.h	/^    double play_speed_save;$/;"	m	class:Log_Control	access:private
play_state	pre_filter_data.h	/^    BSmart::Game_States::Play_State play_state;$/;"	m	class:Pre_Filter_Data	access:private
play_state_old	ssl_refbox_rules.h	/^    BSmart::Game_States::Play_State play_state_old;$/;"	m	class:SSL_Refbox_Rules	access:private
point_a	field_hardware.h	/^	BSmart::Pose point_a;$/;"	m	class:Field_Bar	access:public
point_b	field_hardware.h	/^	BSmart::Pose point_b;$/;"	m	class:Field_Bar	access:public
polarbaer	sample.h	/^    BSmart::Double_Vector polarbaer;$/;"	m	class:Ball_Sample	access:private
polarbaer	sample.h	/^    BSmart::Double_Vector polarbaer;$/;"	m	class:Robot_Sample	access:private
pos	sample.h	/^    BSmart::Pose pos;$/;"	m	class:Robot_Sample	access:public
pos	sample.h	/^    BSmart::Pose3D pos;$/;"	m	class:Ball_Sample	access:public
print_ball_percept	particle_filter.h	/^    void print_ball_percept(Ball_Percept);$/;"	p	class:Particle_Filter	access:private	signature:(Ball_Percept)
print_robot_percept	particle_filter.h	/^    void print_robot_percept(Robot_Percept);$/;"	p	class:Particle_Filter	access:private	signature:(Robot_Percept)
process_balls	sslvision.cc	/^void SSLVision::process_balls(Transformed_Percept& trans_perc) {$/;"	f	class:SSLVision	signature:(Transformed_Percept& trans_perc)
process_balls	sslvision.h	/^    void process_balls(Transformed_Percept&);$/;"	p	class:SSLVision	access:private	signature:(Transformed_Percept&)
process_blue	sslvision.cc	/^void SSLVision::process_blue(Transformed_Percept& trans_perc) {$/;"	f	class:SSLVision	signature:(Transformed_Percept& trans_perc)
process_blue	sslvision.h	/^    void process_blue(Transformed_Percept&);$/;"	p	class:SSLVision	access:private	signature:(Transformed_Percept&)
process_yellow	sslvision.cc	/^void SSLVision::process_yellow(Transformed_Percept& trans_perc) {$/;"	f	class:SSLVision	signature:(Transformed_Percept& trans_perc)
process_yellow	sslvision.h	/^    void process_yellow(Transformed_Percept&);$/;"	p	class:SSLVision	access:private	signature:(Transformed_Percept&)
qt_meta_data_Gamearea	debug/moc_gamearea.cpp	/^static const uint qt_meta_data_Gamearea[] = {$/;"	v	file:
qt_meta_data_Gamearea	moc_gamearea.cpp	/^static const uint qt_meta_data_Gamearea[] = {$/;"	v	file:
qt_meta_data_GuiActions	debug/moc_guiactions.cpp	/^static const uint qt_meta_data_GuiActions[] = {$/;"	v	file:
qt_meta_data_GuiActions	moc_guiactions.cpp	/^static const uint qt_meta_data_GuiActions[] = {$/;"	v	file:
qt_meta_data_Log_Control	debug/moc_log_control.cpp	/^static const uint qt_meta_data_Log_Control[] = {$/;"	v	file:
qt_meta_data_Log_Control	moc_log_control.cpp	/^static const uint qt_meta_data_Log_Control[] = {$/;"	v	file:
qt_meta_data_PF_Tester	debug/moc_pf_tester.cpp	/^static const uint qt_meta_data_PF_Tester[] = {$/;"	v	file:
qt_meta_data_PF_Tester	moc_pf_tester.cpp	/^static const uint qt_meta_data_PF_Tester[] = {$/;"	v	file:
qt_meta_data_Particle_Filter	debug/moc_particle_filter.cpp	/^static const uint qt_meta_data_Particle_Filter[] = {$/;"	v	file:
qt_meta_data_Particle_Filter	moc_particle_filter.cpp	/^static const uint qt_meta_data_Particle_Filter[] = {$/;"	v	file:
qt_meta_data_Particle_Filter_Mother	debug/moc_particle_filter.cpp	/^static const uint qt_meta_data_Particle_Filter_Mother[] = {$/;"	v	file:
qt_meta_data_Particle_Filter_Mother	moc_particle_filter.cpp	/^static const uint qt_meta_data_Particle_Filter_Mother[] = {$/;"	v	file:
qt_meta_data_RefboxListener	debug/moc_refboxlistener.cpp	/^static const uint qt_meta_data_RefboxListener[] = {$/;"	v	file:
qt_meta_data_RefboxListener	moc_refboxlistener.cpp	/^static const uint qt_meta_data_RefboxListener[] = {$/;"	v	file:
qt_meta_data_SSLVision	debug/moc_sslvision.cpp	/^static const uint qt_meta_data_SSLVision[] = {$/;"	v	file:
qt_meta_data_SSLVision	moc_sslvision.cpp	/^static const uint qt_meta_data_SSLVision[] = {$/;"	v	file:
qt_meta_data_SSL_Refbox_Rules	debug/moc_ssl_refbox_rules.cpp	/^static const uint qt_meta_data_SSL_Refbox_Rules[] = {$/;"	v	file:
qt_meta_data_SSL_Refbox_Rules	moc_ssl_refbox_rules.cpp	/^static const uint qt_meta_data_SSL_Refbox_Rules[] = {$/;"	v	file:
qt_meta_stringdata_Gamearea	debug/moc_gamearea.cpp	/^static const char qt_meta_stringdata_Gamearea[] = {$/;"	v	file:
qt_meta_stringdata_Gamearea	moc_gamearea.cpp	/^static const char qt_meta_stringdata_Gamearea[] = {$/;"	v	file:
qt_meta_stringdata_GuiActions	debug/moc_guiactions.cpp	/^static const char qt_meta_stringdata_GuiActions[] = {$/;"	v	file:
qt_meta_stringdata_GuiActions	moc_guiactions.cpp	/^static const char qt_meta_stringdata_GuiActions[] = {$/;"	v	file:
qt_meta_stringdata_Log_Control	debug/moc_log_control.cpp	/^static const char qt_meta_stringdata_Log_Control[] = {$/;"	v	file:
qt_meta_stringdata_Log_Control	moc_log_control.cpp	/^static const char qt_meta_stringdata_Log_Control[] = {$/;"	v	file:
qt_meta_stringdata_PF_Tester	debug/moc_pf_tester.cpp	/^static const char qt_meta_stringdata_PF_Tester[] = {$/;"	v	file:
qt_meta_stringdata_PF_Tester	moc_pf_tester.cpp	/^static const char qt_meta_stringdata_PF_Tester[] = {$/;"	v	file:
qt_meta_stringdata_Particle_Filter	debug/moc_particle_filter.cpp	/^static const char qt_meta_stringdata_Particle_Filter[] = {$/;"	v	file:
qt_meta_stringdata_Particle_Filter	moc_particle_filter.cpp	/^static const char qt_meta_stringdata_Particle_Filter[] = {$/;"	v	file:
qt_meta_stringdata_Particle_Filter_Mother	debug/moc_particle_filter.cpp	/^static const char qt_meta_stringdata_Particle_Filter_Mother[] = {$/;"	v	file:
qt_meta_stringdata_Particle_Filter_Mother	moc_particle_filter.cpp	/^static const char qt_meta_stringdata_Particle_Filter_Mother[] = {$/;"	v	file:
qt_meta_stringdata_RefboxListener	debug/moc_refboxlistener.cpp	/^static const char qt_meta_stringdata_RefboxListener[] = {$/;"	v	file:
qt_meta_stringdata_RefboxListener	moc_refboxlistener.cpp	/^static const char qt_meta_stringdata_RefboxListener[] = {$/;"	v	file:
qt_meta_stringdata_SSLVision	debug/moc_sslvision.cpp	/^static const char qt_meta_stringdata_SSLVision[] = {$/;"	v	file:
qt_meta_stringdata_SSLVision	moc_sslvision.cpp	/^static const char qt_meta_stringdata_SSLVision[] = {$/;"	v	file:
qt_meta_stringdata_SSL_Refbox_Rules	debug/moc_ssl_refbox_rules.cpp	/^static const char qt_meta_stringdata_SSL_Refbox_Rules[] = {$/;"	v	file:
qt_meta_stringdata_SSL_Refbox_Rules	moc_ssl_refbox_rules.cpp	/^static const char qt_meta_stringdata_SSL_Refbox_Rules[] = {$/;"	v	file:
qt_metacall	debug/moc_gamearea.cpp	/^int Gamearea::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Gamearea	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	debug/moc_guiactions.cpp	/^int GuiActions::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:GuiActions	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	debug/moc_log_control.cpp	/^int Log_Control::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Log_Control	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	debug/moc_particle_filter.cpp	/^int Particle_Filter::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Particle_Filter	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	debug/moc_particle_filter.cpp	/^int Particle_Filter_Mother::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Particle_Filter_Mother	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	debug/moc_pf_tester.cpp	/^int PF_Tester::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:PF_Tester	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	debug/moc_refboxlistener.cpp	/^int RefboxListener::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:RefboxListener	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	debug/moc_ssl_refbox_rules.cpp	/^int SSL_Refbox_Rules::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:SSL_Refbox_Rules	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	debug/moc_sslvision.cpp	/^int SSLVision::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:SSLVision	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	moc_gamearea.cpp	/^int Gamearea::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Gamearea	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	moc_guiactions.cpp	/^int GuiActions::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:GuiActions	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	moc_log_control.cpp	/^int Log_Control::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Log_Control	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	moc_particle_filter.cpp	/^int Particle_Filter::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Particle_Filter	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	moc_particle_filter.cpp	/^int Particle_Filter_Mother::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:Particle_Filter_Mother	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	moc_pf_tester.cpp	/^int PF_Tester::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:PF_Tester	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	moc_refboxlistener.cpp	/^int RefboxListener::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:RefboxListener	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	moc_ssl_refbox_rules.cpp	/^int SSL_Refbox_Rules::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:SSL_Refbox_Rules	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	moc_sslvision.cpp	/^int SSLVision::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:SSLVision	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacast	debug/moc_gamearea.cpp	/^void *Gamearea::qt_metacast(const char *_clname)$/;"	f	class:Gamearea	signature:(const char *_clname)
qt_metacast	debug/moc_guiactions.cpp	/^void *GuiActions::qt_metacast(const char *_clname)$/;"	f	class:GuiActions	signature:(const char *_clname)
qt_metacast	debug/moc_log_control.cpp	/^void *Log_Control::qt_metacast(const char *_clname)$/;"	f	class:Log_Control	signature:(const char *_clname)
qt_metacast	debug/moc_particle_filter.cpp	/^void *Particle_Filter::qt_metacast(const char *_clname)$/;"	f	class:Particle_Filter	signature:(const char *_clname)
qt_metacast	debug/moc_particle_filter.cpp	/^void *Particle_Filter_Mother::qt_metacast(const char *_clname)$/;"	f	class:Particle_Filter_Mother	signature:(const char *_clname)
qt_metacast	debug/moc_pf_tester.cpp	/^void *PF_Tester::qt_metacast(const char *_clname)$/;"	f	class:PF_Tester	signature:(const char *_clname)
qt_metacast	debug/moc_refboxlistener.cpp	/^void *RefboxListener::qt_metacast(const char *_clname)$/;"	f	class:RefboxListener	signature:(const char *_clname)
qt_metacast	debug/moc_ssl_refbox_rules.cpp	/^void *SSL_Refbox_Rules::qt_metacast(const char *_clname)$/;"	f	class:SSL_Refbox_Rules	signature:(const char *_clname)
qt_metacast	debug/moc_sslvision.cpp	/^void *SSLVision::qt_metacast(const char *_clname)$/;"	f	class:SSLVision	signature:(const char *_clname)
qt_metacast	moc_gamearea.cpp	/^void *Gamearea::qt_metacast(const char *_clname)$/;"	f	class:Gamearea	signature:(const char *_clname)
qt_metacast	moc_guiactions.cpp	/^void *GuiActions::qt_metacast(const char *_clname)$/;"	f	class:GuiActions	signature:(const char *_clname)
qt_metacast	moc_log_control.cpp	/^void *Log_Control::qt_metacast(const char *_clname)$/;"	f	class:Log_Control	signature:(const char *_clname)
qt_metacast	moc_particle_filter.cpp	/^void *Particle_Filter::qt_metacast(const char *_clname)$/;"	f	class:Particle_Filter	signature:(const char *_clname)
qt_metacast	moc_particle_filter.cpp	/^void *Particle_Filter_Mother::qt_metacast(const char *_clname)$/;"	f	class:Particle_Filter_Mother	signature:(const char *_clname)
qt_metacast	moc_pf_tester.cpp	/^void *PF_Tester::qt_metacast(const char *_clname)$/;"	f	class:PF_Tester	signature:(const char *_clname)
qt_metacast	moc_refboxlistener.cpp	/^void *RefboxListener::qt_metacast(const char *_clname)$/;"	f	class:RefboxListener	signature:(const char *_clname)
qt_metacast	moc_ssl_refbox_rules.cpp	/^void *SSL_Refbox_Rules::qt_metacast(const char *_clname)$/;"	f	class:SSL_Refbox_Rules	signature:(const char *_clname)
qt_metacast	moc_sslvision.cpp	/^void *SSLVision::qt_metacast(const char *_clname)$/;"	f	class:SSLVision	signature:(const char *_clname)
queue_filled	sslvision.h	/^    bool queue_filled;$/;"	m	class:SSLVision	access:private
radius	field_hardware.h	/^	int radius;$/;"	m	class:Field_Goalpost	access:public
random	sample.h	/^    double random;$/;"	m	class:Ball_Sample	access:private
random_ball_sample	particle_filter.cc	/^Ball_Sample Particle_Filter::random_ball_sample() {$/;"	f	class:Particle_Filter	signature:()
random_ball_sample	particle_filter.h	/^    Ball_Sample random_ball_sample();$/;"	p	class:Particle_Filter	access:private	signature:()
random_number	particle_filter.cc	/^int Particle_Filter::random_number(int bottom, int top) {$/;"	f	class:Particle_Filter	signature:(int bottom, int top)
random_number	particle_filter.h	/^    int random_number(int bottom, int top);$/;"	p	class:Particle_Filter	access:private	signature:(int bottom, int top)
random_robot_sample	particle_filter.cc	/^Robot_Sample Particle_Filter::random_robot_sample() {$/;"	f	class:Particle_Filter	signature:()
random_robot_sample	particle_filter.h	/^    Robot_Sample random_robot_sample();$/;"	p	class:Particle_Filter	access:private	signature:()
rec	sslvision.h	/^    bool rec;$/;"	m	class:SSLVision	access:private
record	sslvision.cc	/^void SSLVision::record() {$/;"	f	class:SSLVision	signature:()
record	sslvision.h	/^    void record();$/;"	p	class:SSLVision	access:public	signature:()
record_log	ui_GuiControls.h	/^    QPushButton *record_log;$/;"	m	class:Ui_GuiControls	access:public
recv	sslvision.cc	/^int SSLVision::recv(SSL_DetectionFrame& frame) {$/;"	f	class:SSLVision	signature:(SSL_DetectionFrame& frame)
recv	sslvision.h	/^    int  recv(SSL_DetectionFrame&);$/;"	p	class:SSLVision	access:private	signature:(SSL_DetectionFrame&)
reduce_visibility	filter_data.cc	/^void Filter_Data::reduce_visibility() {$/;"	f	class:Filter_Data	signature:()
reduce_visibility	filter_data.h	/^	void reduce_visibility();$/;"	p	class:Filter_Data	access:public	signature:()
refbox_cmd	pre_filter_data.h	/^    char refbox_cmd;$/;"	m	class:Pre_Filter_Data	access:private
refbox_cmd	sslvision.h	/^    std::string refbox_cmd;$/;"	m	struct:Transformed_Percept	access:public
refbox_cmd_alt	ssl_refbox_rules.h	/^    char refbox_cmd_alt;$/;"	m	class:SSL_Refbox_Rules	access:private
refbox_listener	gamearea.h	/^    RefboxListener* refbox_listener;$/;"	m	class:Gamearea	access:public
resample	particle_filter.cc	/^void Particle_Filter::resample() {$/;"	f	class:Particle_Filter	signature:()
resample	particle_filter.h	/^    void resample();$/;"	p	class:Particle_Filter	access:public	signature:()
reset	log_control.cc	/^void Log_Control::reset(int size) {$/;"	f	class:Log_Control	signature:(int size)
reset	log_control.h	/^    void reset(int);$/;"	p	class:Log_Control	access:public	signature:(int)
reset_data	sslvision.cc	/^void SSLVision::reset_data(int cam) {$/;"	f	class:SSLVision	signature:(int cam)
reset_data	sslvision.h	/^    void reset_data(int);$/;"	p	class:SSLVision	access:private	signature:(int)
reset_speed	pf_tester.cc	/^void PF_Tester::reset_speed() {$/;"	f	class:PF_Tester	signature:()
reset_speed	pf_tester.h	/^    void reset_speed();$/;"	p	class:PF_Tester	access:private	signature:()
reset_ten_seconds	ssl_refbox_rules_prolog.pl	/^reset_ten_seconds :- retract(timestamp('ten_seconds',_)) , assert(timestamp('ten_seconds',0)).$/;"	l
reset_three_seconds	ssl_refbox_rules_prolog.pl	/^reset_three_seconds :- retract(timestamp('three_seconds',_)) , assert(timestamp('three_seconds',0)).$/;"	l
reset_total_play_time_start	ssl_refbox_rules_prolog.pl	/^reset_total_play_time_start :- retract(timestamp('total_play_time_start',_)) , assert(timestamp('total_play_time_start',0)).$/;"	l
reset_touch	ssl_refbox_rules_prolog.pl	/^reset_touch :- play_state('local_play_state',Next) , set_touch(Next) , !.$/;"	l
reset_transformed_percept	sslvision.cc	/^void SSLVision::reset_transformed_percept(Transformed_Percept& trans_perc) {$/;"	f	class:SSLVision	signature:(Transformed_Percept& trans_perc)
reset_transformed_percept	sslvision.h	/^    void reset_transformed_percept(Transformed_Percept&);$/;"	p	class:SSLVision	access:private	signature:(Transformed_Percept&)
resizeGL	gamearea.cc	/^void Gamearea::resizeGL(int width, int height) {$/;"	f	class:Gamearea	signature:(int width, int height)
resizeGL	gamearea.h	/^	void resizeGL(int, int);$/;"	p	class:Gamearea	access:public	signature:(int, int)
resizeSlider	debug/moc_gamearea.cpp	/^void Gamearea::resizeSlider(int _t1)$/;"	f	class:Gamearea	signature:(int _t1)
resizeSlider	gamearea.h	/^    void resizeSlider(int);$/;"	p	class:Gamearea	access:public	signature:(int)
resizeSlider	guiactions.cc	/^void GuiActions::resizeSlider(int width) {$/;"	f	class:GuiActions	signature:(int width)
resizeSlider	guiactions.h	/^    void resizeSlider(int);$/;"	p	class:GuiActions	access:public	signature:(int)
resizeSlider	moc_gamearea.cpp	/^void Gamearea::resizeSlider(int _t1)$/;"	f	class:Gamearea	signature:(int _t1)
retranslateUi	ui_GuiControls.h	/^    void retranslateUi(QMainWindow *GuiControls)$/;"	f	class:Ui_GuiControls	access:public	signature:(QMainWindow *GuiControls)
robot	particle_filter.h	/^    BSmart::Int_Vector robot;$/;"	m	struct:Last_Contact	access:public
robot_direction	pre_filter_data.h	/^    BSmart::Pose robot_direction[Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	class:Pre_Filter_Data	access:private
robot_direction	sslvision.h	/^    BSmart::Pose robot_direction[Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	struct:Transformed_Percept	access:public
robot_id	field_hardware.h	/^	int robot_id;$/;"	m	struct:Hitpoint	access:public
robot_line	sample.h	/^    BSmart::Line robot_line;$/;"	m	class:Robot_Sample	access:private
robot_models	filter_data.h	/^	Robot_Sample robot_models[NUMBER_OF_TEAMS][NUMBER_OF_IDS];$/;"	m	class:Filter_Data	access:private
robot_models	glextra.h	/^    Robot_Sample_List robot_models;$/;"	m	class:GLExtra	access:private
robot_models	particle_filter.h	/^    Robot_Sample_List robot_models;$/;"	m	class:Particle_Filter	access:private
robot_noise	sample.cc	/^const double Robot_Sample::robot_noise = 5.; \/\/ mm$/;"	m	class:Robot_Sample	file:
robot_noise	sample.h	/^    static const double robot_noise;$/;"	m	class:Robot_Sample	access:private
robot_obstacles	particle_filter.h	/^    Robot_Sample_List robot_obstacles;$/;"	m	class:Particle_Filter	access:private
robot_r	sslvision.h	/^    int robot_r;$/;"	m	class:SSLVision	access:private
robot_samples	filter_data.h	/^	Robot_Sample_List robot_samples[NUMBER_OF_TEAMS][NUMBER_OF_IDS];$/;"	m	class:Filter_Data	access:private
robot_samples	glextra.h	/^    Robot_Sample_List robot_samples;$/;"	m	class:GLExtra	access:private
robot_samples_new	particle_filter.h	/^    Robot_Sample_List robot_samples_new;$/;"	m	class:Particle_Filter	access:private
robot_samples_old	particle_filter.h	/^    Robot_Sample_List robot_samples_old;$/;"	m	class:Particle_Filter	access:private
robot_speed_noise	sample.cc	/^const double Robot_Sample::robot_speed_noise = 0.1; \/\/ m\/s$/;"	m	class:Robot_Sample	file:
robot_speed_noise	sample.h	/^    static const double robot_speed_noise;$/;"	m	class:Robot_Sample	access:private
robots	pre_filter_data.h	/^    Robot_Percept_List robots[2][Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	class:Pre_Filter_Data	access:private
robots	sslvision.h	/^    Robot_Percept_List robots[Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	struct:Transformed_Percept	access:public
rotation_known	percept.h	/^    bool rotation_known;$/;"	m	class:Robot_Percept	access:public
rule_breaker	filter_data.h	/^	BSmart::Int_Vector rule_breaker;$/;"	m	struct:Broken_Rule	access:public
rule_eighteen	ssl_refbox_rules_prolog.pl	/^rule_eighteen :- get_local_play_state(2) , goalie('left_goalie',Team,Id1) , roboter(Team,Id2,Pos_x2,Pos_y2,_,_,1) , Id1 =\\= Id2 , distance_to_left_def_area(Pos_x2,Pos_y2,Dist) , Dist < 0 , set_rule_breaker(Team,Id2).$/;"	l
rule_eighteen	ssl_refbox_rules_prolog.pl	/^rule_eighteen :- get_local_play_state(2) , goalie('right_goalie',Team,Id1) , roboter(Team,Id2,Pos_x2,Pos_y2,_,_,1) , Id1 =\\= Id2 , distance_to_right_def_area(Pos_x2,Pos_y2,Dist) , Dist < 0 , set_rule_breaker(Team,Id2).$/;"	l
rule_fifteen	ssl_refbox_rules_prolog.pl	/^rule_fifteen :- rule_fifteen_before , rule_fifteen_distance_to_ball.$/;"	l
rule_fifteen	ssl_refbox_rules_prolog.pl	/^rule_fifteen :- rule_fifteen_before , rule_fifteen_distance_to_opp_defence_area.$/;"	l
rule_fifteen_before	ssl_refbox_rules_prolog.pl	/^rule_fifteen_before :- freekick_blue ; freekick_yellow.$/;"	l
rule_fifteen_distance_to_ball	ssl_refbox_rules_prolog.pl	/^rule_fifteen_distance_to_ball :- roboter(Team,ID,Pos_x_bot,Pos_y_bot,_,_,1) , Team =:= 0 , freekick_blue , ball_location('ball',Pos_x_ball,Pos_y_ball,_,_,_,_) , distance(Pos_x_bot,Pos_y_bot,Pos_x_ball,Pos_y_ball,Dist) , Dist < 500 , set_rule_breaker(Team,ID).$/;"	l
rule_fifteen_distance_to_ball	ssl_refbox_rules_prolog.pl	/^rule_fifteen_distance_to_ball :- roboter(Team,ID,Pos_x_bot,Pos_y_bot,_,_,1) , Team =:= 1 , freekick_yellow , ball_location('ball',Pos_x_ball,Pos_y_ball,_,_,_,_) , distance(Pos_x_bot,Pos_y_bot,Pos_x_ball,Pos_y_ball,Dist) , Dist < 500 , set_rule_breaker(Team,ID).$/;"	l
rule_fifteen_distance_to_opp_defence_area	ssl_refbox_rules_prolog.pl	/^rule_fifteen_distance_to_opp_defence_area :- roboter(Team,ID,Pos_x,Pos_y,_,_,1) ,$/;"	l
rule_fourteen	ssl_refbox_rules_prolog.pl	/^rule_fourteen :- rule_fourteen_before , get_left(Left_team) , roboter(Team,ID,Pos_x,_,_,_,1) , ( (Left_team =:= Team , Pos_x > 0) ; (Left_team =\\= Team , Pos_x < 0) ) , set_rule_breaker(Team,ID).$/;"	l
rule_fourteen_before	ssl_refbox_rules_prolog.pl	/^rule_fourteen_before :- kickoff_blue ; kickoff_yellow.$/;"	l
rule_fourtytwo	ssl_refbox_rules_prolog.pl	/^rule_fourtytwo :- check_offside(1) , retract(check_offside(_)) , assert(check_offside(0)) , rule_fourtytwo_offside.$/;"	l
rule_fourtytwo_offside	ssl_refbox_rules_prolog.pl	/^rule_fourtytwo_offside :- ball_status('ball',Ltt,Ltid,_,_) , get_left(Ltt) , roboter(Ltt,Ltid,Pos_xt,_,_,_,1) , roboter(Ltt,ID1,Pos_x1,Pos_y1,_,_,1) , Ltid =\\= ID1 , Pos_x1 > Pos_xt , Pos_x1 > 0 , not(( roboter(Team,ID2,Pos_x2,_,_,_,1) , Team =\\= Ltt , roboter(Team,ID3,Pos_x3,_,_,_,1) , ID2 =\\= ID3 , Pos_x2 > Pos_x1 , Pos_x3 > Pos_x1 )) , set_rule_breaker(Ltt,ID1) , set_freekick_pos(Pos_x1,Pos_y1,0).$/;"	l
rule_fourtytwo_offside	ssl_refbox_rules_prolog.pl	/^rule_fourtytwo_offside :- ball_status('ball',Ltt,Ltid,_,_) , get_left(Team) , Team =\\= Ltt , roboter(Ltt,Ltid,Pos_xt,_,_,_,1) , roboter(Ltt,ID1,Pos_x1,Pos_y1,_,_,1) , Ltid =\\= ID1 , Pos_x1 < Pos_xt , Pos_x1 < 0 , not(( roboter(Team,ID2,Pos_x2,_,_,_,1) , roboter(Team,ID3,Pos_x3,_,_,_,1) , ID2 =\\= ID3 , Pos_x2 < Pos_x1 , Pos_x3 < Pos_x1 )) , set_rule_breaker(Ltt,ID1) , set_freekick_pos(Pos_x1,Pos_y1,0).$/;"	l
rule_nineteen	ssl_refbox_rules_prolog.pl	/^rule_nineteen :- get_local_play_state(2) , goalie('left_goalie',Team1,Id1) , roboter(Team1,Id1,Pos_x1,Pos_y1,_,_,1) , roboter(Team2,Id2,Pos_x2,Pos_y2,_,_,1) , Team1 =\\= Team2 , distance_to_left_def_area(Pos_x2,Pos_y2,Dist1) , Dist1 < 0 , distance(Pos_x1,Pos_y1,Pos_x2,Pos_y2,Dist2) , Dist2 < 200 , set_rule_breaker(Team2,Id2) , Freekick_x is (Pos_x2 + ((Pos_x1-Pos_x2)\/2)) , Freekick_y is (Pos_y2 + ((Pos_y1-Pos_y2)\/2)) , set_freekick_pos(Freekick_x,Freekick_y,0) , New is 5+(Team1*6) , set_next_play_state(New).$/;"	l
rule_nineteen	ssl_refbox_rules_prolog.pl	/^rule_nineteen :- get_local_play_state(2) , goalie('right_goalie',Team1,Id1) , roboter(Team1,Id1,Pos_x1,Pos_y1,_,_,1) , roboter(Team2,Id2,Pos_x2,Pos_y2,_,_,1) , Team1 =\\= Team2 , distance_to_right_def_area(Pos_x2,Pos_y2,Dist1) , Dist1 < 0 , distance(Pos_x1,Pos_y1,Pos_x2,Pos_y2,Dist2) , Dist2 < 200 , set_rule_breaker(Team2,Id2) , Freekick_x is (Pos_x2 + ((Pos_x1-Pos_x2)\/2)) , Freekick_y is (Pos_y2 + ((Pos_y1-Pos_y2)\/2)) , set_freekick_pos(Freekick_x,Freekick_y,0) , New is 5+(Team1*6) , set_next_play_state(New).$/;"	l
rule_number	filter_data.h	/^	int rule_number;$/;"	m	struct:Broken_Rule	access:public
rule_one	ssl_refbox_rules_prolog.pl	/^rule_one :- rule_one(0) ; rule_one(1).$/;"	l
rule_seventeen	ssl_refbox_rules_prolog.pl	/^rule_seventeen :- rule_seventeen_positions.$/;"	l
rule_seventeen_positions	ssl_refbox_rules_prolog.pl	/^rule_seventeen_positions :- get_left(0) , penalty_blue , penalty_blue_on_left_goal.$/;"	l
rule_seventeen_positions	ssl_refbox_rules_prolog.pl	/^rule_seventeen_positions :- get_left(0) , penalty_yellow , penalty_yellow_on_right_goal.$/;"	l
rule_seventeen_positions	ssl_refbox_rules_prolog.pl	/^rule_seventeen_positions :- get_left(1) , penalty_blue , penalty_blue_on_right_goal.$/;"	l
rule_seventeen_positions	ssl_refbox_rules_prolog.pl	/^rule_seventeen_positions :- get_left(1) , penalty_yellow , penalty_yellow_on_left_goal.$/;"	l
rule_sixteen	ssl_refbox_rules_prolog.pl	/^rule_sixteen :- get_local_play_state(1) , roboter(Team,ID,Pos_x_bot,Pos_y_bot,_,_,1) , ball_location('ball',Pos_x_ball,Pos_y_ball,_,_,_,_) , distance(Pos_x_bot,Pos_y_bot,Pos_x_ball,Pos_y_ball,Dist) , Dist < 500 , set_rule_breaker(Team,ID).$/;"	l
rule_thirty	ssl_refbox_rules_prolog.pl	/^rule_thirty :- rule_thirty_before , field('field',Field_width,Field_height,_,_,_,_,_,_) , ball_location('ball',Pos_x,Pos_y,_,_,_,_) , not(ball_in_game(Field_width,Field_height,Pos_x,Pos_y)) , rule_thirty_after.$/;"	l
rule_thirty_after	ssl_refbox_rules_prolog.pl	/^rule_thirty_after :- (set_freekick_pos_throw_in ; set_freekick_pos_goal_out) , ball_status('ball',Ltt,Ltid,_,_) , set_rule_breaker(Ltt,Ltid).$/;"	l
rule_thirty_before	ssl_refbox_rules_prolog.pl	/^rule_thirty_before :- get_local_play_state(2).$/;"	l
rule_three	ssl_refbox_rules_prolog.pl	/^rule_three :- (check_left_goalie ; check_right_goalie).$/;"	l
rule_twentyeight	ssl_refbox_rules_prolog.pl	/^rule_twentyeight :- get_timeout_start_blue(Start) , Start =\\= 0 , get_timestamp(Timestamp) , get_timeout_time_blue(Old) , New is Old+(Timestamp-Start) , New > 300000.$/;"	l
rule_twentyeight	ssl_refbox_rules_prolog.pl	/^rule_twentyeight :- get_timeout_start_yellow(Start) , Start =\\= 0 , get_timestamp(Timestamp) , get_timeout_time_yellow(Old) , New is Old+(Timestamp-Start) , New > 300000.$/;"	l
rule_twentyfour	ssl_refbox_rules_prolog.pl	/^rule_twentyfour :- get_total_play_time_start(Start) , Start =\\= 0 , get_total_play_time_total(Total) , get_total_play_time_start(Start) , get_timestamp(Now) , Sum is Total+(Now-Start) , Sum > 600000.$/;"	l
rule_twentynine	ssl_refbox_rules_prolog.pl	/^rule_twentynine :- rule_twentynine_before , second_touch , ((ball_in_right_goal , rule_twentynine_after(1)) ; (ball_in_left_goal , rule_twentynine_after(0))).$/;"	l
rule_twentynine_before	ssl_refbox_rules_prolog.pl	/^rule_twentynine_before :- get_local_play_state(2).$/;"	l
rule_twentyseven	ssl_refbox_rules_prolog.pl	/^rule_twentyseven :- get_timeout_start_blue(Start) , Start =\\= 0 , timeouts('timeouts',_,Blue) , Blue > 4.$/;"	l
rule_twentyseven	ssl_refbox_rules_prolog.pl	/^rule_twentyseven :- get_timeout_start_yellow(Start) , Start =\\= 0 , timeouts('timeouts',Yellow,_) , Yellow > 4.$/;"	l
rule_twentythree	ssl_refbox_rules_prolog.pl	/^rule_twentythree :- get_local_play_state(PS) , ( (PS =:= 3) ; (PS =:= 4) ; (PS =:= 5) ; (PS =:= 6) ; (PS =:= 9) ; (PS =:= 10) ; (PS =:= 11) ; (PS =:= 12) ) , get_ten_seconds(Ten) , Ten =\\= 0 , get_timestamp(Time) , Diff is Time-Ten , Diff > 10000 , set_local_play_state(1) , set_local_next_play_state(2).$/;"	l
rule_twentytwo	ssl_refbox_rules_prolog.pl	/^rule_twentytwo :- get_local_play_state(PS) , ( (PS =:= 7) ; (PS =:= 8) ; (PS =:= 13) ; (PS =:= 14) ) , ball_status('ball',Ltt,Ltid,_,Touch) , Touch > 0 , set_local_play_state(1) , set_local_next_play_state(PS), set_rule_breaker(Ltt,Ltid).$/;"	l
rule_zero	ssl_refbox_rules_prolog.pl	/^rule_zero :- get_global_play_state(X) , (get_local_play_state(X) ; get_local_play_state(2)).$/;"	l
rulenames	glextra.cc	/^const std::string GLExtra::rulenames[42] = { "Robot Number exceeded", \/\/1$/;"	m	class:GLExtra	file:
rulenames	glextra.h	/^    static const std::string rulenames[42];$/;"	m	class:GLExtra	access:public
rules	gamearea.h	/^    SSL_Refbox_Rules* rules;$/;"	m	class:Gamearea	access:public
rules_wait_condition	gamearea.h	/^    QWaitCondition* rules_wait_condition;$/;"	m	class:Gamearea	access:public
rules_wait_condition	particle_filter.h	/^    QWaitCondition* rules_wait_condition;$/;"	m	class:Particle_Filter_Mother	access:private
rules_wait_condition	ssl_refbox_rules.h	/^    QWaitCondition* rules_wait_condition;$/;"	m	class:SSL_Refbox_Rules	access:private
run	particle_filter.cc	/^void Particle_Filter_Mother::run() {$/;"	f	class:Particle_Filter_Mother	signature:()
run	particle_filter.h	/^    void run();$/;"	p	class:Particle_Filter_Mother	access:public	signature:()
run	pf_tester.cc	/^void PF_Tester::run() {$/;"	f	class:PF_Tester	signature:()
run	pf_tester.h	/^    void run();$/;"	p	class:PF_Tester	access:public	signature:()
run	refboxlistener.cc	/^void RefboxListener::run() {$/;"	f	class:RefboxListener	signature:()
run	refboxlistener.h	/^    void run();$/;"	p	class:RefboxListener	access:public	signature:()
run	ssl_refbox_rules.cc	/^void SSL_Refbox_Rules::run() {$/;"	f	class:SSL_Refbox_Rules	signature:()
run	ssl_refbox_rules.h	/^    void run();$/;"	p	class:SSL_Refbox_Rules	access:public	signature:()
run	sslvision.cc	/^void SSLVision::run() {$/;"	f	class:SSLVision	signature:()
run	sslvision.h	/^    void run();$/;"	p	class:SSLVision	access:public	signature:()
samples_mutex	filter_data.h	/^	QMutex samples_mutex;$/;"	m	class:Filter_Data	access:private
second_touch	ssl_refbox_rules_prolog.pl	/^second_touch :- ball_status('ball',Ltt,Ltid,Status,X) , Status =\\= 3 , X > 0 , set_rule_breaker(Ltt,Ltid).$/;"	l
sensor_update	particle_filter.cc	/^void Particle_Filter::sensor_update() {$/;"	f	class:Particle_Filter	signature:()
sensor_update	particle_filter.h	/^    void sensor_update(); \/\/ update weighting$/;"	p	class:Particle_Filter	access:public	signature:()
set_ball_direction_after	pre_filter_data.cc	/^void Pre_Filter_Data::set_ball_direction_after($/;"	f	class:Pre_Filter_Data	signature:( const BSmart::Pose& ball_direction_after_)
set_ball_direction_after	pre_filter_data.h	/^    void set_ball_direction_after(const BSmart::Pose& ball_direction_after_);$/;"	p	class:Pre_Filter_Data	access:public	signature:(const BSmart::Pose& ball_direction_after_)
set_ball_direction_before	pre_filter_data.cc	/^void Pre_Filter_Data::set_ball_direction_before($/;"	f	class:Pre_Filter_Data	signature:( const BSmart::Pose& ball_direction_before_)
set_ball_direction_before	pre_filter_data.h	/^    void set_ball_direction_before(const BSmart::Pose& ball_direction_before_);$/;"	p	class:Pre_Filter_Data	access:public	signature:(const BSmart::Pose& ball_direction_before_)
set_ball_framenumber	pre_filter_data.cc	/^void Pre_Filter_Data::set_ball_framenumber(int camID, unsigned int framenumber) {$/;"	f	class:Pre_Filter_Data	signature:(int camID, unsigned int framenumber)
set_ball_framenumber	pre_filter_data.h	/^    void set_ball_framenumber(int camID, unsigned int framenumber);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID, unsigned int framenumber)
set_ball_model	filter_data.cc	/^void Filter_Data::set_ball_model(const Ball_Sample& model) {$/;"	f	class:Filter_Data	signature:(const Ball_Sample& model)
set_ball_model	filter_data.h	/^	void set_ball_model(const Ball_Sample&);$/;"	p	class:Filter_Data	access:public	signature:(const Ball_Sample&)
set_ball_samples	filter_data.cc	/^void Filter_Data::set_ball_samples(const Ball_Sample_List& balls) {$/;"	f	class:Filter_Data	signature:(const Ball_Sample_List& balls)
set_ball_samples	filter_data.h	/^	void set_ball_samples(const Ball_Sample_List&);$/;"	p	class:Filter_Data	access:public	signature:(const Ball_Sample_List&)
set_ball_timestamp	pre_filter_data.cc	/^void Pre_Filter_Data::set_ball_timestamp(int camID,$/;"	f	class:Pre_Filter_Data	signature:(int camID, const BSmart::Time_Value& timestamp)
set_ball_timestamp	pre_filter_data.h	/^    void set_ball_timestamp(int camID, const BSmart::Time_Value& timestamp);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID, const BSmart::Time_Value& timestamp)
set_balls	pre_filter_data.cc	/^void Pre_Filter_Data::set_balls(int camID, const Ball_Percept_List& pBalls) {$/;"	f	class:Pre_Filter_Data	signature:(int camID, const Ball_Percept_List& pBalls)
set_balls	pre_filter_data.h	/^    void set_balls(int camID, const Ball_Percept_List& pBalls);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID, const Ball_Percept_List& pBalls)
set_blue_timeout_end	ssl_refbox_rules_prolog.pl	/^set_blue_timeout_end :- timestamp('timeout_start_blue',Start) , timestamp('timestamp',Timestamp) , not(timestamp('timeout_time_blue',_)) , New is Timestamp-Start , assert(timestamp('timeout_time_blue',New)) , !.$/;"	l
set_blue_timeout_end	ssl_refbox_rules_prolog.pl	/^set_blue_timeout_end :- timestamp('timeout_start_blue',Start) , timestamp('timestamp',Timestamp) , timestamp('timeout_time_blue',Old) , New is Old+(Timestamp-Start) , retract(timestamp('timeout_time_blue',_)) , assert(timestamp('timeout_time_blue',New)).$/;"	l
set_broken_rules	filter_data.cc	/^void Filter_Data::set_broken_rules(std::vector<Broken_Rule> broken_rules_) {$/;"	f	class:Filter_Data	signature:(std::vector<Broken_Rule> broken_rules_)
set_broken_rules	filter_data.h	/^	void set_broken_rules(std::vector<Broken_Rule>);$/;"	p	class:Filter_Data	access:public	signature:(std::vector<Broken_Rule>)
set_camera_pos	pre_filter_data.cc	/^void Pre_Filter_Data::set_camera_pos(int camID, const BSmart::Pose3D& new_pos) {$/;"	f	class:Pre_Filter_Data	signature:(int camID, const BSmart::Pose3D& new_pos)
set_camera_pos	pre_filter_data.h	/^    void set_camera_pos(int camID, const BSmart::Pose3D& new_pos);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID, const BSmart::Pose3D& new_pos)
set_current_ball_percepts	filter_data.cc	/^void Filter_Data::set_current_ball_percepts($/;"	f	class:Filter_Data	signature:( const Ball_Percept_List& ball_percepts)
set_current_ball_percepts	filter_data.h	/^	void set_current_ball_percepts(const Ball_Percept_List& ball_percepts);$/;"	p	class:Filter_Data	access:public	signature:(const Ball_Percept_List& ball_percepts)
set_current_robot_percepts	filter_data.cc	/^void Filter_Data::set_current_robot_percepts(int team, int id,$/;"	f	class:Filter_Data	signature:(int team, int id, const Robot_Percept_List& cur_robots)
set_current_robot_percepts	filter_data.h	/^	void set_current_robot_percepts(int, int, const Robot_Percept_List&);$/;"	p	class:Filter_Data	access:public	signature:(int, int, const Robot_Percept_List&)
set_frame	filter_data.cc	/^void Filter_Data::set_frame(const int& frame_) {$/;"	f	class:Filter_Data	signature:(const int& frame_)
set_frame	filter_data.h	/^	void set_frame(const int&);$/;"	p	class:Filter_Data	access:public	signature:(const int&)
set_freekick_pos_goal_out	ssl_refbox_rules_prolog.pl	/^set_freekick_pos_goal_out :- ball_location('ball',Pos_x,Pos_y,_,_,_,_) , ball_status('ball',Last_touched_team,_,_,_) , (goal_out_left(Pos_x,Pos_y,Last_touched_team) ; goal_out_right(Pos_x,Pos_y,Last_touched_team)) , Next is (11-(Last_touched_team*6)) , set_next_play_state(Next).$/;"	l
set_freekick_pos_throw_in	ssl_refbox_rules_prolog.pl	/^set_freekick_pos_throw_in :- ball_location('ball',Pos_x,Pos_y,_,_,_,_) , ball_status('ball',Last_touched_team,_,_,_) , (throw_in_above(Pos_x,Pos_y) ; throw_in_below(Pos_x,Pos_y)) , Next is (12-(Last_touched_team*6)) , set_next_play_state(Next).$/;"	l
set_internal_play_states	filter_data.cc	/^void Filter_Data::set_internal_play_states($/;"	f	class:Filter_Data	signature:( BSmart::Int_Vector internal_play_states_)
set_internal_play_states	filter_data.h	/^	void set_internal_play_states(BSmart::Int_Vector);$/;"	p	class:Filter_Data	access:public	signature:(BSmart::Int_Vector)
set_newest_frame	pre_filter_data.cc	/^void Pre_Filter_Data::set_newest_frame(int frame) {$/;"	f	class:Pre_Filter_Data	signature:(int frame)
set_newest_frame	pre_filter_data.h	/^    void set_newest_frame(int);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int)
set_real_play_time_end	ssl_refbox_rules_prolog.pl	/^set_real_play_time_end :- timestamp('real_play_time_start',Start) , timestamp('timestamp',Timestamp) , not(timestamp('real_play_time_total',_)) , New is Timestamp-Start , assert(timestamp('real_play_time_total',New)) , !.$/;"	l
set_real_play_time_end	ssl_refbox_rules_prolog.pl	/^set_real_play_time_end :- timestamp('real_play_time_start',Start) , timestamp('timestamp',Timestamp) , timestamp('real_play_time_total',Old) , New is Old+(Timestamp-Start) , retract(timestamp('real_play_time_total',_)) , assert(timestamp('real_play_time_total',New)).$/;"	l
set_real_play_time_start	ssl_refbox_rules_prolog.pl	/^set_real_play_time_start :- timestamp('timestamp',Timestamp) , not(timestamp('real_play_time_start',_)) , assert(timestamp('real_play_time_start',Timestamp)) , !.$/;"	l
set_real_play_time_start	ssl_refbox_rules_prolog.pl	/^set_real_play_time_start :- timestamp('timestamp',Timestamp) , retract(timestamp('real_play_time_start',_)) , assert(timestamp('real_play_time_start',Timestamp)).$/;"	l
set_robot_direction	pre_filter_data.cc	/^void Pre_Filter_Data::set_robot_direction(int team, int id,$/;"	f	class:Pre_Filter_Data	signature:(int team, int id, const BSmart::Pose& robot_direction_)
set_robot_direction	pre_filter_data.h	/^    void set_robot_direction(int team, int id, const BSmart::Pose& robot_direction_);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int team, int id, const BSmart::Pose& robot_direction_)
set_robot_model	filter_data.cc	/^void Filter_Data::set_robot_model(int team, int id, const Robot_Sample& model) {$/;"	f	class:Filter_Data	signature:(int team, int id, const Robot_Sample& model)
set_robot_model	filter_data.h	/^	void set_robot_model(int, int, const Robot_Sample&);$/;"	p	class:Filter_Data	access:public	signature:(int, int, const Robot_Sample&)
set_robot_samples	filter_data.cc	/^void Filter_Data::set_robot_samples(int team, int id,$/;"	f	class:Filter_Data	signature:(int team, int id, const Robot_Sample_List& robots)
set_robot_samples	filter_data.h	/^	void set_robot_samples(int, int, const Robot_Sample_List&);$/;"	p	class:Filter_Data	access:public	signature:(int, int, const Robot_Sample_List&)
set_robot_seen	filter_data.cc	/^void Filter_Data::set_robot_seen(int team, int id) {$/;"	f	class:Filter_Data	signature:(int team, int id)
set_robot_seen	filter_data.h	/^	void set_robot_seen(int, int);$/;"	p	class:Filter_Data	access:public	signature:(int, int)
set_robots	pre_filter_data.cc	/^void Pre_Filter_Data::set_robots(int camID, int team, int id,$/;"	f	class:Pre_Filter_Data	signature:(int camID, int team, int id, const Robot_Percept_List& pRobots)
set_robots	pre_filter_data.h	/^    void set_robots(int camID, int team, int id, const Robot_Percept_List& pRobots);$/;"	p	class:Pre_Filter_Data	access:public	signature:(int camID, int team, int id, const Robot_Percept_List& pRobots)
set_running	ssl_refbox_rules_prolog.pl	/^set_running :- get_local_play_state(Now) , ball_status('ball',Ltt,_,_,Touch) , ( (( Now =:= (3+(abs(Ltt-1)*6)) ; Now =:= (4+(abs(Ltt-1)*6)) ; Now =:= (5+(abs(Ltt-1)*6)) ) , Touch >= 1 ) ; (Now =:= (6+(abs(Ltt-1)*6)) , Touch >= 0 )) , set_local_play_state(1) , set_local_next_play_state(Now) , reset_ten_seconds.$/;"	l
set_running	ssl_refbox_rules_prolog.pl	/^set_running :- get_local_play_state(Now) , ball_status('ball',Ltt,_,_,Touch) , ( ((Now =:= (3+(Ltt*6)) ; Now =:= (4+(Ltt*6)) ; Now =:= (5+(Ltt*6)) ) , Touch >= 1) ; (Now =:= (6+(Ltt*6)) , Touch >= 0 ) ) , set_local_play_state(2) , set_real_play_time_start , reset_ten_seconds.$/;"	l
set_ten_seconds	ssl_refbox_rules_prolog.pl	/^set_ten_seconds :- timestamp('timestamp',Timestamp) , not(timestamp('ten_seconds',_)) , assert(timestamp('ten_seconds',Timestamp)) , !.$/;"	l
set_ten_seconds	ssl_refbox_rules_prolog.pl	/^set_ten_seconds :- timestamp('timestamp',Timestamp) , retract(timestamp('ten_seconds',_)) , assert(timestamp('ten_seconds',Timestamp)).$/;"	l
set_three_seconds	ssl_refbox_rules_prolog.pl	/^set_three_seconds :- timestamp('timestamp',Timestamp) , not(timestamp('three_seconds',_)) , assert(timestamp('three_seconds',Timestamp)) , !.$/;"	l
set_three_seconds	ssl_refbox_rules_prolog.pl	/^set_three_seconds :- timestamp('timestamp',Timestamp) , retract(timestamp('three_seconds',_)) , assert(timestamp('three_seconds',Timestamp)).$/;"	l
set_timeout_start_blue	ssl_refbox_rules_prolog.pl	/^set_timeout_start_blue :- timestamp('timestamp',Timestamp) , not(timestamp('timeout_start_blue',_)) , assert(timestamp('timeout_start_blue',Timestamp)) , !.$/;"	l
set_timeout_start_blue	ssl_refbox_rules_prolog.pl	/^set_timeout_start_blue :- timestamp('timestamp',Timestamp) , retract(timestamp('timeout_start_blue',_)) , assert(timestamp('timeout_start_blue',Timestamp)).$/;"	l
set_timeout_start_yellow	ssl_refbox_rules_prolog.pl	/^set_timeout_start_yellow :- timestamp('timestamp',Timestamp) , not(timestamp('timeout_start_yellow',_)) , assert(timestamp('timeout_start_yellow',Timestamp)) , !.$/;"	l
set_timeout_start_yellow	ssl_refbox_rules_prolog.pl	/^set_timeout_start_yellow :- timestamp('timestamp',Timestamp) , retract(timestamp('timeout_start_yellow',_)) , assert(timestamp('timeout_start_yellow',Timestamp)).$/;"	l
set_timestamp	filter_data.cc	/^void Filter_Data::set_timestamp(const BSmart::Time_Value& timestamp_) {$/;"	f	class:Filter_Data	signature:(const BSmart::Time_Value& timestamp_)
set_timestamp	filter_data.h	/^	void set_timestamp(const BSmart::Time_Value&);$/;"	p	class:Filter_Data	access:public	signature:(const BSmart::Time_Value&)
set_timestamp	pre_filter_data.cc	/^void Pre_Filter_Data::set_timestamp(BSmart::Time_Value frame_received) {$/;"	f	class:Pre_Filter_Data	signature:(BSmart::Time_Value frame_received)
set_timestamp	pre_filter_data.h	/^    void set_timestamp(BSmart::Time_Value);$/;"	p	class:Pre_Filter_Data	access:public	signature:(BSmart::Time_Value)
set_total_play_time_end	ssl_refbox_rules_prolog.pl	/^set_total_play_time_end :- timestamp('total_play_time_start',Start) , timestamp('timestamp',Timestamp) , not(timestamp('total_play_time_total',_)) , New is Timestamp-Start , assert(timestamp('total_play_time_total',New)) , !.$/;"	l
set_total_play_time_end	ssl_refbox_rules_prolog.pl	/^set_total_play_time_end :- timestamp('total_play_time_start',Start) , timestamp('timestamp',Timestamp) , timestamp('total_play_time_total',Old) , New is Old+(Timestamp-Start) , retract(timestamp('total_play_time_total',_)) , assert(timestamp('total_play_time_total',New)).$/;"	l
set_total_play_time_start	ssl_refbox_rules_prolog.pl	/^set_total_play_time_start :- timestamp('timestamp',Timestamp) , not(timestamp('total_play_time_start',_)) , assert(timestamp('total_play_time_start',Timestamp)) , !.$/;"	l
set_total_play_time_start	ssl_refbox_rules_prolog.pl	/^set_total_play_time_start :- timestamp('timestamp',Timestamp) , retract(timestamp('total_play_time_start',_)) , assert(timestamp('total_play_time_start',Timestamp)).$/;"	l
set_yellow_timeout_end	ssl_refbox_rules_prolog.pl	/^set_yellow_timeout_end :- timestamp('timeout_start_yellow',Start) , timestamp('timestamp',Timestamp) , not(timestamp('timeout_time_yellow',_)) , New is Timestamp-Start , assert(timestamp('timeout_time_yellow',New)) , !.$/;"	l
set_yellow_timeout_end	ssl_refbox_rules_prolog.pl	/^set_yellow_timeout_end :- timestamp('timeout_start_yellow',Start) , timestamp('timestamp',Timestamp) , timestamp('timeout_time_yellow',Old) , New is Old+(Timestamp-Start) , retract(timestamp('timeout_time_yellow',_)) , assert(timestamp('timeout_time_yellow',New)).$/;"	l
setupUi	ui_GuiControls.h	/^    void setupUi(QMainWindow *GuiControls)$/;"	f	class:Ui_GuiControls	access:public	signature:(QMainWindow *GuiControls)
showLogControl	debug/moc_gamearea.cpp	/^void Gamearea::showLogControl(bool _t1)$/;"	f	class:Gamearea	signature:(bool _t1)
showLogControl	debug/moc_sslvision.cpp	/^void SSLVision::showLogControl(bool _t1)$/;"	f	class:SSLVision	signature:(bool _t1)
showLogControl	gamearea.h	/^    void showLogControl(bool);$/;"	p	class:Gamearea	access:public	signature:(bool)
showLogControl	moc_gamearea.cpp	/^void Gamearea::showLogControl(bool _t1)$/;"	f	class:Gamearea	signature:(bool _t1)
showLogControl	moc_sslvision.cpp	/^void SSLVision::showLogControl(bool _t1)$/;"	f	class:SSLVision	signature:(bool _t1)
showLogControl	sslvision.h	/^    void showLogControl(bool);$/;"	p	class:SSLVision	access:public	signature:(bool)
show_rule_data	gamearea.h	/^    bool show_rule_data;$/;"	m	class:Gamearea	access:private
show_rules	ui_GuiControls.h	/^    QPushButton *show_rules;$/;"	m	class:Ui_GuiControls	access:public
show_rules_changed	gamearea.cc	/^void Gamearea::show_rules_changed() {$/;"	f	class:Gamearea	signature:()
show_rules_changed	gamearea.h	/^    void show_rules_changed();$/;"	p	class:Gamearea	access:public	signature:()
show_world	gamearea.cc	/^void Gamearea::show_world() {$/;"	f	class:Gamearea	signature:()
show_world	gamearea.h	/^    void show_world();$/;"	p	class:Gamearea	access:public	signature:()
sleep_time	sslvision.h	/^    int sleep_time;$/;"	m	struct:Transformed_Percept	access:public
slider_action	guiactions.cc	/^void GuiActions::slider_action(int action) {$/;"	f	class:GuiActions	signature:(int action)
slider_action	guiactions.h	/^    void slider_action(int);$/;"	p	class:GuiActions	access:public	signature:(int)
socket	refboxlistener.h	/^    BSmart::Multicast_Socket* socket;$/;"	m	class:RefboxListener	access:private
socket	sslvision.h	/^    BSmart::Multicast_Socket* socket;$/;"	m	class:SSLVision	access:private
speed	pf_tester.h	/^    double speed;$/;"	m	class:PF_Tester	access:private
speed	sample.h	/^    BSmart::Pose speed;$/;"	m	class:Robot_Sample	access:public
speed	sample.h	/^    BSmart::Pose3D speed;$/;"	m	class:Ball_Sample	access:public
standard_sleep_time	sslvision.h	/^    int standard_sleep_time;$/;"	m	class:SSLVision	access:private
standing	filter_data.h	/^	BSmart::Int_Vector standing;$/;"	m	struct:Broken_Rule	access:public
start_blue_timeout	ssl_refbox_rules_prolog.pl	/^start_blue_timeout   :- timestamp('timeout_start',0) , timeouts('timeouts',Y,B) , set_total_play_time_end , set_local_play_state(1) , set_timeout_start , retract(timeouts('timeouts',_,_)) , New is B+1 , assert(timeouts('timeouts',Y,New)).$/;"	l
start_game	ssl_refbox_rules_prolog.pl	/^start_game :- get_local_play_state(1)  , get_ball_status(_,_,6,_) , not(rule_sixteen) , get_local_next_play_state(2) , set_local_play_state(2).$/;"	l
start_game	ssl_refbox_rules_prolog.pl	/^start_game :- get_local_play_state(1)  , get_ball_status(_,_,6,_) , not(rule_sixteen) , get_local_next_play_state(Next) , ((Next =:= 5) ; (Next =:= 6) ; (Next =:= 11) ; (Next =:= 12)) , set_local_play_state(Next) , reset_touch , set_ten_seconds.$/;"	l
start_game	ssl_refbox_rules_prolog.pl	/^start_game :- get_local_play_state(1)  , get_ball_status(_,_,6,_) , not(rule_sixteen) , get_local_next_play_state(Next) , ((Next =:= 7) ; (Next =:= 8) ; (Next =:= 13) ; (Next =:= 14)) , set_local_play_state(Next) , Next_after is (Next-4) , set_local_next_play_state(Next_after) , reset_touch , set_three_seconds.$/;"	l
start_game	ssl_refbox_rules_prolog.pl	/^start_game :- get_local_play_state(13) , get_ball_status(_,_,6,_) , not(rule_fourteen)  , get_timestamp(T1) , get_three_seconds(T2) , T3 is T1-T2 , T3 >= 3000 , set_local_play_state(9) , set_local_next_play_state(13) , reset_touch , set_ten_seconds.$/;"	l
start_game	ssl_refbox_rules_prolog.pl	/^start_game :- get_local_play_state(14) , get_ball_status(_,_,6,_) , not(rule_seventeen) , get_timestamp(T1) , get_three_seconds(T2) , T3 is T1-T2 , T3 >= 3000 , set_local_play_state(10) , set_local_next_play_state(14) , reset_touch , set_ten_seconds.$/;"	l
start_game	ssl_refbox_rules_prolog.pl	/^start_game :- get_local_play_state(7)  , get_ball_status(_,_,6,_) , not(rule_fourteen)  , get_timestamp(T1) , get_three_seconds(T2) , T3 is T1-T2 , T3 >= 3000 , set_local_play_state(3) , set_local_next_play_state(7) , reset_touch , set_ten_seconds.$/;"	l
start_game	ssl_refbox_rules_prolog.pl	/^start_game :- get_local_play_state(8)  , get_ball_status(_,_,6,_) , not(rule_seventeen) , get_timestamp(T1) , get_three_seconds(T2) , T3 is T1-T2 , T3 >= 3000 , set_local_play_state(4) , set_local_next_play_state(8) , reset_touch , set_ten_seconds.$/;"	l
start_play_record	sslvision.cc	/^int SSLVision::start_play_record() {$/;"	f	class:SSLVision	signature:()
start_play_record	sslvision.h	/^    int start_play_record();$/;"	p	class:SSLVision	access:private	signature:()
start_record	sslvision.cc	/^void SSLVision::start_record() {$/;"	f	class:SSLVision	signature:()
start_record	sslvision.h	/^    void start_record();$/;"	p	class:SSLVision	access:private	signature:()
start_time	gamearea.h	/^    BSmart::Time_Value start_time;$/;"	m	class:Gamearea	access:private
start_yellow_timeout	ssl_refbox_rules_prolog.pl	/^start_yellow_timeout :- timestamp('timeout_start',0) , timeouts('timeouts',Y,B) , set_total_play_time_end , set_local_play_state(1) , set_timeout_start , retract(timeouts('timeouts',_,_)) , New is Y+1 , assert(timeouts('timeouts',New,B)).$/;"	l
staticMetaObject	debug/moc_gamearea.cpp	/^const QMetaObject Gamearea::staticMetaObject = {$/;"	m	class:Gamearea	file:
staticMetaObject	debug/moc_guiactions.cpp	/^const QMetaObject GuiActions::staticMetaObject = {$/;"	m	class:GuiActions	file:
staticMetaObject	debug/moc_log_control.cpp	/^const QMetaObject Log_Control::staticMetaObject = {$/;"	m	class:Log_Control	file:
staticMetaObject	debug/moc_particle_filter.cpp	/^const QMetaObject Particle_Filter::staticMetaObject = {$/;"	m	class:Particle_Filter	file:
staticMetaObject	debug/moc_particle_filter.cpp	/^const QMetaObject Particle_Filter_Mother::staticMetaObject = {$/;"	m	class:Particle_Filter_Mother	file:
staticMetaObject	debug/moc_pf_tester.cpp	/^const QMetaObject PF_Tester::staticMetaObject = {$/;"	m	class:PF_Tester	file:
staticMetaObject	debug/moc_refboxlistener.cpp	/^const QMetaObject RefboxListener::staticMetaObject = {$/;"	m	class:RefboxListener	file:
staticMetaObject	debug/moc_ssl_refbox_rules.cpp	/^const QMetaObject SSL_Refbox_Rules::staticMetaObject = {$/;"	m	class:SSL_Refbox_Rules	file:
staticMetaObject	debug/moc_sslvision.cpp	/^const QMetaObject SSLVision::staticMetaObject = {$/;"	m	class:SSLVision	file:
staticMetaObject	moc_gamearea.cpp	/^const QMetaObject Gamearea::staticMetaObject = {$/;"	m	class:Gamearea	file:
staticMetaObject	moc_guiactions.cpp	/^const QMetaObject GuiActions::staticMetaObject = {$/;"	m	class:GuiActions	file:
staticMetaObject	moc_log_control.cpp	/^const QMetaObject Log_Control::staticMetaObject = {$/;"	m	class:Log_Control	file:
staticMetaObject	moc_particle_filter.cpp	/^const QMetaObject Particle_Filter::staticMetaObject = {$/;"	m	class:Particle_Filter	file:
staticMetaObject	moc_particle_filter.cpp	/^const QMetaObject Particle_Filter_Mother::staticMetaObject = {$/;"	m	class:Particle_Filter_Mother	file:
staticMetaObject	moc_pf_tester.cpp	/^const QMetaObject PF_Tester::staticMetaObject = {$/;"	m	class:PF_Tester	file:
staticMetaObject	moc_refboxlistener.cpp	/^const QMetaObject RefboxListener::staticMetaObject = {$/;"	m	class:RefboxListener	file:
staticMetaObject	moc_ssl_refbox_rules.cpp	/^const QMetaObject SSL_Refbox_Rules::staticMetaObject = {$/;"	m	class:SSL_Refbox_Rules	file:
staticMetaObject	moc_sslvision.cpp	/^const QMetaObject SSLVision::staticMetaObject = {$/;"	m	class:SSLVision	file:
status	sample.h	/^    Status status;$/;"	m	class:Sample	access:public
status_names	sample.cc	/^const QString Sample::status_names[STATUS_NUM] = { "UNKNOWN", "ROLLING",$/;"	m	class:Sample	file:
status_names	sample.h	/^    static const QString status_names[STATUS_NUM];$/;"	m	class:Sample	access:public
statusbar	ui_GuiControls.h	/^    QStatusBar *statusbar;$/;"	m	class:Ui_GuiControls	access:public
std_dev_ball	particle_filter.h	/^    double std_dev_ball;$/;"	m	class:Particle_Filter	access:private
std_dev_robot	particle_filter.h	/^    double std_dev_robot;$/;"	m	class:Particle_Filter	access:private
symmPlotPoints	glextra.cc	/^inline void GLExtra::symmPlotPoints(const int& x, const int& y,$/;"	f	class:GLExtra	signature:(const int& x, const int& y, const Quadrant& q)
symmPlotPoints	glextra.h	/^    static void symmPlotPoints(const int& x, const int& y, const Quadrant& q);$/;"	p	class:GLExtra	access:private	signature:(const int& x, const int& y, const Quadrant& q)
team	sample.h	/^    int team;$/;"	m	class:Robot_Sample	access:public
tf_percept_queue_all	sslvision.h	/^    std::vector<Transformed_Percept> tf_percept_queue_all;$/;"	m	class:SSLVision	access:private
tf_percept_queue_one_ball	sslvision.h	/^    std::vector<Transformed_Percept> tf_percept_queue_one_ball[2];$/;"	m	class:SSLVision	access:private
tf_percept_queue_one_robot	sslvision.h	/^    std::vector<Transformed_Percept> tf_percept_queue_one_robot[2][Filter_Data::NUMBER_OF_TEAMS][Filter_Data::NUMBER_OF_IDS];$/;"	m	class:SSLVision	access:private
time_remaining	refboxlistener.h	/^        unsigned short time_remaining; \/\/ Seconds remaining for game stage$/;"	m	struct:RefboxListener::GameStatePacket	access:public
timerEvent	gamearea.cc	/^void Gamearea::timerEvent(QTimerEvent*) {$/;"	f	class:Gamearea	signature:(QTimerEvent*)
timerEvent	gamearea.h	/^	void timerEvent(QTimerEvent*);$/;"	p	class:Gamearea	access:public	signature:(QTimerEvent*)
timestamp	filter_data.h	/^	BSmart::Time_Value timestamp;$/;"	m	class:Filter_Data	access:private
timestamp	particle_filter.h	/^    BSmart::Time_Value timestamp;$/;"	m	class:Particle_Filter	access:private
timestamp	particle_filter.h	/^    BSmart::Time_Value timestamp;$/;"	m	struct:Last_Contact	access:public
timestamp	percept.h	/^    BSmart::Time_Value timestamp; \/\/!< Time stamp of the perception$/;"	m	class:Percept	access:public
timestamp	pre_filter_data.h	/^    BSmart::Time_Value timestamp;$/;"	m	class:Pre_Filter_Data	access:private
timestamp	sample.h	/^    double timestamp;$/;"	m	class:Sample	access:public
tmp_perc_robots	glextra.h	/^    Robot_Percept_List tmp_perc_robots;$/;"	m	class:GLExtra	access:private
tmp_sample_robots	glextra.h	/^    Robot_Sample_List tmp_sample_robots;$/;"	m	class:GLExtra	access:private
touches	ssl_refbox_rules.h	/^    int touches;$/;"	m	class:SSL_Refbox_Rules	access:private
transformed_percept	sslvision.h	/^    Transformed_Percept transformed_percept;$/;"	m	class:SSLVision	access:private
type	particle_filter.h	/^    int type;$/;"	m	struct:Last_Contact	access:public
type	sample.h	/^    Type type;$/;"	m	class:Sample	access:public
update_frame	debug/moc_sslvision.cpp	/^void SSLVision::update_frame(int _t1)$/;"	f	class:SSLVision	signature:(int _t1)
update_frame	guiactions.cc	/^void GuiActions::update_frame(int frame) {$/;"	f	class:GuiActions	signature:(int frame)
update_frame	guiactions.h	/^    void update_frame(int);$/;"	p	class:GuiActions	access:public	signature:(int)
update_frame	moc_sslvision.cpp	/^void SSLVision::update_frame(int _t1)$/;"	f	class:SSLVision	signature:(int _t1)
update_frame	sslvision.h	/^    void update_frame(int);$/;"	p	class:SSLVision	access:public	signature:(int)
update_game_state	refboxlistener.cc	/^void RefboxListener::update_game_state(const int referee_signal) {$/;"	f	class:RefboxListener	signature:(const int referee_signal)
update_game_state	refboxlistener.h	/^    void update_game_state(const int);$/;"	p	class:RefboxListener	access:private	signature:(const int)
update_play_speed	log_control.cc	/^void Log_Control::update_play_speed() {$/;"	f	class:Log_Control	signature:()
update_play_speed	log_control.h	/^    void update_play_speed();$/;"	p	class:Log_Control	access:private	signature:()
update_speed	debug/moc_log_control.cpp	/^void Log_Control::update_speed(QString _t1)$/;"	f	class:Log_Control	signature:(QString _t1)
update_speed	log_control.h	/^    void update_speed(QString);$/;"	p	class:Log_Control	access:public	signature:(QString)
update_speed	moc_log_control.cpp	/^void Log_Control::update_speed(QString _t1)$/;"	f	class:Log_Control	signature:(QString _t1)
verticalSpacer	ui_GuiControls.h	/^    QSpacerItem *verticalSpacer;$/;"	m	class:Ui_GuiControls	access:public
visibility	filter_data.h	/^	double visibility[NUMBER_OF_TEAMS][NUMBER_OF_IDS];$/;"	m	class:Filter_Data	access:private
visibility_threshhold	filter_data.h	/^	double visibility_threshhold;$/;"	m	class:Filter_Data	access:private
vision	gamearea.h	/^    SSLVision* vision;$/;"	m	class:Gamearea	access:public
weight_ball	particle_filter.cc	/^bool Particle_Filter::weight_ball(Ball_Percept& perc) {$/;"	f	class:Particle_Filter	signature:(Ball_Percept& perc)
weight_ball	particle_filter.h	/^    bool weight_ball(Ball_Percept&);$/;"	p	class:Particle_Filter	access:private	signature:(Ball_Percept&)
weight_robot	particle_filter.cc	/^bool Particle_Filter::weight_robot(Robot_Percept& perc, int team, int id) {$/;"	f	class:Particle_Filter	signature:(Robot_Percept& perc, int team, int id)
weight_robot	particle_filter.h	/^    bool weight_robot(Robot_Percept&, int, int);$/;"	p	class:Particle_Filter	access:private	signature:(Robot_Percept&, int, int)
weighting	sample.h	/^    double weighting;$/;"	m	class:Sample	access:public
when_broken	filter_data.h	/^	BSmart::Time_Value when_broken;$/;"	m	struct:Broken_Rule	access:public
world_model	gamearea.h	/^    GLuint  world_model;$/;"	m	class:Gamearea	access:private
written	ssl_refbox_rules.h	/^    bool written;$/;"	m	class:SSL_Refbox_Rules	access:private
written_halftime	ssl_refbox_rules.h	/^    bool written_halftime;$/;"	m	class:SSL_Refbox_Rules	access:private
~Ball_Sample	sample.cc	/^Ball_Sample::~Ball_Sample() {$/;"	f	class:Ball_Sample	signature:()
~Ball_Sample	sample.h	/^    ~Ball_Sample();$/;"	p	class:Ball_Sample	access:public	signature:()
~Colors	colors.h	/^	virtual ~Colors() {$/;"	f	class:SSLRefbox::Colors	access:public	signature:()
~GLExtra	glextra.cc	/^GLExtra::~GLExtra() {$/;"	f	class:GLExtra	signature:()
~GLExtra	glextra.h	/^    ~GLExtra();$/;"	p	class:GLExtra	access:public	signature:()
~Gamearea	gamearea.cc	/^Gamearea::~Gamearea() {$/;"	f	class:Gamearea	signature:()
~Gamearea	gamearea.h	/^	~Gamearea();$/;"	p	class:Gamearea	access:public	signature:()
~GuiActions	guiactions.cc	/^GuiActions::~GuiActions() {$/;"	f	class:GuiActions	signature:()
~GuiActions	guiactions.h	/^    ~GuiActions();$/;"	p	class:GuiActions	access:public	signature:()
~Log_Control	log_control.cc	/^Log_Control::~Log_Control() {$/;"	f	class:Log_Control	signature:()
~Log_Control	log_control.h	/^    ~Log_Control();$/;"	p	class:Log_Control	access:public	signature:()
~PF_Tester	pf_tester.cc	/^PF_Tester::~PF_Tester() {$/;"	f	class:PF_Tester	signature:()
~PF_Tester	pf_tester.h	/^    ~PF_Tester();$/;"	p	class:PF_Tester	access:public	signature:()
~Particle_Filter	particle_filter.cc	/^Particle_Filter::~Particle_Filter() {$/;"	f	class:Particle_Filter	signature:()
~Particle_Filter	particle_filter.h	/^    ~Particle_Filter();$/;"	p	class:Particle_Filter	access:public	signature:()
~Particle_Filter_Mother	particle_filter.cc	/^Particle_Filter_Mother::~Particle_Filter_Mother() {$/;"	f	class:Particle_Filter_Mother	signature:()
~Particle_Filter_Mother	particle_filter.h	/^    ~Particle_Filter_Mother();$/;"	p	class:Particle_Filter_Mother	access:public	signature:()
~RefboxListener	refboxlistener.cc	/^RefboxListener::~RefboxListener() {$/;"	f	class:RefboxListener	signature:()
~RefboxListener	refboxlistener.h	/^    ~RefboxListener();$/;"	p	class:RefboxListener	access:public	signature:()
~Robot_Sample	sample.cc	/^Robot_Sample::~Robot_Sample() {$/;"	f	class:Robot_Sample	signature:()
~Robot_Sample	sample.h	/^    ~Robot_Sample();$/;"	p	class:Robot_Sample	access:public	signature:()
~SSLVision	sslvision.cc	/^SSLVision::~SSLVision() {$/;"	f	class:SSLVision	signature:()
~SSLVision	sslvision.h	/^    ~SSLVision();$/;"	p	class:SSLVision	access:public	signature:()
~SSL_Refbox_Rules	ssl_refbox_rules.cc	/^SSL_Refbox_Rules::~SSL_Refbox_Rules() {$/;"	f	class:SSL_Refbox_Rules	signature:()
~SSL_Refbox_Rules	ssl_refbox_rules.h	/^    ~SSL_Refbox_Rules();$/;"	p	class:SSL_Refbox_Rules	access:public	signature:()
~Sample	sample.h	/^    ~Sample() {};$/;"	f	class:Sample	access:public	signature:()
